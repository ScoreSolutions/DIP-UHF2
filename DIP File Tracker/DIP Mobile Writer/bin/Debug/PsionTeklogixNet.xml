<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PsionTeklogixNet</name>
    </assembly>
    <members>
        <member name="T:PsionTeklogix.Utility.Utility">
            <summary>
             The Utility class supplies a variety of miscellaneous methods and classes that do 
            not fit elsewhere in the SDK. It currently provides methods to retrieve built-in
            type information and retrieve assembly information, and contains the definition of
            the MultiString  class. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumName(System.Type,System.Object)">
            <summary>
            Get the name of an enumeration member based on its value.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <param name="value">Value of enumeration member</param>
            <returns>String containing enumeration member name or null if not found.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when enumeration value
            passed in is not found.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumNames(System.Type)">
            <summary>
            Get array of enumeration member names in the declared order.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>Array of strings containing the names of every member in the provided enumeration </returns>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumValues(System.Type)">
            <summary>
            Get array of enum member values in declared order.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>Array of int values, in the order declared in the enumeration.</returns>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.ParseEnumValue(System.Type,System.String)">
            <summary>
            Get enum member value from name.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <param name="name">Name of enumeration member</param>
            <returns>The value of the specified enumeration member.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when name of enumeration
            member passed in is not found.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEntryAssemblyName">
            <summary>
            Returns the path and name for the executable file for the calling process. 
            </summary>
            <remarks>
            That is, it returns the file which is calling the Psion Teklogix library. 
            </remarks>
            <returns>
            Returns the path and name for the file used to create the calling process.
            </returns>
            <exception cref="T:System.Exception">Thrown when the path and name of the assembly,
            used by the calling process is not retreived.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumMaxValue(System.Type)">
            <summary>
            Get the maximum value in the enumeration.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>The maximum value in the enumeration.</returns>
        </member>
        <member name="T:PsionTeklogix.Utility.MultiString">
            <summary>
            Class that wraps strings defined as REG_MULTI_SZ
            registry data types.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.#ctor(System.String[])">
            <summary>
            Constructor. Creates an instance of the multi string registry 
            data types.
            </summary>
            <param name="MyStrings">string array that represents multi strings.</param>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.#ctor(System.String)">
            <summary>
            Constructor. Creates an instance of the multi string registry 
            data types.
            </summary>
            <param name="MultiString">multi-string registry value.</param>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:PsionTeklogix.Utility.MultiString.myStrings">
            <summary>
            String array that represents multi strings.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusEventArgs">
            <summary>
            Battery status change event arguments.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.BatteryStatusEventArgs.#ctor(PsionTeklogix.Power.BatteryStatusValues,PsionTeklogix.Power.BatteryStatusValues)">
            <summary>
            Creates a new instance of the BatteryStatusEvent args class.
            </summary>
            <param name="currentStatus">The current battery status.</param>
            <param name="lastStatus">The last battery status.</param>
        </member>
        <member name="P:PsionTeklogix.Power.BatteryStatusEventArgs.LastStatus">
            <summary>
            Gets the last known battery status before it changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.BatteryStatusEventArgs.CurrentStatus">
            <summary>
            Gets the current battery status.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStateEventHandler">
             <summary>
             The ConnectionStateEventHandler delegate represents the method that will be called
             when the phone book Entry state changes.
             </summary>
             <example>
             The following example shows how the delegate can be used to track the state of the dial
             up connection.
             <code lang="VB">
             Imports PsionTeklogix.RAS
            
             Public Sub DialEntry(name As String)
                 Dim entry as Entry
                 dim pb As New Phonebook
            
                 entry = pb.Entry(name)
            
                 ' Dial asyncronously
                 entry.Dial(False, AddressOf(OnStateChange))
             End Sub
            
             ' Callback function for state changes
             Private Sub OnStateChange(sender As Object, e As ConnectionStateEventArgs)
                 ' Inform the user that the connection has been established.
                 If e.State = ConnectionStates.Connected Then
                     MessageBox.Show("The Connection has been established")
                 End If  
             End Sub
             </code>
             </example>
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStates">
            <summary>
            This enumeration type contains values that specify the states that may occur during a 
            RAS connection operation. If you use the Dial method to establish a RAS connection, 
            you can specify a callback to receive state changes for the current connection state. 
            You can also use the ConnectionStatus method to get the connection state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.OpenPort">
            <summary>The communication port is about to be opened.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PortOpened">
            <summary>The communication port has been opened successfully.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.ConnectDevice">
            <summary>A device is about to be connected. RasGetConnectStatus
            can be called to determine the name and type of the device being 
            connected.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.DeviceConnected">
            <summary>A device has connected successfully.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AllDevicesConnected">
            <summary>All devices in the device chain have successfully 
            connected. At this point, the physical link is established.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Authenticate">
            <summary>The authentication process is starting. Remote access 
            does not enable the remote client to generate any traffic on 
            the LAN until authentication has been successfully completed. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthNotify">
            <summary>An authentication event has occurred. If dwError is 
            zero, this event will be immediately followed by one of the 
            more specific authentication states following. If dwError is 
            nonzero, authentication has failed, and the error value indicates 
            why.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthRetry">
            <summary>The client has requested another validation attempt 
            with a new user name/password/domain. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthCallback">
            <summary>The remote access server has requested a callback 
            number. This occurs only if the user has "Set By Caller" callback 
            privilege on the server.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthChangePassword">
            <summary>The client has requested to change the password on the account. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthProject">
            <summary>The projection phase is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthLinkSpeed">
            <summary>The link-speed calculation phase is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthAck">
            <summary>An authentication request is being acknowledged.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.ReAuthenticate">
            <summary>Reauthentication (after callback) is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Authenticated">
            <summary>The client has successfully completed authentication.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PrepareForCallback">
            <summary>The line is about to disconnect in preparation 
            for callback.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.WaitForModemReset">
            <summary>The client is delaying in order to give the modem time to 
            reset itself in preparation for callback.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.WaitForCallback">
            <summary>The client is waiting for an incoming call from the remote 
            access server.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Projected">
            <summary>This state occurs after the AuthProject state. It indicates
            that projection result data is available.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Interactive">
            <summary>This state corresponds to the terminal state supported by 
            RASPHONE.EXE. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.RetryAuthentication">
            <summary>This state corresponds to the retry authentication state 
            supported by RASPHONE.EXE.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.CallbackSetByCaller">
            <summary>This state corresponds to the callback state supported by 
            RASPHONE.EXE. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PasswordExpired">
            <summary>This state corresponds to the change password state supported 
            by RASPHONE.EXE.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Connected">
            <summary>Successful connection.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Disconnected">
            <summary>Disconnection or failed connection.</summary>
        </member>
        <member name="T:PsionTeklogix.RAS.Entry">
            <summary>
            The Entry class describes the attributes and status of a phonebook entry.
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.Entry._connectionStateCallback">
            <summary>
            Occurs when a connection state change has occured.
            </summary>
            <remarks>
            If there is no event callback has been registered then the operation of this 
            class will be syncronous in nature.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.#ctor(System.String)">
            <summary>
            Initialzes a new instance of an RasEntry class. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.Dial(System.Boolean)">
            <summary>
            Dial an entry syncronously.
            </summary>
            <param name="showLogin"></param>
            <returns>True connected and False if not connected.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.Dial(System.Boolean,PsionTeklogix.RAS.ConnectionStateEventHandler)">
            <summary>
            Dial a phone book entry asyncronously.
            </summary>
            <param name="showLogin">Show the Login dialog.</param>
            <param name="callback">The callback function for processing async messages.</param>
            <returns>True if dialing and False if login cancelled or not dialing.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.HangUp">
            <summary>
            This method hangs up a connection for the this entry.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.OnStateChange(PsionTeklogix.RAS.ConnectionStates,System.Int32)">
            <summary>
            Generates an event when tha state changes. Called from the WinProc
            callback.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.GetExistingHandle">
            <summary>
            Update the handle. This allows the entry to be established elsewhere
            and there will always be a correct handle.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Name">
            <summary>
            Gets the name of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.UserName">
            <summary>
            Gets or Sets the user name for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Password">
            <summary>
            Gets or Sets the password for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Domain">
            <summary>
            Gets or Sets the domain for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Error">
            <summary>
            Gets the current error code for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.EntryProperties">
             <summary>
             Allows an application to retrieve or modify the properties of the RAS entry.
             </summary>
             <remarks>
             <p>An application should modify the entry properties using the existing set 
             of properties:</p>
            
             <pre>
               RasEntryProperties props = myEntry.EntryProperties;
               
               (... change appropriate properties here ...)
            
               myEntry.EntryProperties = props;
             </pre>
            
             </remarks>
             <exception cref="T:System.ApplicationException">If the entry properties could not be 
               retrieved.</exception>
             <exception cref="T:System.ArgumentException">If the entry was not found.</exception>
        </member>
        <member name="T:PsionTeklogix.Indicators.Pattern">
            <summary>
            The Pattern class is used to configure blink patterns of an LED. 
            A pattern works as follows: 
            colour1 is displayed for a length of time equal to duration1Milliseconds. 
            colour2 is displayed for a length of time equal to duration2Milliseconds. 
            The above sequence (1, 2) is repeated repeatCount times. 
            There will then be a delay of delayMilliseconds. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.colour1">
            <summary>
            The first LED colour to display in the pattern.  
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.duration1Milliseconds">
            <summary>
             The duration of the first part of the pattern 
             (duration that we want colour1 to display).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.colour2">
            <summary>
            The second LED colour to display in the pattern.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.duration2Milliseconds">
            <summary>
            The duration of the second part of the pattern 
            (duration that we want colour2 to display).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.repeatCount">
            <summary>
             The number of times to repeat the colour1/colour2 sequence.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.delayMilliseconds">
            <summary>
            The delay in milliseconds between two successive runs of a pattern.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.LED">
             <summary>
             <p>The LED class is used to control access to the LEDs present on a Psion Teklogix 
             device. Almost every Psion Teklogix device has one or more LEDs that are available 
             for use by applications, be they developed by Psion Teklogix, or by 3rd-party 
             developers. Applications typically use the LEDs to indicate device activity, 
             data reception / transmission, error conditions, alerts, and software updates, 
             among other things.</p>
            
             <p>In order to access a LED, an application needs to first list the LEDs available 
             on the current device through a call to the EnumerateLEDs method. The LED class 
             will return an array containing all of the LEDs available to the application, 
             though some of the LEDs returned may not actually be available for use (see below). 
             If no LEDs are returned, the device does not have any available for use.</p>
            
             <p>For example, on a NETBOOK PRO and 7530/7535, the following code:
              <code>
                 string [] ledList = LED.EnumerateLEDs();
              </code>
              will return an array containing a single entry: <i>"Application"</i>
             </p>
            
             <p>The application may then attempt to instantiate a LED object via one of the two
             GetLEDInstance methods. If successful, the LED object may then be used to control
             the LED selected. Note: the GetLEDInstance method will throw an exception if LED 
             is already in use by another application. The other application will have to be
             terminated in order to allow this application to access the LED.</p>
            
             <p>Once instantiated, the following operations can be executed by the LED object:
              * Changing the colour - The SetColour method can be used to turn a LED 
                on or off, or on devices with multi-colour LEDs, change the LED colour.
              * Pulse the LED - The Pulse method can be used to briefly change the 
                colour of the LED, overriding other operations being performed on the LED.
              * Blink in a pattern - The SetPattern method can be used to blink the 
                LED on and off, or blink in different colours (on / off, red / green). The 
                length of time the colours are displayed, and the repeat count/rate can be 
                configured.
             </p>
             </summary>
             <remarks>
             <p>An LED must be disposed of when an application is finished using it (using the 
             Dispose method). Failure to dispose of the LED object before an application 
             terminates may prevent other applications from using the LED on some platforms.</p>
            
             <p>Also, remember that the GetLEDInstanceName and GetLEDInstance methods return a 
             singleton instance of the LED object(s). Calling dispose for an LED object 
             invalidates all references to that LED. For example:
             <code>
              LED appLed1 = LED.GetLEDInstance("Application");
            
              ...
            
              LED appLed2 = LED.GetLEDInstance("Application"); // appLed2 == appLed1
            
              ...
            
              appLed2.Dispose(); // releases all LED resources, appLed1 is now invalid too
            
              ...
            
              appLed1.Dispose(); // !! Error !! Will throw an exception
            
              // this is correct, a new LED object will be returned.
              appLed1 = LED.GetLEDInstance("Application");
             </code>
             </p>
             </remarks>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.EnumerateLEDs">
            <summary>
            Enumerates availabel LED's.
            </summary>
            <returns>
            The EnumerateLEDs method returns an array of strings giving the names of
            the LEDs available for use by an application.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetLEDInstance">
            <summary>
            Returns the default LED instance to the caller. If no LEDs have been instantiated,
            creates LED objects for all available LEDs, and returns the first available LED
            instance to the caller (the default LED). If no LEDs are available, an exception
            will be thrown.
            </summary>
            <returns>
            Returns the default LED instance (if an LED is available)
            throw Exception if no LEDs are available.
            </returns>
            <exception cref="T:System.Exception">Thrown if no LEDs are available.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetLEDInstance(System.String)">
            <summary>
            Returns the specified LED instance to the caller. If the LED instance associated
            with the specified name has not previously allocated, the method will first attempt 
            to create the instance, and if successful will return the LED instance to the caller.
            If the LED could not be allocated, an exception will be thrown.
            </summary>
            <param name="whichLED">
            The name of the LED to allocate, must be one of the LED names
            returned by the EnumerateLEDs() method.
            </param>
            <returns>
            Returns the default LED instance .
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetSoftwareLEDInstance(System.String)">
            <summary>
            Returns the default LED instance to the caller.
            </summary>
            <param name="whichLED">
            The name of the LED to allocate, must be one of the LED names
            returned by the EnumerateLEDs() method.
            </param>
            <returns>
            Returns the default LED instance (if an LED is available)
            throws RuntimeException if no LEDs are available.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of a LED class.
            </summary>
            <param name="whichLED">
            Denotes which LED we are calling.
            </param>
            <param name="software">
            Is it a simulated or real LED.
            </param>
            <exception cref="T:System.Exception">Thrown if the LED
            was already used by another process.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.AvailableColours">
            <summary>
            Returns all of the colours available on this LED.
            </summary>
            <returns>
            Return the available LED colours, as an array of strings. If
            the LED object was in the middle of GC, it will throw ObjectDisposedException.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.AvailableComponentColours">
            <summary>
            Returns the available component colours of an LED.
            </summary>
            <returns>
            Return the component colours for the LED (not the combination colour(s)).
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.DefaultOnColour">
            <summary>
            Returns the default colour displayed by the LED when it is lit.
            </summary>
            <returns>
            Return the default 'on' colour for the LED. For multi-colour LEDs, the default
            colour when powered on will be one of the component colours (green, for example).
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.DefaultOffColour">
            <summary>
            Returns the default "colour" displayed by the LED when it is turned off.
            </summary>
            <returns>
            Return the default 'off' colour for LEDs.
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.ValueOfColour(System.String)">
            <summary>
            Returns the index value of the specified colour (contained in the availableColours
            array).
            </summary>
            <param name="colour">
            The name of the colour to look up
            </param>
            <returns>
            The index of the colour in the availableColours array.
            throw Exception If the specified colour is not present in the array
            </returns>
            <exception cref="T:System.Exception">Thrown if the specified colour is not
            supported by the device.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.ResolveColour(System.String)">
            <summary>
            Converts a specified colour name into a proper colour name, converting "off" into
            the standard default off colour string "unlit", and "on" to the default on colour
            (hardware-dependent). If the colour specified does not match either "on", "off",
            or a known colour, an exception is thrown.
            </summary>
            <param name="colour">
            The name of the colour to look up
            </param>
            <returns>
            Return the proper colour name, from the availableColours array
            throw Exception If the specified colour is not known and not present in the 
            available colours array
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.TimerElapsed(System.Object)">
            <summary>
            TimerElapsed method implements the method of the same name in the TimerListenerInterface.
            It will be registered with the pattern Timer object created by the LED.
            </summary>
            <param name="oElapsed">
            The source of the timer event (the LED itself).
            </param>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Pulse(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Causes the LED to pulse the specified colour. An LED pulse is similar to setting
            the LED to a given colour briefly.
            </summary>
            <param name="pulseColour">
            Which Colour to pulse.
            </param>
            <param name="durationMilliseconds">
            Pulse duration in milliseconds.
            </param>
            <param name="independentComponents">
            If the independent flag is set, then a pulse colour can combine with a colour
            currently being displayed (multi-colour LEDs only). e.g red + green = yellow.
            </param>
            <param name="extendCurrentPulse">
            Whether to extend the current pulse or not.
            </param>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.PulseTimerElapsed(System.Object)">
            <summary>
            Removes Pulse information after timer runs out. Called when a timer 
            runs out.
            </summary>
            <param name="o">
            An instance of a timer object.
            </param>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Dispose">
            <summary>
            Releases all resources used by the current instance of LED.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.pattern">
            <summary>
            Gets/Sets the pattern displayed by the LED. An
            LED pattern is when the LED is asked to blink on and off (or between colours X and
            Y) an certain number times, with the LED turned on/off/set to certain colour for a 
            given length of time. Patterns can be used to indicate some event is taking place,
            such as a software update, data reception, operation in progress, etc.
            Patterns are specified in a pattern object, see the Pattern class, above. 
            </summary>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.colour">
            <summary>
            Gets/Sets colour property Sets the colour of the LED to the specified colour, cancelling any pattern in
            progress. Once the call to this method completes, the pattern information will 
            report an infinite duration for colour1, with no repetitions. 
            </summary>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.LEDName">
            <summary>
            Gets the name of the LED diode.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.LED.PulseControl">
            <summary>
            The PulseControl class is used to keep track of LED pulses - i.e. when the 
            application needs to change the LED colour / state while it is potentially already 
            active (i.e. being used by another thread or has simply been set to a particular
            state or colour).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl">
             <summary>
              @deprecated Will be replaced by Imager SDK and namespace.
              The EnhancedViewfinderControl creates a image viewfinder 'window' in an application.
             The viewfinder control, once enabled, will display the current image being captured 
             by the imager. The image will be updated periodically (approximately every 100 to 
             200ms).
             </summary>
             <remarks>
             <p> The enhanced viewfinder control operates on an ImageCaptureDevice object
             supplied by the application. If the application is using an ImageCaptureDevice 
             control, it can get the internal ImageCaptureDevice object used by the control
             using the 'ImageCaptureDevice' property.</p>
             <p> The viewfinder does not take over or otherwise prevent other code from using
             the imager, nor does it reconfigure the imager. Consequently, the viewfinder 
             control will always use the current imager configuration, and will be affected by 
             any changes made to it. Do note however that it may not be possible to capture an
             image while the imager is in viewfinder mode.</p>
             </remarks>
             <example>
             The following code creates and configures a viewfinder control:
             <code>
                imageCaptureDeviceControl imager = imageCaptureDeviceControl();
                ... (configure control here) ...
            
                EnhancedViewfinderControl vf = new EnhancedViewfinderControl();
                vf.enhancedViewfinderControl1.EnableViewfinder = false;
                vf.enhancedViewfinderControl1.ImageCaptureDevice = imager.ImageCaptureDevice;
                vf.enhancedViewfinderControl1.Size = new System.Drawing.Size(224, 120);
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl.#ctor">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor for the EnhancedViewfinderControl class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl.Dispose">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Releases all resources used by the Component.
            </summary>
            <remarks>
            <p> Calling Dispose allows the resources used by the Component to be reallocated 
            for other purposes. </p>
            <p> The Dispose method does not release the resources held by the ImageCaptureDevice
            object referenced by the ImageCaptureDevice property.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl.EnableViewfinder">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             The EnableViewfinder property enables or disables the viewfinder window. While 
            enabled, the viewfinder will capture images from imager and show them in the 
            display area of the component.
            </summary>
            <remarks>
            <p>Setting this property to true has no effect if the ImageCaptureDevice 
            property is null.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl.ImageCaptureDevice">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             The image capture device object that will be used to capture the images that
            will be displayed by the viewfinder.
            </summary>
            <remarks>
            <p>The viewfinder control does not change or otherwise reconfigure the imager.</p>
            <p>It is not possible to enable the viewfinder until this property is set to
            a valid non-null value.</p>
            <p>Use the ImageCaptureDeviceControl.ImageCaptureDevice property to get a valid
            value for this property if an application is not working directly with
            ImageCaptureDevice objects.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.EnhancedViewfinderControl.Image">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The bitmap image currently being displayed by the viewfinder.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.FormCompleteEventArgs">
            <summary>
            Form complete status change event arguments.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerError">
            <summary> Trigger error codes.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.Success">
            <summary> The operation completed successfully. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.UnknownError">
            <summary> An unknown error occurred.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InternalError">
            <summary> An internal error occurred.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidEventListener">
            <summary> An invalid or null trigger event listener was specified.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidFlagsSet">
            <summary> An invalid flag or combination of flags was specified.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.EventNotSent">
            <summary> The trigger event could not be sent.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.CommunicationFailure">
            <summary> The trigger control code could not communicate with the trigger driver.</summary>
            <remarks> This error can occur if the trigger driver is not present on the
            device or not functioning correctly.</remarks>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.AlreadyRegistered">
            <summary> The trigger consumer is already registered.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.NotRegistered">
            <summary> The trigger consumer is not registered.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.MappingExists">
            <summary> The specified mapping already exists.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.MappingNotFound">
            <summary> The mapping specified does not exist.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.ExclusiveMappingExists">
            <summary> The application attempted to add a mapping, but an exclusive mapping 
            already exists. The application must use the override flag in order to add
            the new mapping.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.NotInitialized">
            <summary> The Initialize method was not called, or was called and failed.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.OperationNotSupported">
            <summary> The operation attempted is not supported by this device. It may be
            necessary to update the software on the device.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.FriendlyNameNotFound">
            <summary> The Correspondent friendly name was not found. </summary> 
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.TriggerIdNotFound">
            <summary> The Correspondent trigger ID was not found. </summary> 
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidParameter">
            <summary> Invalid Parameter supplied. </summary>         
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.TemporaryMappingExists">
            <summary> The application attempted to add a mapping, but a temporary mapping 
            already exists. </summary>        
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerException">
            <summary> 
            The exception thrown by the TriggerControl class when an error occurs.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerException.#ctor(PsionTeklogix.Trigger.TriggerError)">
            <summary> Constructor.</summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerException.#ctor(PsionTeklogix.Trigger.TriggerError,System.String)">
            <summary> Constructor.</summary>
            <param name="errorCode">The error that occurred.</param>
            <param name="exceptionText">A description of the error that occurred.</param>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerException.TriggerErrorValue">
            <summary> Used to report the error that occurred.</summary>
            <value> 
            The error that occurreed. See the TriggerError enumeration for more
            information. 
            </value>
        </member>
        <member name="T:PsionTeklogix.RAS.Win32">
            <summary>
            Win32 API definitions.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.RasEntryProperties">
            <summary>
             Defines the properties of a RAS phonebook entry. 
            </summary>
            <remarks>
             The RasEntryProperties class is used to store the configuration of a RAS phonebook 
            entry, including information to determine:
            * How to generate the phone number to dial
            * What device should be used to dial to the server
            * Extra information to provide to the server
            * The authentication protocols that can and can't be negotiated
            * The framing protocol and frame size to use
            * Script name
            * AutoDialing configuration
            * Network configuration (WINS, DNS, local IP address)
            </remarks>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_USE_COUNTRY_AND_AREA_CODES">
            <summary>
            If this flag is set, the country code and area code members will be used to 
            construct the phone number dialed. If the option is not enabled, the country code
            and area code members are ignored. This flag is equivalent to the 'Use Country / 
            Region and Area Codes' checkbox found on the phone dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SPECIFIC_IPADDR">
            <summary>
            Allows a specific IP address to be configured for the dial-up connection. The 
            IP address to use must be set in the RasEntryProperties.ipAddress member, below. 
            Setting this flag corresponds to checking the 'Specify an IP Address' checkbox on
            the TCP/IP Settings dialog box. If specified, the IP address will override the one
            set in the Network Control Panel. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SPECIFIC_NAME_SERVERS">
            <summary>
            If this flag is enabled, the DNS, alternate DNS, WINS and alternate WINS server
            IP addresses may be specified (below). This flag corresponds to the checkbox
            'Specify Name Server Addresses' on the TCP/IP Settings dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_IPHEADER_COMPRESSION">
            <summary>
            If this flag is set, RAS tries to negotiate the use of IP header compression on 
            the PPP connection. If not set, IP header compression is not negotiated. This flag
            should be set, as it can significantly improve performance on slower connections.
            Note that it may have to be cleared when communicating with some older RAS servers
            that do not correctly negotiate or support IP header compression 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REMOTE_DEFAULT_GATEWAY">
            <summary>
            Windows CE enables this option when a new RAS entry is created and populated with
            default values. It is subsequently ignored, and does not modify the default route. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_DISABLE_LCP_EXTENSIONS">
            <summary>
            If this flag is set, RAS disables the PPP LCP extensions defined in RFC 1570. 
            However, setting the flag may uinterfere with RAS features such as server callback. 
            It is recommended that this option should be left disabled unless it is required. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SW_COMPRESSION">
            <summary>
            If this flag is set, the RAS server and client will attempt to negotiate the use
            of software compression (CCP) on the PPP link. This option should be enabled for 
            most connections, but may be disabled to reduce negotiation times if the server
            and client do not have a common, compatible compression protocol. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_ENCRYPTED_PW">
            <summary>
            If this option is enabled, only secure password schemes may be used to authenticate
            the user, meaning that PAP cannot be used, as the password is sent as plain text
            under PAP. SPAP and CHAP may be used, however. Note that setting this flag may 
            limit uinteroperability with older servers. This flag corresponds to the 'Require 
            Encrypted Password' check box in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_MS_ENCRYPTED_PW">
            <summary>
            If this option is enabled, only the Microsoft Challenge Authentication Protocol
            (MSCHAP) may be used to authenticate a user. PAP and MD5-CHAP may not be used. This
            flag overrides the OPT_REQUIRE_ENCRYPTED_PW flag. The option corresponds to the 
            Require Microsoft Encrypted Password check box  in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_DATA_ENCRYPTION">
            <summary>
            This option forces the client and server to successfully negotiate data encryption,
            and close the connection if it cannot be negotiated. This flag is ignored if the
            OPT_REQUIRE_MS_ENCRYPTED_PW option is not enabled. The OPT_REQUIRE_DATA_ENCRYPTION
            flag corresponds to the Require Data Encryption check box in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_NETWORK_LOGON">
            <summary>
            If this option is enabled, RAS will attempt to log on to the network after the 
            connection to the server has been established. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_USE_LOGON_CREDENTIALS">
            <summary>
            This flag causes RAS to use the same user name, domain and password of the currently
            logged-on user when dialing a connection. The flag will be ignored unless the
            OPT_REQUIRE_MS_ENCRYPTED_PW flag is also set. This setting is ignored by the 
            RasEntry.Dial method, where specifying empty strings for the user name, 
            password and domain has the same effect. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_DIAL_AS_LOCAL_CALL">
            <summary>
            If this option is enabled, RAS generates the phone number as a local call. It will
            include the area code if the area code does not match the area code of the current
            location. The flag is equivalent to the "force local" option in various RAS-related
            dialog boxes. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_PAP">
            <summary>
            If this flag is set, PAP (Password Authentication Protocol) will not be used. 
            If not set, the use of PAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_CHAP">
            <summary>
            If this flag is set, CHAP (Challenge Handshake Authentication Protocol) will
            not be used. If not set, the use of CHAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_MSCHAP">
            <summary>
            If this flag is set, MSCHAP (Microsoft Challenge Handshake Authentication 
            Protocol) will not be used. If not set, the use of MSCHAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_MSCHAP2">
            <summary>
            If this flag is set, MSCHAP v2.0 (Microsoft Challenge Handshake Authentication 
            Protocol) will not be used. If not set, the use of MSCHAP v2.0 may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_EAP">
            <summary>
            If this flag is set, use of the Extensible Authentication Protocol will not be 
            allowed. If not set, EAP may be negotiated. Note: currently, the Java RAS API does
            does support EAP. This flag should always be set. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PREVIEW_USERPW">
            <summary>
            If this option is set, RAS will display a username/password dialog before attempting
            to connect to the RAS server. Note that this is not the same dialog as the one that
            appears when the RasEntry.Dial(true) method is invoked. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_CUSTOM_SCRIPT">
            <summary>
            If enabled, this flag will cause RAS to to invoke the custom-scripting specified
            below DLL after establishing a connection to the server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_TERMINAL_BEFORE_DIAL">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_TERMINAL_AFTER_DIAL">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_MODEM_LIGHTS">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROMOTE_ALTERNATES">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SECURE_LOCAL_FILES">
             <summary>
             If this option is enabled, it forces RAS to check for remote printer and file
             system bindings, that is those created as a result of enabling Printer and File 
             Sharing.
             </summary>
             <remarks>
             <p>This option should be set when connecting to a public network to notify 
             users to disconnect existing network connections (i.e. to private networks) 
             before establishing a connection the public network.</p>
             
             <p>If either Client for Microsoft Networks or File and Print Sharing is not 
             enabled on a given connection, calling RasEntry.GetEntryProperties returns 
             with the OPT_SECURE_LOCAL_FILES flag set. Calling RasEntry.SetEntryProperties
             with the OPT_SECURE_LOCAL_FILES set disabled both Client for Microsoft 
             Networks and File and Print Sharing; disabling the option enables both items.
             </p>
            
             <p>This option is not currently supported by Windows CE.</p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.PROTO_PPP">
            <summary>
            Use PPP (the Point-to-Point Protocol - RFC 1661) as the framing protocol 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.PROTO_SLIP">
            <summary>
            Use SLIP (the Serial Line IP Protocol - RFC 1055) as the framing protocol 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.FRAME_SIZE_1006">
            <summary>
            Use a frame size of 1006 when communicating with the RAS Server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.FRAME_SIZE_1500">
            <summary>
            Use a frame size of 1500 when communicating with the RAS Server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_DIRECT">
            <summary>
            Direct Connect (WINCE Extension) 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_MODEM">
            <summary>
            Modem connection 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_ISDN">
            <summary>
            ISDN 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_X25">
            <summary>
            X.25 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_VPN">
            <summary>
            Virtual Private Network (Point-to-Point Tunnelling Protocol) 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_PPPOE">
            <summary>
            Point-to-Point Protocol over Ethernet 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.options">
            <summary>
            The options to use when connecting and negotiation connection options. By default,
            Software Compression and IP header compression should be enabled. EAP negotiation
            must be disabled (not supported). 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.countryCode">
            <summary>
            The country/region portion of the phone number dialed. This setting will be ignored
            unless the OPT_USE_COUNTRY_AND_AREA_CODES option is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.areaCode">
            <summary>
            The area code portion of the phone number, without brackets or other delimiters.
            This setting will be ignored unless the OPT_USE_COUNTRY_AND_AREA_CODES 
            option is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.localPhoneNumber">
            <summary>
            The phone number to dial. Its use will depend on the options set above. If the
            OPT_USE_COUNTRY_AND_AREA_CODES option is enabled, the phone number will be 
            assembled from the country code and area code. If not set, or if the 
            OPT_DIAL_AS_LOCAL_CALL option is set, the entire string will be used as the
            phone number.  
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddress">
            <summary>
            The IP address to assign to the Psion Teklogix device. This parameter is ignored
            unless the OPT_SPECIFIC_IPADDR option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressDns">
            <summary>
            The DNS server IP address for the Psion Teklogix device. This parameter is ignored
            unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressDnsAlt">
            <summary>
            The alternate DNS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressWins">
            <summary>
            The WINS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressWinsAlt">
            <summary>
            The alternate WINS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.framingProtocol">
            <summary>
            The protocol to use when communicating with the server. PPP is the most common
            protocol used, although SLIP is used frequently in UNIX environments. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.frameSize">
            <summary>
            The frame size to use when communicating with the RAS Server. This option is only
            useful when "SLIP" is being used. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.script">
            <summary>
            The name of the RAS script file. The script should be specified as a full path 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.autoDialDll">
            <summary>
            The full name and path of the DLL used as the customized AutoDial handler. If the
            name is an empty string, the default auto-dialer is used. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.autoDialFunc">
            <summary>
            The name of the auto-dial function in the AutoDial handler. The DLL must provide 
            both the ANSI and Unicode version of the RASADFunc function. The A or W suffix
            must not be specified in the AutoDial function name. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.deviceType">
            <summary>
            The type of the TAPI device the RAS connection will use. The names and types of 
            all available devices can be found using the RasPhonebook.EnumerateRasDevices
            method. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.deviceName">
            <summary>
            The name of the TAPI device the RAS connection will use. The names and types of 
            all available devices can be found using the RasPhonebook.EnumerateRasDevices
            method. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25PadType">
            <summary>
            The X.25 pad type. This parameter must be an empty string unless an X.25 PAD
            device or native X.25 device is going to be used when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25Address">
            <summary>
            The X.25 address to connect to. This parameter must be an empty string unless an 
            X.25 PAD device or native X.25 device is going to be used when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25Facilities">
            <summary>
            The X.25 facilities to request from the server. This parameter must be an empty 
            string unless an X.25 PAD device or native X.25 device is going to be used when 
            dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25UserData">
            <summary>
            Addition X.25 data to send to the host when connected. This parameter must be an  
            empty string unless an X.25 PAD device or native X.25 device is going to be used 
            when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.channels">
            <summary>
            Specifies the number of channels supported by the device (1 = mono, 2 = stereo, 
            and so on). 
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.RasPhonebook">
             <summary>
             Represents the RAS Phonebook.
             </summary>
             <remarks>
             Note: that there are no properties or methods for managing Phonebook
             but there is an alternative way to manage these entries. As the phone
             book is stored in the registry under HKEY_CURRENT_USER\Comm\Rasphone,
             it is suggested that the entries be created during development and 
             exported using the Remote Regedit tool. These entries may then be 
             added during the installtion procedure by editing the .inf file used
             to create the installtion cab file. 
             </remarks>
             <example>
             The following example shows how to syncronously dial a connection.
             <code lang="VB">
             Imports PsionTeklogix.RAS
            
             Public Sub DialEntry(name As String)
                 Dim pb As New RasPhonebook
                 Dim _entry As Entry
                 _entry = pb.GetEntry(name)
            
                 try
                 {
                     _entry.Dial(False, AddressOf _entry_ConnectionStateEvent)
                     MessageBox.Show("Connection Established");
                 }
                 
                 catch Exception ex
                 {
                     MessageBox.Show("Connection Failed: " + ex.Message);
                 }
                 End Try
                 Private Sub _entry_ConnectionStateEvent(ByVal sender As Object, 
                                 ByVal e As PsionTeklogix.Net.RAS.ConnectionStateEventArgs)
                     Dim entry As Entry = CType(sender, Entry)
                 End Sub
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.RasPhoneBook">
            <summary>
            Initializes a new instance of the Phonebook class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.EnumerateDevices">
            <summary>
            Enumerates all available RAS devices.
            </summary>
            <returns>The names of all available RAS devices</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.EnumerateRasDevices">
            <summary>
            Returns all available RAS devices and their types.
            </summary>
            <returns>The names and types of all available RAS devices.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.Refresh">
            <summary>
            Refreshes an instance of the Phonebook class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.GetEntry(System.String)">
            <summary>
            Gets the specified entry.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.AddEntry(System.String)">
            <summary>
             Returns all of the devices that can be used to create a RAS connection on the
            Psion Teklogix device.
            </summary>
            <remarks>
             This method is obsolete.
            </remarks>
            <param name="Name">Ras entry name</param>
            <exception cref="T:System.ApplicationException">Always. This method is obsolete.</exception>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.AddEntry(System.String,PsionTeklogix.RAS.RasEntryProperties)">
            <summary>
             Adds a new entry to the RAS phonebook. The name for the new entry must be valid, 
            and must not match the name of an existing entry. The properties specified must
            also be valid.
            </summary>
            <remarks>
             * Certain values in the RasEntryProperties object will be ignored unless the
             appropriate option is set (for example, area code will be ignored unless the use
             country and area codes flag is set).
             * Similarly, the X.25 settings will be ignored unless an X.25 device is present
             and selected as the RAS device.
             * See the Win32 API documentation of 'RasValidateEntryName' for the rules for 
             naming a RAS entry.
            </remarks>
            <param name="entryName">Ras entry name to add.</param>
            <param name="props">Ras entry properties</param>
            <exception cref="T:System.ArgumentNullException">If the entry name and/or properties 
            are null.</exception>
            <exception cref="T:System.ArgumentException">If the entry name is invalid or already 
            exists.</exception>
            <exception cref="T:System.ApplicationException">If the entry cannot be created.</exception>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.RemoveEntry(System.String)">
            <summary>
            Removes Entry from Entries collection
            </summary>
            <param name="Name">Ras Entry Name</param>
        </member>
        <member name="P:PsionTeklogix.RAS.RasPhonebook.Entries">
            <summary>
            Gets a collection of entries in the Phonebook.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.RasPhonebook.Connections">
            <summary>
            Gets a collection of entries that are connected.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyEventArgs">
            <summary>
            Arguments for the modifier key event handler.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyEventArgs._key">
            <summary>
            The modifier key that caused the event.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyEventArgs._newState">
            <summary>
            The modifier key's state.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.ModifierKeyEventArgs.#ctor(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.KeyState)">
            <summary>
            Creates a new instance of the ModifierKeyEventArgs.
            </summary>
            <param name="modifier">The modifier key.</param>
            <param name="state">The state of the modifier.</param>        
        </member>
        <member name="P:PsionTeklogix.Keyboard.ModifierKeyEventArgs.key">
            <summary>value of modifier key</summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.ModifierKeyEventArgs.newState">
            <summary>state of modifier key</summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs">
            <summary>
            Arguments for the LetterKeyProposed event handler.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs._key">
            <summary>
            The proposed letter key.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the LetterKeyProposedEventArgs.
            </summary>
            <param name="key">The proposed letter key.</param>
        </member>
        <member name="P:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs.Key">
            <summary>
            property for accessing key proposed
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyHandler">
            <summary>
            Modifier Delegate
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyCompletedHandler">
            <summary>
            Delegate for LetterKeyCompletedEvent
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyProposedHandler">
            <summary>
            Delegate for LetterKeyProposedEvent
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.Key">
            <summary>
            Device independent physical key identifiers. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key0">
            <summary> 0 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key1">
            <summary> 1 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key2">
            <summary> 2 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key3">
            <summary> 3 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key4">
            <summary> 4 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key5">
            <summary> 5 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key6">
            <summary> 6 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key7">
            <summary> 7 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key8">
            <summary> 8 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key9">
            <summary> 9 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.A">
            <summary> A key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.B">
            <summary> B key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.C">
            <summary> C key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.D">
            <summary> D key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.E">
            <summary> E key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F">
            <summary> F key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.G">
            <summary> G key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.H">
            <summary> H key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.I">
            <summary> I key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.J">
            <summary> J key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.K">
            <summary> K key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.L">
            <summary> L key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M">
            <summary> M key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.N">
            <summary> N key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.O">
            <summary> O key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.P">
            <summary> P key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Q">
            <summary> Q key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.R">
            <summary> R key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.S">
            <summary> S key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.T">
            <summary> T key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.U">
            <summary> U key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.V">
            <summary> V key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.W">
            <summary> W key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.X">
            <summary> X key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Y">
            <summary> Y key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Z">
            <summary> Z key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F1">
            <summary> F1 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F2">
            <summary> F2 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F3">
            <summary> F3 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F4">
            <summary> F4 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F5">
            <summary> F5 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F6">
            <summary> F6 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F7">
            <summary> F7 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F8">
            <summary> F8 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F9">
            <summary> F9 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F10">
            <summary> F10 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F11">
            <summary> F11 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F12">
            <summary> F12 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F13">
            <summary> F13 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F14">
            <summary> F14 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F15">
            <summary> F15 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F16">
            <summary> F16 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F17">
            <summary> F17 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F18">
            <summary> F18 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F19">
            <summary> F19 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F20">
            <summary> F20 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F21">
            <summary> F21 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F22">
            <summary> F22 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F23">
            <summary> F23 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F24">
            <summary> F24 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F25">
            <summary> F25 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F26">
            <summary> F26 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F27">
            <summary> F27 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F28">
            <summary> F28 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F29">
            <summary> F29 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F30">
            <summary> F30 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M1">
            <summary>M1 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M2">
            <summary>M2 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M3">
            <summary>M3 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M4">
            <summary>M4 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M5">
            <summary>M5 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M6">
            <summary>M6 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M7">
            <summary>M7 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M8">
            <summary>M8 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M9">
            <summary>M9 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M10">
            <summary>M10 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M11">
            <summary>M11 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M12">
            <summary>M12 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Scan">
            <summary>Scan key </summary>                
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.HandgripScan">
            <summary>Handgrip scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.LeftScan">
            <summary>Left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.RightScan">
            <summary>Right scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideLeftScan">
            <summary>Side left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideRightScan">
            <summary>Side left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Alt">
            <summary>
            Alt key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Backspace">
            <summary>Backspace key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Blue">
            <summary>
            Blue key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Backlight">
            <summary>Backlight key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Comma">
            <summary>Comma key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.ContrastUp">
            <summary>Contrast up key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Control">
            <summary>
            Control key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Delete">
            <summary>Delete key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Enter">
            <summary>Enter key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.End">
            <summary>End key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Esc">
            <summary>Escape key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Home">
            <summary>Home key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Insert">
            <summary>Insert key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Orange">
            <summary>
            Orange key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Period">
            <summary>Period key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PageDown">
            <summary>Page Down key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PageUp">
            <summary>Page Up key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Shift">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Space">
            <summary>Space key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Tab">
            <summary>Tab key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.DownArrow">
            <summary>Down arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.LeftArrow">
            <summary>Left arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.RightArrow">
            <summary>Right arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.UpArrow">
            <summary>Up arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhoneSend">
            <summary>
            Phone talk (send) key
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhoneEnd">
            <summary>Phone end key </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyState">
            <summary>
            Modifier key state constants used by <see cref="T:PsionTeklogix.Keyboard.ModifierKeyEventArgs"/>.
            </summary>    
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.Off">
            <summary>
            Modifier is inactive.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.OneShot">
            <summary>
            Modifier is active.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.Lock">
            <summary>
            Modifier is locked (always active).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyCycle">
            <summary>
            Modifier key cycle used by <see cref="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)"/>
            and <see cref="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyCycle(PsionTeklogix.Keyboard.Key)"/>
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_Lock">
            <summary>
            The modifier key will cycle its state through off and lock.        
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_OneShot">
            <summary>
            The modifier key will cycle its state through off and one shot.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_OneShot_Lock">
            <summary>
            The modifier key will cycle its state through off, one shot and lock.                
            </summary>        
        </member>
        <member name="T:PsionTeklogix.Keyboard.CommandFlags">
            <summary>
            Command flags to use with the <see cref="M:PsionTeklogix.Keyboard.Keyboard.InjectKeyboardCommand(PsionTeklogix.Keyboard.Function,System.Int32,PsionTeklogix.Keyboard.CommandFlags)"/> method.
            </summary>             
        </member>
        <member name="F:PsionTeklogix.Keyboard.CommandFlags.Synchronous">
            <summary>
            Send function synchronously: The function will not return until the injected 
            key is handled.
            By using this flag, you can subsequently call routines such as 
            <see cref="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyState(PsionTeklogix.Keyboard.Key)"/> to get information that has been updated by
            the injected command.
            </summary>       
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard">
            <summary>
            The keyboard class allows developers to:
             -Determine if a hardware keyboard is present on the current 
            Psion Teklogix device. 
             -Determine other information about the keyboard (type, etc.), and to disable and
            re-enable the keyboard  when necessary.
             -The Keyboard class also allows the simulation of keyboard events in software, 
            and to translate between virtual-key codes and scan codes.
             -Monitor modifier keys events (when blue, orange, shift, alt and control keys are
             pressed).
            </summary>
            <remarks>
            The hardware keyboard is the physical keyboard
            which is part of the device. The software keyboard is any SIP device.
            <para>The keyboard class wraps a number of functions available in the
            Windows CE Win32 APIs. They are provided here as part of this assembly
            for your convenience. For detailed information on these APIs, please
            consult the Microsoft documentation for Windows CE .NET located here: 
            <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcelib40/html/pb_start.asp?frame=true"/>.</para>
            <para>You can also navigate to these functions in MSDN by following this
            path: Mobile and Embedded Development > Embedded Operating System Development >
            Windows CE > Windows CE .NET > Product Documentation Application Development > 
            User Interface Services > User Interface Reference > Keyboard Reference > 
            Keyboard Functions</para>
            Note:
            Disabling the keyboard is dangerous, and care should be taken to 
            make sure the keyboard is disabled only when absolutely necessary! 
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.VK_OFF">
            @deprecated use VirtualKey.VK_OFF Instead.       
            <summary>        
            A constant representing the virtual key code 
            which will turn off the power to the device. 
            </summary>
            <remarks>
             Deprecated. Use VirtualKey.VK_OFF Instead.       
            </remarks>                
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.ScanCodeNotFound">
            <summary>TranslateToScanCode will return this constant if the specified key 
              doesn't have a scancode in a particular device.
             </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardType">
            <summary>
            Determines the keyboard type on the Psion Teklogix device.
            </summary>
            <remarks>
            <p>Currently, the keyboard type is a string representing the name of the country 
            or language with which it is  associated, or a count of the number of keys on 
            the device.</p>
            <p>One of the following names will be returned:
             *   United Kingdom
             *   United States
             *   French
             *   German
             *   Italian
             *   Spanish
             *   ABC-Key
             *   Azerty-Key
             *   Qwerty-Key
             *   24 Key Keyboard
             *   36-Key
             *   37-Key
             *   52 Key Keyboard
             *   56-Key
             *   58-Key
             *   62-Key
             *   None
             *   Unknown
            </p>
            </remarks>
            <returns>
            The type of keyboard, as a string. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetAsyncKeyState(System.Int16)">
            <summary>
            Determines whether a key is up or 
            down at the time the function is called, and 
            whether the key was pressed after a previous call to 
            GetAsyncKeyState.
            </summary>
            <param name="key">
            [in] Specifies one of 256 possible virtual-key codes. 
            </param>
            <returns><para>If the method succeeds, the return value specifies 
            whether the key was pressed since the last call to 
            GetAsyncKeyState, and whether the key is currently up or down. 
            If the most significant bit is set, the key is down. The least 
            significant bit is not valid in Windows CE, and should be 
            ignored. GetAsyncKeyState returns the current key state even if 
            a window in another thread or process currently has the 
            keyboard focus.</para>
            <para>This method wraps the GetAsyncKeyState() function in the Windows CE 
            APIs. For more detailed information, please consult MSDN documentation at
            <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetAsyncKeyState.asp"/>.</para>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Synthesizes a keystroke. 
            The system can use such a synthesized keystroke to 
            generate a WM_KEYUP or WM_KEYDOWN message. 
            </summary>
            <param name="bVk">
            [in] Specifies a virtual-key code. 
            The code must be a value in the range 1 to 254. 
            </param>
            <param name="bScan">
            [in] Specifies a hardware scan code for the key. 
            This parameter is not explicitly used. 
            </param>
            <param name="dwFlags">
            [in] Flags which specify various aspects of function operation. 
            </param>
            <param name="dwExtraInfo">
            [in] Specifies an additional 32-bit value 
            associated with the key stroke. 
            </param>
            <remarks>This method wraps the keybd_event function in the Windows CE APIs.
            For detailed information, including flag values for the dwFlags parameter,
            please see the MSDN documentation for this function at
            <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefKeybd_event.asp"/>.</remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.EnableHardwareKeyboard(System.Boolean)">
            <summary>
            Enables or disables the hardware keyboard. 
            </summary>
            <remarks>
            This method affects only the hardware keyboard - that is, the
            physical keyboard that is an integral part of the device - and 
            external keyboards, or virtual keyboards displayed on the touch-sensitive
            screen.
            <para>
            It is sometimes desirable to disable the keyboard in order to 
            prevent any inadvertent actions resulting from accidental pressing 
            of the keys. For mobile devices, this can happen if the device
            is put in a pocket or bumped while in a holster. This method can
            be used to disable the keyboard after a period of inactivity, or
            in response to a user action. Be sure to provide a way for the
            user to re-enable the keyboard (generally through the touch
            screen).</para>
            <para>This method wraps the EnableHardwareKeyboard() function in the
            Windows CE APIs. For more detailed information, please see the MSDN
            documentation for this function at
            <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefenablehardwarekeyboard.asp"/>.</para>
            </remarks>
            <param name="bEnable">
            [in] Boolean value that specifies whether to enable or 
            disable the keyboard. 
            Set it to TRUE to enable the keyboard or FALSE to disable it. 
            </param>
            <returns>
            This method always returns TRUE.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardStatus">
            <summary>
            Returns the status of the hardware keyboard.
            </summary>
            <returns>
            This function returns an value from the <see cref="T:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD"/> enumeration
            indicating whether or not a keyboard is present and what its capabilities are. 
            <para>This method wraps the GetKeyboardStatus() function in the Windows CE
            APIs. For more information, please see the MSDN documentation on this
            function at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetkeyboardstatus.asp"/>.</para>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.MapVirtualKey(System.UInt32,System.UInt32)">
            <summary>
            Translates, or maps, a virtual-key code 
            into a scan code or character value, or translates a 
            scan code into a virtual-key code.
            </summary>
            <remarks>This method wraps the MapVirtualKey() function from the Windows CE
            APIs. For more information, please see the MSDN documentation for this function
            at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefMapVirtualKey.asp"/>.</remarks>
            <param name="uCode">
            [in] Specifies the virtual-key code or scan code for a key. 
            </param>
            <param name="uMapType">
            [in] Specifies the translation to perform. 
            The value of this parameter depends on the value 
            of the uCode parameter 
            </param>
            <returns>
            A character value indicates success. 
            Zero indicates that there is no translation.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetMessageSource">
             <summary>
             Determines the source of a keyboard message.
             </summary>
            <remarks>This method wraps the GetMessageSource() function from the Windows CE
             APIs. For more information, please see the MSDN documentation for this function
             at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetmessagesource.asp"/>.</remarks>
             <returns>
             <list type="bullet"><item>MSGSRC_SOFTWARE_POST indicates 
             that the message source was software. </item>
             <item>MSGSRC_HARDWARE_KEYBOARD indicates that the 
             message source was the keyboard. </item>
             <item>MSGSRC_UNKNOWN indicates that the message source is unknown.</item></list>
             </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardLayout(System.Int32)">
            <summary>
            Retrieves the active input language 
            identifier for a specified thread.
            </summary>
            <remarks>This method wraps the GetKeyboardLayout() function in the Win CE
            .NET API. For more information on this function, see the MSDN documentation
            at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetKeyboardLayout.asp"/>. 
            For more information about language identifiers, see Language Identifiers 
            and Locales at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcelocal/html/cerefLanguageIdentifiersLocales.asp"/> in the
            Microsoft Windows CE .NET documentation in MSDN.</remarks>
            <param name="idThread">
            [in] Set to NULL to get the keyboard layout of 
            the active thread. No other value is supported. 
            </param>
            <returns>
            The input language identifier for the thread 
            indicates success. The low-order word contains a 
            language identifier for the input language and the 
            high-order word contains a device handle for the physical 
            layout of the keyboard. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardLayoutName(System.String)">
            <summary>
            Retrieves the name of the 
            active keyboard layout. 
            </summary>
            <remarks>This method wraps the GetKeyboardLayoutName() function in the
            Win CE .NET API. For more information on this function, please see the 
            MSDN documentation at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetKeyboardLayoutName.asp"/>.</remarks>
            <param name="pwszKLID">
            [in] Pointer to the buffer of at least KL_NAMELENGTH 
            characters that is to receive the name of the keyboard 
            layout, including the terminating null character. 
            </param>
            <returns>
            Nonzero indicates success. Zero indicates failure. 
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.DisableStandardShell">
            <summary>
            Disables standard shell. 
            </summary>
            <remarks>
            The standard shell refers to the Start button and the system
            tray. The task bar will still be available.
             The shell MUST be re-enabled before an application exits. Failure to
            re-enable the shell will leave the shell permanently disabled (until a warm
            boot or cold boot occurs), and will cause the task bar and icon tray to
            disappear.        
            <seealso cref="M:PsionTeklogix.Keyboard.Keyboard.EnableStandardShell"/>
            </remarks>
            <returns>        
            If successful returns true, otherwise false.
            </returns>
            <deprecated>
            This functions used undocumented Microsoft APIs that are not
            supported on newer operating systems. A new Kiosk Mode API is being 
            developed to replace it.
            </deprecated>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.EnableStandardShell">
            <summary>
            Enables Standard shell.
            </summary>
            <remarks>
            The standard shell refers to the Start button and the system
            tray. The task bar will still be available. 
             The shell MUST be re-enabled before an application exits. Failure to
            re-enable the shell will leave the shell permanently disabled (until a warm
            boot or cold boot occurs), and will cause the task bar and icon tray to
            disappear.
            See also <see cref="M:PsionTeklogix.Keyboard.Keyboard.DisableStandardShell"/>
            </remarks>.
            <returns>
            If successful returns true, otherwise false.
            </returns>
            <deprecated>
            This functions used undocumented Microsoft APIs that are not
            supported on newer operating systems. A new Kiosk Mode API is being 
            developed to replace it.
            </deprecated>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyState(PsionTeklogix.Keyboard.Key)">
            <summary>
            Retrieve current modifier key state.
            </summary>
            <param name="key">
            [in] Specifies the modifier key to retrieve.
            valid values are: Orange<seealso cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             Blue<seealso cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, Control<seealso cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             Shift<seealso cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and Alt<seealso cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.
            </param>
            <returns>
             The current state of the passed modifier key. possible values are
             Off<seealso cref="F:PsionTeklogix.Keyboard.KeyState.Off"/>, OneShot<seealso cref="F:PsionTeklogix.Keyboard.KeyState.OneShot"/>
             and Lock <seealso cref="F:PsionTeklogix.Keyboard.KeyState.Lock"/>
            </returns> 
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown when device doesn't support this
            function.</exception>       
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnModifierKeyReceived(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.KeyState)">
            <summary>propagate ModifierKeyEvent</summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnLetterKeyProposed(System.Int32)">
            <summary>propagate LetterKeyProposedEvent</summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnLetterKeyCompleted">
            <summary>propagate LetterKeyCompletedEvent</summary>        
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.TranslateToScanCode(PsionTeklogix.Keyboard.Key)">
            <summary>
             Translates a device-independent key value (enum Key) to a device-dependent
            scan code that may be used with other keyboard API functions.
            </summary>
            <param name="key">
            [in] Key enum value that specifies the key to be translated. <seealso cref="T:PsionTeklogix.Keyboard.Key"/> 
            </param>
            <returns>
             The device dependent scan code. If device doesn't have this key, it will 
             return ScanCodeNotFound constant. 
            </returns> 
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)">
            <summary>
            Set the cycle <seealso cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/>
            of a given modifier key.
            </summary>
            <param name="key">
            [in] The modifier key whose cycle mode will be set.
            Valid values are: <see cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, <see cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and <see cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.                      
            </param>
            <param name="cycle">
            [in] The cycle mode to set the modifier key to.
            </param>
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>       
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is invalid.
            </exception>        
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyCycle(PsionTeklogix.Keyboard.Key)">
            <summary>
            Get the cycle <seealso cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/>
            of a given modifier key.
            </summary>
            <param name="key">
            [in] The modifier key whose cycle will be returned.
            Valid values are: <see cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, <see cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and <see cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.              
            </param>
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>               
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>       
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is
            invalid.</exception>                        
            <returns>
            The cycle mode of the given modifier key.
            </returns> 
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.InjectKeyboardCommand(PsionTeklogix.Keyboard.Function,System.Int32,PsionTeklogix.Keyboard.CommandFlags)">
             <summary>               
             Simulates a key press.
             </summary>
             <remarks>
            <p> This function is used to fake a keypress and release on a Psion Teklogix 
             device. It does this by allowing an application to directly specify the 
             results of a real keypress/release: a function code and its associated 
             data (if any). The function code and data sent to the keyboard driver are 
             handled directly (backlight up for example), or are converted into 
             a sequence of keypress and release events.</p>
             <p>
             Notes:
             1. Injected keys follow all of the normal rules for real keypresses and 
             releases, and are treated in exactly the same way.</p>        
             <p>2. An Injected modifier key follows the configured <see cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/> 
             modes. (see also <see cref="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)"/>).
             In other words, if an 
             application injects the "Orange" key twice by specifying the Function.Orange 
             function code, and the <see cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/> mode is "Off_Lock",
             then the Orange key modifier state will switch from Off to Lock 
             and then back to off.
             </p>
             <p>3. Invalid function codes and virtual key values are ignored.</p>
            </remarks>
             
            <example>
             <p> 1. To change Orange modifier state to Lock:</p>
             <code lang="C#">
              using PsionTeklogix.Keyboard;
             
              // Avoid a keyCycle that doesn't have Lock state.
              Keyboard.SetModifierKeyCycle(Key.Orange, ModifierKeyCycle.Off_OneShot_Lock);     
            
              // Clear the keyboard queue, in case there is a pending mode change.
              Keyboard.InjectKeyboardCommand(Function.Skip, 0, CommandFlags.Synchronous);
              // Change the Orange mode to Lock. The user may still change mode by physically 
              // pressing the Orange key.
              while (Keyboard.GetModifierKeyState(Key.Orange) != KeyState.Lock)
              {
                 Keyboard.InjectKeyboardCommand(Function.Orange, 0, CommandFlags.Synchronous);
              }
            </code>
             <p> 2. To simulate the user pressing Shift-1:</p>
             <code lang="C#">
              using PsionTeklogix.Keyboard;
              
              Keyboard.InjectKeyboardCommand(Function.SendShiftedCode, VK.VK_1, 0);         
             </code>
             </example>
             <param name="function">The injected function code.
             </param>
             <param name="data">Data required by given function, if applicable</param>
             <param name="flags"> Operation flags.</param>            
             <exception cref="T:System.ApplicationException">Thrown when device doesn't support 
             this method</exception>
              <exception cref="T:System.ApplicationException">
              Thrown when driver fails to inject keyboard command.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.TranslateToTriggerID(PsionTeklogix.Keyboard.Key)">
            <summary>        
             Translates a key value (enum Keyboard.Key) to a Trigger.TriggerSourceID, 
            to be passed as a parameter to Trigger.TriggerControl.AddMapping() method.
            </summary>
            <param name="key"> a value from Keyboard.Key indicating the key to translate.</param>
            <returns>The trigger ID code.</returns>          
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.ShowIndicator">
            <summary>
            Show keyboard indicator on bottom of screen
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.HideIndicator">
            <summary>
            Hide keyboard indicator on bottom of screen
            </summary>
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.ModifierKeyEvent">
            <summary>
            Modifier key event. Occurs when user press one modifier key(Alt, Blue,
             Control, Orange or Shift).
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when specified ModifierKeyHandler 
            is invalid.</exception>        
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.LetterKeyCompletedEvent">
            <summary>
            Some Psion Teklogix mobile computers have an Alpha mode, which allows 
            letters to be typed using the numeric keys. For example, the letter B may be 
            typed by locking down the Alpha key, then pressing the 2 key twice. While 
            typing in letters in this manner, the task bar shows potential letters with 
            each keypress. For example, pressing the 2 key the first time results in A 
            showing in the task bar. Pressing it a second time results in B showing in 
            the task bar. Pressing another key, or waiting for the timeout, clears this 
            letter display and the last potential letter that was displayed is passed to 
            the active application. The task bar feedback is important to the user since 
            it indicates which letter is being typed. If your application hides the task 
            bar, this important feedback is no longer visible. Your application may use 
            this API in order to provide an equivalent feedback mechanism to the user.
            This API provides a way for users to know the potential letter with each 
            keypress.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.LetterKeyProposedEvent">
            <summary>
            Some Psion Teklogix mobile computers have an Alpha mode, which allows 
            letters to be typed using the numeric keys. For example, the letter B may be 
            typed by locking down the Alpha key, then pressing the 2 key twice. While 
            typing in letters in this manner, the task bar shows potential letters with 
            each keypress. For example, pressing the 2 key the first time results in A 
            showing in the task bar. Pressing it a second time results in B showing in 
            the task bar. Pressing another key, or waiting for the timeout, clears this 
            letter display and the last potential letter that was displayed is passed to 
            the active application. The task bar feedback is important to the user since 
            it indicates which letter is being typed. If your application hides the task 
            bar, this important feedback is no longer visible. Your application may use 
            this API in order to provide an equivalent feedback mechanism to the user.
            This API provides a way for users to know when letter key is no longer the 
            next potential key
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD">
            <summary>
            Keyboard constants used by <see cref="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardStatus"/>.
            </summary>
            <remarks>
             This enum wraps the return values of GetKeyboardStatus() function in the Windows
             CE APIs. For more information, please see the MSDN documentation on these values
            at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetkeyboardstatus.asp"/>.
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_PRESENT">
            <summary>
            Indicates whether or not the system has keyboard hardware.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ENABLED">
            <summary>
            Indicates whether or not the keyboard hardware is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ENTER_ESC">
            <summary>
            Indicates whether or not the keyboard hardware has ENTER and ESC keys.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ALPHA_NUM">
            <summary>
            Indicates whether or not the keyboard hardware has alphanumeric keys.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard.MSGSRC">
            <summary>
            Source of the Keyboard Message
            </summary>
            <remarks>This enum wraps the GetMessageSource() result values from the Windows CE
            APIs. For more information, please see the MSDN documentation for this function
            at <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetmessagesource.asp"/>.</remarks>       
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_UNKNOWN">
            <summary>
            Indicates that the message source is unknown.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_SOFTWARE_POST">
            <summary>
            Indicates that the message source was software.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_HARDWARE_KEYBOARD">
            <summary>
            Indicates that the message source was the keyboard.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyboardMessageWindow">
            <summary>
            Window message handler for monitoring Keyboard changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyboardMessageWindow.#ctor">
            <summary>
            Creates an instance of a KeyboardMessageWindow class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyboardMessageWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with screen changes.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Touchscreen">
            <summary>
             The Touchscreen class is used to provide programmatic access to the touch screen
             on devices.
            </summary>
            <exception> see exec/wince/sdk/ptxsdkerrors.cpp for an up-to-date list of
            exceptions being throw by this method</exception>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.Touchscreen.Enabled">
            <summary>Enable/Disable touch screen, Get whether or not the device 
            has a touch screen installed and enabled</summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.Touchscreen.Installed">
            <summary>Get whether or not the device has a touch screen installed</summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper">
            <summary>
            Utility class for use with GPS.
            </summary>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.PowerOn">
            <summary>
            Power on the gps unit.  This function only works for builtin GPS devices.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.PowerOff">
            <summary>
            Power off the gps unit.  This function only works for builtin GPS devices.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.SetSuspendMode(PsionTeklogix.GPS.Helper.SuspendModes)">
            <summary>
            Control the power setting of the GPS unit while the device is suspended.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.GetSuspendMode">
            <summary>
            Determine the power setting of the GPS unit while the device is suspended.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.SetProfile(PsionTeklogix.GPS.Helper.Profiles)">
            <summary>
            Set the GPS profile.
            </summary>
            <remarks>
            Returning to Default profile from Automotive or Pedestrian requires 
            a warm reset before it will take effect.
            </remarks>
            <param name="newProfile">One of the enumerated Profiles values</param>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.GetProfile">
            <summary>
            Get the GPS profile.
            </summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper.Profiles">
            <summary>
            Possible GPS profile options. See SetProfile()
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Default">
            <summary>
            Default profile on power up (not used in practice)
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Automotive">
            <summary>
            Automotive profile used during high speed navigation
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Pedestrian">
            <summary>
            Pedestrian profile used during low speed navigation
            </summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper.SuspendModes">
            <summary>
            Possible GPS suspend options. See SetSuspendMode()
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.OffInSuspend">
            <summary>
            Turn GPS off when device is suspended
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.OnInSuspend">
            <summary>
            Leave GPS on when device is suspended
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.LowPowerInSuspend">
            <summary>
            Put GPS into low power mode when device is suspended
            </summary>
            <remark> Not supported on all devices </remark>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriverWindow">
            <summary>
            Window message handler for monitoring Scanner Services messages.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriverWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with Scanner Services.
            </summary>
            <param name="msg">Windows message</param>
        </member>
        <member name="T:PsionTeklogix.Sound.SoundOptions">
            <summary>
            Options for how sounds are played.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.Asynchronous">
            <summary>Don't wait for the sound to start or end.</summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.Synchronous">
            <summary>Wait for the sound to end.</summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.AsynchronousLoop">
            <summary>Don't wait for the sound to start or 
            end. You need to use StopWave() to end. NOTE:
            The sound plays repeatedly.</summary>
        </member>
        <member name="T:PsionTeklogix.Sound.Sound">
             <summary>
             Functions for working with sounds.
             </summary>
             <example>
             The following console example shows how to use the sound functions in C# code.
             <code lang="C#">
            using System;
            using PsionTeklogix.Sound;
            
            namespace MyAppplication
            {
                class SoundExample
                {
                     
                      //! The main entry point for the application.
                     
                     [STAThread]
                     static void Main(string[] args)
                     {
                         for(;;)
                         {
                             Usage();
                             if (Parse())
                                 return;
                         }
                     }
            
                     static private void Usage()
                     {
                         Console.WriteLine("Press '1' to Play Wave File");
                         Console.WriteLine("Press '2' to Play Wave Resource");
                         Console.WriteLine("Press '3' to Play System Sound (Exclamation)");
                         Console.WriteLine("'Quit' to quit.");
                     }
            
                     static private bool Parse()
                     {
                         int c = Console.Read(); 
                         switch (c.ToString().ToUpper())
                         {
                             case "1":
                                 Sound.Volume = 75;
                                 Sound.PlayWaveFile("Laugh.wav");
                                 break;
            
                             case "2":
                                 Sound.Volume = 80;
                                 Sound.PlayWaveResource("MyApplication.SoundExample.Cry.wav", 
                                                         SoundOptions.Synchronous);
                                 break;
            
                             case "3":
                                 Sound.Volume = 100;
                                 Sound.PlayWaveSystem("Exclamation");
                                 break;
            
                             case "Quit":
                                 return true;
                         }
            
                         return false;
                     }
                  }
            }
             </code>
             Same code in VB coding style.
             <code lang="VB">
            Imports PsionTeklogix.Sound
            
            Namespace MyApplication
                Module SoundExample
            
                    Sub Main()
                        While True
                            Usage()
                            If Parse() Then
                                Return
                            End If
                        End While
                    End Sub
            
                    Private Sub Usage()
                        Console.WriteLine("Press '1' to Play Wave File")
                        Console.WriteLine("Press '2' to Play Wave Resource")
                        Console.WriteLine("Press '3' to Play System Sound (Exclamation)")
                        Console.WriteLine("'N' to quit.")
                    End Sub
            
                    Private Function Parse() As Boolean
                        Dim c As Integer = Console.Read()
            
                        Select Case (c.ToString().ToUpper)
                            Case "1"
                                Sound.Volume = 75
                                Sound.PlayWaveFile("Laugh.wav")
            
                            Case "2"
                                Sound.Volume = 80
                                Sound.PlayWaveResource("MyApplication.SoundExample.Cry.wav", _
                                      SoundOptions.Synchronous)
            
                            Case "3"
                                Sound.Volume = 100
                                Sound.PlayWaveSystem("Network Begin")
            
                            Case "N"
                                Return True
            
                        End Select
            
                        Return False
                    End Function
                End Module
            End Namespace
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayRepeatingWave(System.String,System.Int32)">
            <summary>
            Play a wave file asynchronously through the speaker, delay, then repeat. 
            This will continue until the <see>StopRepeatingWave</see> method is called.
            An exception will be thrown if the call can not be successfully completed.
            </summary>
            <param name="waveFilename">The wave file to play.</param>
            <param name="repeatDelay">The delay between repeats in milliseconds.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.StopRepeatingWave">
            <summary>
            Stop playing a repeating wave file started with the 
            <see>PlayRepeatingWave</see> method.  An exception will be thrown if the call 
            can not be successfully completed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveFile(System.String)">
            <summary>
            Play a wave file asynchronously.
            </summary>
            <param name="fileName">The wave file name.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveFile(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
            Play a wave file with the selected option.
            </summary>
            <param name="fileName">The wave file file name.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveResource(System.String)">
            <summary>
             Plays a wave resource that was embedded into an assembly. The wave file will
            be played asynchronously. This method must be called from the assembly containing
            the resource to be played.
            </summary>
            <remarks>
            The wave file should have been included in the project and its Build Action
            set to Embedded Resource.
            The names of embedded resources can be retrieved using the 
            <c>Assembly.GetManifestResourceNames</c> method.
            </remarks>
            <param name="resourceName">The name of the resource in the assembly.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveResource(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
             Plays a wave resource that was embedded into an assembly. This method must be 
            called from the assembly containing the resource to be played.
            </summary>
            <remarks>
            The wave file should have been included in the project and its Build Action
            set to Embedded Resource.
            The names of embedded resources can be retrieved using the 
            <c>Assembly.GetManifestResourceNames</c> method.
            </remarks>
            <param name="resourceName">The name of the resource in the assembly.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveSystem(System.String)">
            <summary>
            Play a system sound by its name asynchronously.
            </summary>
            <param name="soundName">The system soundName.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveSystem(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
            Play a system sound by it's name.
            </summary>
            <param name="soundName">The system soundName.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.StopWave">
            <summary>
            Stop playing a wave sound.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Sound.Sound.Volume">
            <summary>
            Gets or sets the current volume. The volume is in the range 0 to 100
            where 0 is off and 100 is full volume.
            percent.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempted to
            set Volume less then 0 or greater than 100.</exception>
        </member>
        <member name="T:PsionTeklogix.Serial.ReceivedEventArgs">
            <summary>
            Represents the arguments to a ReceivedEvent.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.ReceivedEventArgs.Data">
            <summary>
            Gets the last data received by the serial port.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.SettingScopes">
            @deprecated
            <summary>
            The scope of the configuration file.
            </summary>
            <remarks>
            Please note: the Configuration Namespace is deprecated.
            Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
            <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/> 
            </remarks>        
        </member>
        <member name="F:PsionTeklogix.Configuration.SettingScopes.Local">
            <summary>The configuration file is local to the application.
            The file will be in the form MyApplication.exe.config or
            MyApplication.exe.prefs</summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.SettingScopes.Global">
            <summary>The configuration file is global to all applications.
            The file will be in the form \Windows\ptsettings.config or
            \Windows\psionteklogixsettings.prefs</summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.SettingTypes">
            @deprecated
            <summary>
            The type of setting file.
            </summary>
            <remarks>
            Please note: the Configuration Namespace is deprecated.
            Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
            <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/> 
            </remarks> 
        </member>
        <member name="F:PsionTeklogix.Configuration.SettingTypes.Configuration">
            <summary>A configuration file is static and cannot be changed. If
            the file does not exist then an error will be thrown.</summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.SettingTypes.Preferences">
            <summary>A preferences file is dynamic and can be changed. If the
            file does not exist then it will be created.</summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.Settings">
             @deprecated
             <summary>
             The Settings class allows the developer to work with an applications 
             configuration and preference files. 
             </summary>
             <remarks>
             <p>Please note: the Configuration Namespace is deprecated.
             Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
             <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/> 
             </p>    
             Both these file are XML formatted data and implement a sub set of the 
             standard .config file found on a windows workstation or server.
             The configuration file differs from the preference file in that a 
             configuration file in read only and a preference file is read write.
             A configuration file is used for centrally distributed application 
             configuration information and preferences are for dynamic local 
             configuration information.
             <para/> 
             Local settings files will be located in same directory as the 
             application executable and will have a filename MyApplication.exe.config 
             and MyApplication.exe.pref for the configuration and preferences respectively.
             <para/> 
             Global settings files will be located in the \Windows directory 
             and will have the file names \Windows\ptsettings.config and 
             \Windows\ptsettings.pref for the configuration and preferences respectivly.
             <para/>
             If a preference file does not exist then it will be created. If a 
             configuration file does not exist then error will be thrown.
             </remarks>
             <example>
             The following is an example of a .config file:
             <code lang="">
             &lt;configuration&gt;
                 &lt;BuiltInScanner
                     Driver="PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver"
                     Device="SCA1:"
                     DecodeBeep="Low"
                     UPCA="True"
                     UPCE="True"
                 /&gt;
                 &lt;GPSPort
                     Device="COM1:"
                     Baud="19200"
                     Parity="Even"
                     StopBits="OneBit"
                 /&gt;
             &lt;/configuration&gt;
             </code>
             The following is an example of a typical .pref file:
             <code lang="Preferences">
             &lt;preferences&gt;
                 &lt;Login
                     Default="bob"
                     LastLogin="#2002/10/20 10:45:11#"
                 /&gt;
                 &lt;Warehouse Default value="1000" /&gt;
                 &lt;Mail PollTimeout="10"/&gt;
             &lt;/preferences&gt;
             </code>
             The following example shows how to use the settings class. The usage is
             exactly the same for configuration files and preference files other than
             the setting a property in a configuration file will throw an exception.
             <code lang="C#">
            using System;
            
            using PsionTeklogix.Serial;
            using PsionTeklogix.Configuration;
            
            namespace Test
            {
                public class SerialPortSettings
                {
                    [SettingsProperty()]
                    public string Device;
            
                    [SettingsProperty()]
                    public BaudRates BaudRate;
            
                    [SettingsProperty()]
                    public Parities Parity;
            
                    [SettingsProperty()]
                    public StopBits StopBit;
            
                    // This field will not be persisted
                    // as it does not have the SettingsProperty
                    // attribute applied.
            
                    public string Name;
                }   
            
                public class Test
                {
                    private SerialPortSettings _settings = new SerialPortSettings();
            
                    public void SavePortSettings()
                    {
                        Settings.SaveSettings(_settings, "SerialPort", SettingScopes.Local);
                    }
            
                    public void LoadPortSettings()
                    {
                        Settings.LoadSettings(_settings, "SerialPort", SettingTypes.Preferences, SettingScopes.Local);
                    }
            
                    public void SetPortStatus(bool value)
                    {
                        Section section;
            
                        // The port status is global to all applications
                        section = Settings.GetSection("SerialPort", SettingTypes.Preferences, SettingScopes.Global);
                        section.SetProperty("PortStatus", value);
                    }
            
                    public bool GetPortStatus()
                    {
                        Section section;
            
                        section = GetSection("SerialPort", SettingTypes.Preferences, SettingScopes.Global);
                        return section.GetBoolean("PortStatus", False);
                    }
                }
             </code>
             <code lang="VB">
            Imports PsionTeklogix.Configuration
            Imports PsionTeklogix.Configuration.Settings
            Imports PsionTeklogix.Serial
            
            ' This class is a container for all
            ' the serial port settings.
            Public Class SerialPortSettings
            
                &lt;SettingsProperty()&gt; _
                Public Device As String
            
                &lt;SettingsProperty()&gt; _
                Public BaudRate As BaudRates
            
                &lt;SettingsProperty()&gt; _
                Public Partity As Parities
            
                &lt;SettingsProperty()&gt; _
                Public StopBit As StopBits
            
                ' This field will not be persisted
                ' as it does not have the SettingsProperty
                ' attribute applied.
            
                Public Name As String
            
            End Class
            
            Public Class Test
                Private _settings = New SerialPortSettings
            
                Public Sub SavePortSettings()
                    ' Save the settings local (Always in preferences)
                    SaveSettings(_settings, "SerialPort", SettingScopes.Local)
                End Sub
            
                Public Sub LoadPortSettings()
                    ' Load the settings from the local preferences file.
                    LoadSettings(_settings, "SerialPort", SettingTypes.Preferences, SettingScopes.Local)
                End Sub
            
                Public Sub SetPortStatus(ByVal value As Boolean)
                    Dim section As Section
            
                    ' The port status is global to all applications
                    section = GetSection("SerialPort", SettingTypes.Preferences, SettingScopes.Global)
                    section.SetProperty("PortStatus", value)
                End Sub
            
                Public Function GetPortStatus() As Boolean
                    Dim section As Section
            
                    section = GetSection("SerialPort", SettingTypes.Preferences, SettingScopes.Global)
                    Return section.GetBoolean("PortStatus", False)
                End Function
            
            End Class
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.GetSection(System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Get the specified section.
            </summary>
            <param name="storageName">The name of the settings storage (e.g. PsionTeklogix.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section.</param>
            <param name="type">Setting type. Configuration or Preferences.</param>
            <param name="scope">Scope of the setting. Local or Global.</param>
            <returns>The named section.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.GetSection(System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Get the specified section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="type">Setting type. Configuration or Preferences.</param>
            <param name="scope">Scope of the setting. Local or Global.</param>
            <returns>The named section.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadSettings(System.Object,System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Load settings object
            </summary>
            <remarks>
            There are no checks for write only properties. If you attempt to
            load into a write only property there will be an exception.
            </remarks>
            <param name="settings">The object to be loaded.</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist from.</param>
            <param name="scope">Look in the global file or the local file.</param>
            <param name="type">Is this a configuration or preference.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadSettings(System.Object,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Load an settings object
            </summary>
            <remarks>
            There are no checks for write only properties. If you attempt to
            load into a write only property there will be an exception.
            </remarks>
            <param name="settings">The object to be loaded.</param>
            <param name="sectionName">The name of the section to persist from.</param>
            <param name="scope">Look in the global file or the local file.</param>
            <param name="type">Is this a configuration or preference.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadAllSettings(System.Object,System.String,System.String)">
            <summary>
            Load an settings object from the global and local configuration
            and preferences files.
            </summary>
            <remarks>
            There are no checks for write only properties. If you attempt to
            load into a write only property there will be an exception. The
            local file has precedence over the global file and preferences 
            have precedence over configuration. This allows the configuration
            files to have an initial value and be overrided by preferences.
            </remarks>
            <param name="settings">The object to be loaded.</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist from.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadAllSettings(System.Object,System.String)">
            <summary>
            Load an settings object from the global and local configuration
            and preferences files.
            </summary>
            <remarks>
            There are no checks for write only properties. If you attempt to
            load into a write only property there will be an exception. The
            local file has precedence over the global file and preferences 
            have precedence over configuration. This allows the configuration
            files to have an initial value and be overrided by preferences.
            </remarks>
            <param name="settings">The object to be loaded.</param>
            <param name="sectionName">The name of the section to persist from.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.SaveSettings(System.Object,System.String,System.String,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Save a settings object whose properties have been instrumented 
            with the SettingsPropertyAttribute to the preferences file.
            </summary>
            <remarks>
            There are no checks for readonly property. If you attempt to 
            load into a property there will be an exception.
            </remarks>
            <param name="settings">The object to be saved.</param>
            <param name="storageName">The name of the settings storage (e.g. PsionTeklogix.TestApp.dll).</param>
            <param name="sectionName">The name of the section to persist into.</param>
            <param name="scope">Look in the global file or the local file.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.SaveSettings(System.Object,System.String,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Save a settings object whose properties have been instrumented 
            with the SettingsPropertyAttribute to the preferences file.
            </summary>
            <remarks>
            There are no checks for readonly property. If you attempt to 
            load into a property there will be an exception.
            </remarks>
            <param name="settings">The object to be saved.</param>
            <param name="sectionName">The name of the section to persist into.</param>
            <param name="scope">Look in the global file or the local file.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadFieldsSettings(System.Object,System.Reflection.FieldInfo[],System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Load an array of fields.
            </summary>
            <param name="settings">The object to be saved.</param>
            <param name="fields">Array of fields.</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist from.</param>
            <param name="scope">Look in the global file or the local file.</param>
            <param name="type">Is this a configuration or preference.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadPropertiesSettings(System.Object,System.Reflection.PropertyInfo[],System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Load an array of properties.
            </summary>
            <param name="settings">The object to be saved.</param>
            <param name="properties">Array of properties</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist from.</param>
            <param name="scope">Look in the global file or the local file.</param>
            <param name="type">Is this a configuration or preference.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.SaveFieldsSettings(System.Object,System.Reflection.FieldInfo[],System.String,System.String,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Save an array of fields.
            </summary>
            <param name="settings">The object to be saved.</param>
            <param name="fields">Array of fields.</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist into.</param>
            <param name="scope">Look in the global file or the local file.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.SavePropertiesSettings(System.Object,System.Reflection.PropertyInfo[],System.String,System.String,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            SavePropertiesSettings
            </summary>
            <param name="settings">The object to be saved.</param>
            <param name="properties">Array of properties</param>
            <param name="storageName">The name of the settings storage (e.g. PTISG.ApplicationConsole.dll).</param>
            <param name="sectionName">The name of the section to persist into.</param>
            <param name="scope">Look in the global file or the local file.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Settings.LoadSection(System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>                                                 
            Load or create an empty XML document.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="sectionName">The name of the section to persist into.</param>
            <param name="scope">Look in the global file or the local file.</param>
            <param name="type">Is this a configuration or preference.</param>
            <returns>An XML document.</returns>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanDoubleClickEventArgs">
            <summary>
             Used to report double-click data. The data contained in the event will be whatever
            is configured in the Teklogix Scanners control panel.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanDoubleClickEventArgs.ToString">
            <summary>
            Converts the event to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanDoubleClickEventArgs.DoubleClickData">
            <summary>
            Returns the double-click data configured in the Teklogix Scanners control panel.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Resources.ResourceFileReader">
            <summary>
            Provides the base functionality to read data from resource files.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.#ctor(System.String)">
            <summary>
            Creates an instance of the ResourceFileReader class.
            </summary>
            <param name="fileName">
            The name of the resource file.
            </param>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.GetEnumerator">
            <summary>
            Enumerates the resource manager dictionary.
            </summary>
            <returns>
            Returns a reference to an IEnumerator interface, 
            whose purpose is to grant access to an enumeration's items. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.Close">
            <summary>
            This method releases any resources held during reading. 
            If Close has already been called, no action is performed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the resource manager dictionary.
            Interface members implicitly have public declared 
            accessibility. No access modifiers are allowed on interface 
            member declarations. 
            </summary>
            <returns>
            An Interface to enumerator.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.Dispose">
            <summary>
            Releases the resources used by the ResourceFileReader.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.DockingMessageEventHandler">
            <summary>
            Docking Delegate. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.TetherMessageEventHandler">
            <summary>
            Tether Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.AdapterMessageEventHandler">
            <summary>
            Adapter Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.InterfaceMessageEventHandler">
            <summary>
            Interface Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.Peripherals">
            <summary>
            The Peripherals class is used to manipulate peripherals, and 
            device interfaces on a Windows CE-based device. 
            Any peripheral that can be detected (and identified as a specific device) will be 
            detectable through the Peripherals API.
            A device interface is a mechanism used by drivers to allow other 
            software components to access to driver. When a device driver 
            loads, it may choose to publish an interface. The interface may 
            then be used to send commands to the driver.
            </summary>
            <remarks>
            This class can be used in a polled fashion with the static members
            or in an event driven fashion by instantiating and binding the event handlers.
            The Peripherals class allows developers to perform the following operations: 
            <list type="number">
            <item>Detect the presence of adapters and device interfaces. 
            Using <see cref="M:PsionTeklogix.Peripherals.Peripherals.EnumerateDeviceInterfaces"/>, it is possible to get a list of 
            all device interfaces. Device interfaces will usually have a name like "XYZ1:", 
            related to the device driver publishing them. It is also possible to detect if 
            a specific device interface or peripheral is present.</item> 
            <item>Detect the presence of docking and tether port devices. 
            Docking stations are separate hardware components such as battery chargers, 
            portable docking modules, etc., and can possess extra serial, USB, or other 
            communications ports. Tether port devices are usually peripheral devices such as 
            serial scanners, RFID readers, etc.</item>
            <item>Register for real-time notifications. By instantiating Peripherals class, 
            developer gains access to <see cref="E:PsionTeklogix.Peripherals.Peripherals.dockingEvent"/> and <see cref="E:PsionTeklogix.Peripherals.Peripherals.tetherEvent"/>. 
            By implementing event handlers developers will gaing access to information:
            <para>Tether Port Device Insertion (with the information about the type of tether port device)</para>
            <para>Tether Port Device Removal (with the information about the type of tether port device)</para>
            <para>Docking Station Insertion (with the information about the type of the docking station)</para>
            <para>Docking Station Removal (with the information about the type of the docking station)</para>
            </item></list></remarks>
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_Unknown">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_Off">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_On">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.adapterValue">
            <summary>
            The type of the adpater that is connected/disconnected.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.interfaceEventValue">
            <summary>
            The type of the device that is connected/disconnected.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OndockingEvent(PsionTeklogix.Peripherals.PeripheralsEventArgs)">
            <summary>
            OndockingEvent
            </summary>
            <param name="eDocking">type of the docking station</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OntetherEvent(PsionTeklogix.Peripherals.PeripheralsEventArgs)">
            <summary>
            OntetherEvent.
            </summary>
            <param name="eTether"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OnadapterEvent(PsionTeklogix.Peripherals.AdapterEvent)">
            <summary>
            OnadapterEvent.
            </summary>
            <param name="eAdapter"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OninterfaceEvent(PsionTeklogix.Peripherals.InterfaceEvent)">
            <summary>
            OninterfaceEvent.
            </summary>
            <param name="eInterface"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsDeviceInterfacePresent(System.String)">
            <summary>
            Used to determine if a particular 
            device interface is present on the current device.
            </summary>
            <param name="devIntfName">
            The name of the device interface to be tested for.
            </param>
            <returns>
            true if the device interface is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsAdapterPresent(System.String)">
            <summary>
            Determines if a particular network adapter is present this Psion Teklogix 
            device.
            </summary>
            <param name="adapterName">
            The name of the wired or wireless adapter being tested for.
            </param>
            <returns>
            true if the adapter is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsInDockingStation">
            <summary>
            Determines whether or not the current Psion Teklogix device is in its docking 
            station or not.
            </summary>
            <returns>
            true if the docking station is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsTetherPortConnected">
            <summary>
            Determines whether or not there is a device attached to the tether port on the 
            current device.
            </summary>
            <remarks>
            Not all Psion Teklogix devices have a tether port. On devices without a tether 
            port, this method will return false.
            </remarks>>
            <returns>
            true, if a device is connected to the tether port, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.EnumerateDeviceInterfaces">
            <summary>
            Retrieves a list of all device interfaces present on the current Psion Teklogix device.
            </summary>
            <returns>
            An ArrayList of containing the device interfaces currently published by drivers
            on the current Psion Teklogix device.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.EnumerateAdapters">
            <summary>
            Retrieves a list of all attached peripherals and adapters presesent
            on the current Psion Teklogix device. 
            </summary>
            <returns>
            An array of devices currently connected.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetDockingStationType">
            <summary>
            Determines the type of docking station attached to the current device.
            </summary>
            <returns>
            The type of docking station attached to the current device. 
            The following docking station types may be reported: 
            <list type="bullet"><item>DockingPort PDM</item>
            <item>Docking Port Boost Dongle</item>
            <item>Docking Port Cradle</item>
            <item>Docking Port Quad Charger</item>
            <item>Docking Port Single Charger</item>
            <item>Docking Port Device Unknown</item>
            <item>Docking Port No Device</item></list>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetTetherPortDeviceType">
            <summary>
            Determines what type of device is attached to the tether port on the current 
            Psion Teklogix device.
            </summary>
            <returns>
            A string containing the type of device connected to the tether port. 
            The following tether port types can be returned: 
            <list type="bullet"><item>Generic Serial Device</item>
            <item>Non Decoded Scanner</item>
            <item>Scanner</item>
            <item>Serial RFID</item>
            <item>Serial Scanner</item>
            <item>USB Device</item>
            <item>Device Unknown</item>
            <item>No Device Attached to the Tether Port</item></list>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Dispose">
            <summary>
            Releases all resources used by the current instance of Peripherals.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of Peripherals.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.SetPowerState(System.String,System.Int32)">
             <summary> 
             <p>Sets the power state on the specified hardware port/slot/socket.</p>
             </summary>
             <remarks>
             <p> Once a slot etc. has been powered off it will remain powered off even if the
             Psion Teklogix device is cold-booted. A clean start of the Windows CE operating
             system will be required to power the slot back on (or a call to setPowerState). 
             On a Pocket PC device, a cold-boot will cause the slot to be repowered. Removal 
             and re-insertion of the card (or any card) will have no effect and will not be 
             detected. </p>
            
             <p> Powering off an empty slot/socket will only disable the detection of card 
             insertions, as the slot/socket is not powered when empty. Powering on an empty slot  
             has no effect, other than re-enabling detection of card insertion/removal.</p>
            
             <p> Powering off the USB port may have no effect if the connected device has an 
             external power source, as the port itself is not disabled, only the power supplied
             to the port is shut off.</p>
            
             <p> Powering off a PCMCIA/SD-MMC/CF slot will have the same effect as a card removal,
             and will generate a card removal event. Powering on the PCMCIA/SD-MMC/CF slot will 
             have the same effect as a card insertion, assuming there is a card present. A card 
             insertion event will also be generated if a card is present.</p>
            
             <p> It is not always possible to power off a slot/socket/port. For example, the 
             SD-MMC slot on some 7535 terminals cannot be powered off. In such cases, the driver 
             for the card in the slot/socket will be unloaded, and further activity on the slot or
             socket will be ignored. However, there is no guarantee the device in the slot or
             socket will actually be disabled, and if a radio is in the slot it may still be 
             able to transmit.</p>
            
             <p> A WORKABOUT PRO may or may not have a second PCMCIA slot. If it does not,
             attempting to enable/disable the slot will fail.</p>
              
             <p> Not all Psion Teklogix devices have the peripherals listed below, and the power
             state may not be controllable on every device.</p>
             
             <p> Valid hardware names that may be used in the 'Hardware' parameter are:
              * PCMCIA Slot0
              * PCMCIA Slot1
              * SD-MMC
             </p>
            
             <p> Valid power states are:
              * PowerState_Off - power off the slot/socket/etc.
              * PowerState_On - power on the slot/socket/etc.
             </p>
             </remarks>
            
             <param name="Hardware">The port/slot/device whose power state is being changed.
             </param>
             <param name="PowerState">The power state to set the slot/socket/etc. to.</param>
            
             <returns>True if the socket/slot/port was powered off. False if the 
               socket/slot/port could not be powered off.
             </returns>
             
             <exception cref="T:System.ArgumentException">ArgumentException - Is throw when the 
               supplied hardware component name is invalid, or found on this Psion
               Teklogix device.
             </exception>
             <exception cref="T:System.ArgumentNullException">ArgumentException - Is throw when the 
               supplied hardware component name is null.
             </exception>
             <exception cref="T:System.ApplicationException">ApplicationException - Is thrown if the 
             device is not ready, for example when repeatedly calling SetPowerState too
             quickly.
             </exception>        
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetPowerState(System.String)">
             <summary>
             <p>Detects whether a given port/slot/socket is powered on or not.</p>
             </summary>
             <remarks>
             <p>Empty slots are not powered; they are in the POWERSTATE_OFF state.</p>
            
             <p>The power state of some hardware components cannot be detected.</p>
            
             <p>Not all Psion Teklogix devices have the peripherals listed below.</p>
            
             <p> Valid hardware names that may be used in the 'Hardware' parameter are:
              * PCMCIA Slot0
              * PCMCIA Slot1
              * SD-MMC
             </p>
            
             <p> Valid power states are:        
              * PowerState_Off - power off the slot/socket/etc.
              * PowerState_On - power on the slot/socket/etc.
             </p>
             </remarks>
            
             <param name="Hardware">The port/slot/device to examine.</param>
            
             <returns>The power state of the port/slot/device. Valid return codes are:
              * PowerState_Off - the slot etc. is powered off or the slot is empty
              * PowerState_On - the slot etc. is powered on 
              * PowerState_Unknown - the powered state cannot be determined
             </returns>
             
             <exception cref="T:System.ArgumentException">ArgumentException - Is throw when the 
               supplied hardware component name is invalid, or found on this Psion
               Teklogix device.
             </exception>
             <exception cref="T:System.ArgumentNullException">ArgumentException - Is throw when the 
               supplied hardware component name is null.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetAdapterStatistics(System.String)">
            <summary>
            Retrieves the statistics for the specified adapter. 
            </summary>
            <remarks>
            <p> The following statistics are available for network adapters:
            * "Media State" - (connected/disconnected) 
            * "RSSI" - Received Signal Strength Indicator (wireless adapters only) 
            * "Channel" - current channel (wireless adapters only, and only available on some radio cards) 
            * "SSID" - the network name (wireless adapters only) 
            * "Access Point MAC address" - the MAC of the associated AP (wireless adapters only) 
            * "Local MAC address" - MAC address of the radio / ethernet card 
            * "Link Speed" - Current link speed being used by the radio / ethernet card 
            * "Frame Size" - Current frame size in bytes 
            * "Packet Size" - Current packet size in bytes 
            * "Received Packets" - number of packets received by this adapter 
            * "Transmitted Packets" - number of packets sent by this adapter 
            * "Received Packet Errors" - number of bad packets received by this adapter 
            * "Transmitted Packet Errors" - number of bad packets sent by this adapter 
            </p>
            </remarks>
            <param name="DeviceName"> The name of the adapter whose statistics are to be 
            retrieved. Must not be null.</param>
            <exception cref="T:System.ArgumentException">ArgumentException - Thrown when the  
            device name is invalid. </exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - Thrown when 
            the device name is null. </exception>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsWirelessAdapter(System.String)">
             <summary>
             Detects whether or not the specified adapter is a wireless 
             adapter (i.e. a radio card such as an 802.11b radio card).
             </summary>
             <param name="DeviceName">Adapter Name</param>
             <returns>true - if the specified adapter is a 
             wireless device, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when supplied parameter is
            null.</exception>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.dockingEvent">
            <summary>
            Occurs when the device is inserted into or removed from the docking station.
            </summary>
            <remarks>
            <p>Docking events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.tetherEvent">
            <summary>
            Occurs when the device is connected or removed to or removed from the tether port.
            </summary>
            <remarks>
            Tether events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.adapterEvent">
            <summary>
            Occurs when the adapter is connected or removed to or removed from the slot.
            </summary>
            <remarks>
            Adapter events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.interfaceEvent">
            <summary>
            Occurs when the device is connected or removed from the slot/port.
            </summary>
            <remarks>
            Interface events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Peripherals.Peripherals.EnumerateTetheredPeripherals">
            <summary>
            Gets device connected to the tether port.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.Bluetooth">
            <summary>
            Class provides access to some Bluetooth features.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.PairSerialProfileDevice(System.String,System.String,System.String)">
            <summary>
            Pairs a Serial Port Profile Bluetooth device with this terminal.
            Use UnpairSerialProfileDevice() to remove the pairing.<br />
            Use PairSerialProfileScanner() to pair SPP Scanners.<br />
            Please note: the pairing will fail if a pairing already exists, unpair it first. <br />
            Developers note: Please make sure your application remembers the macAddress of the paired
            devices.  The macAddress of the paired device is required to remove the pairing. <br />
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with 
            (expecting a string of exactly 12 hex digits, ex: "0016E3F019BB" ).</param>
            <param name="pin">The security pin required by the Bluetooth device. Example "0000"</param>
            <param name="portName">The port to be created and used for emulated 
            serial connection. Example: "COM9:"  Please note the required ':'.</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.PairSerialProfileScanner(System.String,System.String,System.String)">
            <summary>
            Pairs a Serial Port Profile Bluetooth scanner with this terminal.  
            Use UnpairSerialProfileDevice() to remove the pairing.<br />
            Please note: This method provides the same functionality as 
            PairSerialProfileDevice() but will automatically notify Scanner 
            Services about the newly paired scanner. <br />
            Please note: The pairing will fail if a pairing already exists, unpair it first. <br />
            Developers note: Please make sure your application remembers the macAddress of 
            the paired devices.  The macAddress of the paired device is required to remove 
            the pairing. <br />
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with 
            (expecting a string of exactly 12 hex digits, Example: "0016E3F019BB" ).</param>
            <param name="pin">The security pin required by the Bluetooth device. Example "0000"</param>
            <param name="portName">The port to be created and used for emulated 
            serial connection. Example: "COM9:"  Please note the required ':'.</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.UnpairSerialProfileDevice(System.String)">
            <summary>
            Unpairs a Serial Port Profile Bluetooth device that was paired with either
            PairSerialProfileDevice() or PairSerialProfileScanner().<br />
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with.</param>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper">
            <summary>
            Utility class for use with GPS.
            </summary>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDownloadPeriod(PsionTeklogix.AGPS.Helper.DownloadPeriod)">
            <summary>
            Set the current AGPS data download period
            </summary>
            <param name="hours"></param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDownloaderConfig(PsionTeklogix.AGPS.Helper.DownloaderConfiguration@)">
            <summary>
            Query the downloader service for it's configuration information.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDownloaderConfig(PsionTeklogix.AGPS.Helper.DownloaderConfiguration)">
            <summary>
            Set the downloader service's configuration.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDriverConfig(PsionTeklogix.AGPS.Helper.DriverConfiguration@)">
            <summary>
            Query the downloader service for it's configuration information.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDriverConfig(PsionTeklogix.AGPS.Helper.DriverConfiguration)">
            <summary>
            Set the downloader service's configuration.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.RequestDownloadNow">
            <summary>
            Request a download of the emphermeral data.
            </summary>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDownloadStatus(PsionTeklogix.AGPS.Helper.DownloadStatus@)">
            <summary>
            Get the download status information
            A null entry indicates that a particular event has not yet 
            occurred.  For example if dlStatus.lastSuccessfulDownload == null
            then we have never had a successful download.
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloadPeriod">
            <summary>
            Typical download periods
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Manual">
            <summary>
            No automatic downloads
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_12">
            <summary>
            every 12 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_18">
            <summary>
            every 18 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_24">
            <summary>
            every 24 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_36">
            <summary>
            every 36 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_48">
            <summary>
            every 48 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_72">
            <summary>
            every 72 hours
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloaderConfiguration">
            <summary>
            Configuration settings of the AGPS downloader.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.ephemerisFilePath">
            <summary>
            path for ephemeris data 
            This path MUST match the path used by the driver (DriverConfiguration).
            If they are different the downloader will place the file in one location and the 
            driver will look for it in a different location.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.localFileName">
            <summary>
             Name of file to store data in
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.initialDelay">
            <summary>
            initial delay between loader starting and first download (in seconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.retryOnFailDelay">
            <summary>
            delay between a failed download and retry (in seconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.downloadPeriod">
            <summary>
            periodic download frequency See: SetDownloadPeriod()
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DriverConfiguration">
            <summary>
            Configuration settings of the AGPS driver.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DriverConfiguration.enabled">
            <summary>
            While set to false, downloaded ephemeris data will be ignored
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DriverConfiguration.ephemerisFilePath">
            <summary>
            This path MUST match the path used by the downloader (AgpsDownloaderConfiguration).
            If they are different the downloader will place the file in one location and the driver 
            will look for it in a different location
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloadStatus">
            <summary>
            Download status of the AGPS data.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.lastSuccessfulDownload">
            <summary>
            timestamp of last successful download of ephemeral data
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.lastUnsuccessfulDownload">
            <summary>
            timestamp of last unsuccessful attempt to download ephemeral data
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.nextScheduledDownload">
            <summary>
            timestamp of next scheduled attempt to download ephemeral data
            </summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.RegistryKey">
             @deprecated
             <summary>
             The RegistryKey class is used to manipulate the WindowsCE Registry. It includes 
             support for the following operations: 
             * create a new registry key: new registry keys may be created underneath existing 
               registry keys
             * open an existing registry key: an existing registry key can be opened, in order
               to read or write data to it
             * delete a registry key: existing registry keys and all the values underneath them
               can be removed from the registry
             * read registry values: existing registry values can be read from the registry
             * set registry values: registry name/value pairs can be added or changed
             * delete a registry value: existing registry values can be removed from the registry
             * key enumerations: the sub-keys and value names of a registry key can be listed
             * key counts: the number of values and sub-keys under a key can be counted
             
             The RegistryKey class supports the following registry value types: 
             * binary
             * integer
             * string
             * multi-string
            
             All registry settings are located under one of 4 root keys:
             * CLASSES_ROOT 
             * CURRENT_USER 
             * LOCAL_MACHINE 
             * USERS 
             </summary>
             <remarks>
             <p>Please note: the Configuration Namespace is deprecated.
             Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.
             <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/></p> 
             <p>Registry key strings use '\\' (a backslash) to delimit separate keys. Since 
             backslash is used to generate escape characters, it must be doubled when placed 
             within strings, and cannot be contained in a key name.</p>
            
             <p>Registry key names are not case sensitive.</p>
            
             <p>To get or set the default value for a particular registry key, specify a 
             either a null reference (Nothing in Visual Basic), or an empty string ("").</p>
            
             <p>See the MSDN documentation on the WindowsCE Registry and registry keys for more 
             information.</p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.HKEY_CURRENT_USER">
            <summary>
            Predefined key handle for the CLASSES_ROOT section of the Registry
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.HKEY_LOCAL_MACHINE">
            <summary>
            Predefined key handle for the CURRENT_USER section of the Registry
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.HKEY_CLASSES_ROOT">
            <summary>
            Predefined key handle for the HKEY_LOCAL_MACHINE section of the Registry
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.HKEY_USERS">
            <summary>
            Predefined key handle for the HKEY_USERS section of the Registry
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.CLASSES_ROOT">
            <summary>
            An instance of RegistryKey class that encapsulates the HKEY_CLASSES_ROOT
            pre-defined registry handle.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.CURRENT_USER">
            <summary>
            An instance of RegistryKey class that encapsulates the HKEY_CURRENT_USER
            pre-defined registry handle.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.LOCAL_MACHINE">
            <summary>
            An instance of RegistryKey class that encapsulates the HKEY_LOCAL_MACHINE
            pre-defined registry handle.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.USERS">
            <summary>
            An instance of RegistryKey class that encapsulates the HKEY_USERS
            pre-defined registry handle.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.#ctor">
            <summary>
            Constructor. Constructs a default RegistryKey object (not opened). The key 
            cannot be used until either the Open method or the Create method is called.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Close">
            <summary>
            The close method closes the registry key. All further operations on the 
            Registry will fail until either the Open or Create method is called.
            </summary>
            <remarks>
            <p>Calling the close method has no effect if the key is not open/valid.</p>
            <p>Opening a registry key creates a registry handle, which prevents the actual
            registry key from being deleted. The key must be closed before it can be 
            deleted.</p>
            <p>Applications should call the Close method when finished using RegistryKey 
            objects, in order to free up the resources associated with them.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Dispose">
            <summary>
            Closes the registry key, and releases any resources it holds.
            </summary>
            <remarks>
             A key in the WindowsCE registry cannot be deleted until all registry key
            objects opened to the location in the registry are closed.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Create(PsionTeklogix.Configuration.RegistryKey,System.String)">
            <summary>
            The Create method is used to create a new registry key. 
            If the key already exists, it will be opened. If it does
            not exist, it will be created first (if possible).
            </summary>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the KeyName 
            parameter or the KeyRoot parameter is null.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If creating or 
            opening the registry key fails.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Delete(PsionTeklogix.Configuration.RegistryKey,System.String)">
            <summary>
            The delete method is used to remove an existing registry key.
            </summary>
            <param name="KeyRoot"></param>
            <param name="KeyName">The name of the registry key to delete.
            The key will be deleted underneath the pre-defined key
            'KeyRoot'</param>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the KeyName 
            parameter or KeyRoot parameter is null.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If the registry key is
            not open.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If deleting the
            registry key fails.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.DeleteValue(System.String)">
            <summary>
            The DeleteValue method is used to remove an existing value from an open registry key.
            </summary>
            <param name="Name">The name of the registry value to delete.</param>
            <exception cref="T:System.ArgumentNullException"> ArgumentNullException - If the Name 
            parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            the registry key is not open/valid.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If deleting the
            registry value fails.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.EnumerateSubKeys">
            <summary>
            The EnumerateSubKeys method is used to retreive a list of all of the subkeys 
            of the open registry key. The subkeys are returned as a string array. If no 
            subkeys are present, an empty string[] array is returned.
            </summary>
            <returns>A string array containing the names of the registry keys under the
            current registry key object.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            the registry key is not open/valid.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If enumerating
            the subkeys of a registry key fails.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.EnumerateValues">
            <summary>
            The EnumerateValues method is used to retreive a list of all of the values 
            associated with the open registry key. If no values are present, an empty 
            Array is returned.
            </summary>
            <returns>An array containing the names of the registry values associated with
            the current registry key object. The value names are returned as strings.</returns>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            the registry key is not open/valid.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the values 
            under the open registry key cannot be enumerated.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.EnumerateValueNamesAndData">
             <summary> 
             This method is used to retrieve a list of all of the values and the data
             associated with each value from the open registry key.
             </summary>
             <remarks>
             <p>The values are returned as an array of RegistryValue objects. If no values 
             are present, an empty vector is returned.</p>
            
             <p>If the key has not been opened, an exception will be thrown.</p>
             </remarks>
             <example> The following code snippet shows an example of the how the 
             enumerateValues method is used:
             <pre>
            
              RegistryKey enumTest = new RegistryKey();
              try {
                  enumTest.Open(RegistryKey.LOCAL_MACHINE, "Ident");
            
                  RegistryKey.RegistryValue [] values = enumTest.EnumerateValueNamesAndData();
                  if( values != null ) {
                      foreach( RegistryKey.RegistryValue val in values ) {
                          Console.WriteLine("Name = " + val.name);
                          Console.WriteLine("Value = " + val.value);
                      }
                  }
              }
              catch {
                  // print error message here
              }
             </pre>
             </example>
            
             <returns>An array containing all the values under the open registry key.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If a list 
             of values cannot be retrieved.</exception> 
             <exception cref="T:System.InvalidOperationException">InvalidOperationException - 
             If the RegistryKey is invalid (not open).</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Exists(PsionTeklogix.Configuration.RegistryKey,System.String)">
             <summary>
             <p>The Exists method is used to detect if a key exists in the Registry. The key 
             name specified will be relative to the RegistryKey object supplied by the 
             application.</p>
            
             For example:
             <code>  
                 try {
                     // create a key
                     RegistryKey key = new RegistryKey();
                     key.Create(RegistryKey.LOCAL_MACHINE, "MyKey");
            
                     bool isPresent = RegistryKey.Exists(RegistryKey.LOCAL_MACHINE, "MyKey");
               
                     // Note: isPresent will be true
               
                     // without this, the delete call will fail
                     key.Close();
            
                     // deletes the key created above
                     RegistryKey.Delete(RegistryKey.LOCAL_MACHINE, "MyKey");   
            
                     bool isPresent = RegistryKey.Exists(RegistryKey.LOCAL_MACHINE, "MyKey");
            
                     // Note: isPresent will be false
                 }
                 catch( Exception e ) {
                     /// handle error here ...
                 }
             </code>
             <param name="KeyRoot"> The key to use when looking for a registry key. It can 
              be either an open registry key, or one of the predefined registry keys</param>
             <param name="KeyName"> The name of the registry key to find in the registry.
             </param>
             </summary>
             <returns>true if exists otherwise false.</returns>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the KeyName 
             parameter or the KeyRoot parameter is null.</exception>
             <exception cref="T:System.ArgumentException">ArgumentException - If the root key 
             specified is not open/valid.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.ExistsValue(System.String)">
             <summary>
             <p>The ExistsValue method is used to check to see if a registry value exists
             under this registry key. The registry key must be open.</p>
             
             For example:
             <code>  
                 RegistryKey existsTest = new RegistryKey();
                 try {
                     existsTest.Open(RegistryKey.LOCAL_MACHINE, "Ident");
            
                     if( existsTest.ExistsValue("Name") ) {
                         Console.WriteLine("Name = " + existsTest.GetStringValue("Name"));
                     }
                 }
                 catch( Exception e ) {
                     // print error message here
                 }
             </code>
            
             </summary>
             <remarks>
             If the key has not been opened, an exception will be thrown.
             </remarks>
             <param name="KeyName">The name of the registry key value to look for in the
             registry.</param>
             <returns>True if the registry value exists, false  otherwise.</returns>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the KeyName 
             parameter is null.</exception>
             <exception cref="T:System.InvalidOperationException">InvalidOperationException - If the
             registry key is not open/valid.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetBinaryValue(System.String)">
            <summary>
            The GetBinaryValue method is used to retreive a binary value 
            from the Registry using an opened registry key. 
            </summary>
            <remarks>
            <p>If the binary value is not found, an exception will be thrown.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <returns>The binary data read from the registry, as an array of bytes.</returns>
            <param name="Name">Registry Key value name</param>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            value name is not found in the registry.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a binary registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetBinaryValue(System.String,System.Byte[])">
            <summary>
            The GetBinaryValue method is used to retreive a binary value 
            from the Registry using an opened registry key. 
            </summary>
            <remarks>
            <p>If the binary value is not found, the default value will be returned.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">Registry Key value name</param>
            <param name="DefaultValue">Value that will be returned if the specified value 
            name is not found in the registry. The default value may be null.</param>
            <returns>The binary data read from the registry, as an array of bytes. If the
            registry value specified does not exist, the default value will be returned
            instead. </returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a binary registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetIntegerValue(System.String)">
            <summary>
            The GetIntegerValue method is used to retreive an integer 
            value from the Registry using an open registry key.
            </summary>
            <remarks>
            <p>If the integer value is not found, an exception will be thrown.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">Registry Key value name</param>
            <returns>The integer read from the registry.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            value name is not found in the registry.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not an integer registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetIntegerValue(System.String,System.Int32)">
            <summary>
            The GetIntegerValue method is used to retreive an integer 
            value from the Registry using an open registry key.
            </summary>
            <remarks>
            <p>If the integer value is not found, the default value will be returned.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">Registry Key value name</param>
            <param name="DefaultValue">Value that will be returned if the specified value 
            name is not found in the registry.</param>
            <returns>The integer data read from the registry. If the registry value
            specified does not exist, the default value will be returned instead. </returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not an integer registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetMultiStringValue(System.String)">
            <summary>
            The GetMultiStringValue method is used to retreive a 
            multi-string value from the registry using an open key.
            </summary>
            <remarks>
            <p>If the multi-string is not found, an exception will be thrown.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">Registry Key value name</param>
            <returns>The multi-string read from the registry.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            value name is not found in the registry.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not an integer registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetMultiStringValue(System.String,PsionTeklogix.Utility.MultiString)">
            <summary>
            The GetMultiStringValue method is used to retreive a 
            multi-string value from the registry using an open key.
            </summary>
            <remarks>
            <p>If the multi-string is not found, the default value will be returned.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">Registry Key value name</param>
            <param name="DefaultValue">Value that will be returned if the specified value 
            name is not found in the registry. The default value may be null.</param>
            <returns>The multi-string read from the registry. If the registry value 
            specified does not exist, the default value will be returned instead. </returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not an integer registry key.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetObjectValue(System.String)">
            <summary>
            Get the named value. If the name does not exist then null will be returned.
            </summary>
            <remarks>
            <p>If the multi-string is not found, the default value will be returned.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">The name of the value.</param>
            <returns>The object representing the information read from the registry. The
            object will be one of the following types: string, byte[], int, MultiString.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            value name is not found in the registry.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a supported registry key type.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetObjectValue(System.String,System.Object)">
            <summary>
            Get the named value. If the name does not exist then the default value
            will be returned.
            </summary>
            <remarks>
            The parameter name is not case-sensitive.
            To get the default value for a particular registrykey, name can be 
            either a null reference (Nothing in Visual Basic), or the empty string ("").
            </remarks>
            <param name="Name">The name of the value.</param>
            <param name="DefaultValue">Value that will be returned if the specified value 
            name is not found in the registry. The default value may be null.</param>
            <returns>The object representing the information read from the registry. The
            object will be one of the following types: string, byte[], int, MultiString.
            If the value was not found, the specified default value will be returned.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a supported registry key type.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetNumberOfSubKeys">
            <summary>
            The GetNumberOfSubKeys method returns the number of subkeys under 
            the open registry key.
            </summary>
            <remarks>
            If the key has not been opened, an exception will be thrown.
            </remarks>
            <returns>int - number of sub keys </returns>
            <exception cref="T:System.InvalidOperationException">
            InvalidOperationException - If the key is not open/valid.
            </exception>
            <exception cref="T:System.ApplicationException">
            ApplicationException - If the number of subkeys could not be determined.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetNumberOfValues">
            <summary>
            The GetNumberOfValues method returns the number of registry
            values under the open registry key. 
            </summary>
            <remarks>
            If the key has not been opened, an exception will be thrown.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            InvalidOperationException - If the key is not open/valid.
            </exception>
            <exception cref="T:System.ApplicationException">
            ApplicationException - If the number of values could not be determined.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetStringValue(System.String)">
            <summary>
            The GetStringValue method is used to retreive a 
            string value from the Registry using an open key.
            </summary>
            <remarks>
            <p>If the string value is not found, an exception will be thrown.</p>
            <p>If the key is not open, an exception will be thrown.</p>
            </remarks>
            <returns>The string read from the registry.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            value name is not found in the registry.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a supported registry key type.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.GetStringValue(System.String,System.String)">
            <summary>
            The GetStringValue method is used to retreive a string value from the Registry 
            using an open key.
            </summary>
            <remarks>
            <p>If the string value is not found, an exception will be thrown.</p>
            <p>If the key is not open, an exception will be thrown.</p>
            </remarks>
            <param name="Name">The name of the value.</param>
            <param name="DefaultValue">Value that will be returned if the specified value 
            name is not found in the registry. The default value may be null.</param>
            <returns>The string read from the registry. If the value was not found in
            in the registry, the specified default value will be returned.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the supplied 
            value name is null.</exception>
            <exception cref="T:System.InvalidCastException">InvalidCastException - If the specified 
            value is not a supported registry key type.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.IsOpen">
            <summary>
            The IsOpen method is used to determine if a registry key 
            is open or not. A key is considered opened if:
                - The create method returned successfully
                - The open method returned successfully
            </summary>
            <returns>True, if the key is open. False, otherwise.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.Open(PsionTeklogix.Configuration.RegistryKey,System.String)">
            <summary>
            The Open method is used to open an existing registry key.
            </summary>
            <param name="KeyRoot">A pre-defined or already open registry key</param>
            <param name="KeyName">The name of the key to open. 
            The key will be opened underneath the predefined key 'KeyRoot'</param>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the KeyName 
            parameter or the KeyRoot parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            registry key cannot be opened.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.SetBinaryValue(System.String,System.Byte[])">
            <summary>
            The SetBinaryValue method is used to store binary data in the registry under 
            the open registry key. If the binary value with the specified name does not 
            exist, it will be created.
            </summary>
            <remarks>
            <p>If the value is null, an exception will be thrown.</p>
            <p>Zero-length arrays are valid, and will be stored in the registry.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            </remarks>
            <param name="Name">The name of the value to set.</param>
            <param name="value">The binary data to store in the registry.</param>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the value 
            parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            registry key value cannot be set or changed.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.SetIntegerValue(System.String,System.Int32)">
            <summary>
            The SetIntegerValue method is used to store an integer value in the Registry 
            under the open registry key. If the integer value with the specified name does 
            not exist, it will be created.
            </summary>
            <remarks>
            <p>If the key has not been opened, an exception will be thrown.</p>
            <p>If no name is given (i.e. the key name is null or blank) the value will be 
            stored as the default key value.</p>
            </remarks>
            <param name="Name">The name of the value to set.</param>
            <param name="value">The integer to store in the registry.</param>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            registry key value cannot be set or changed.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.SetMultiStringValue(System.String,PsionTeklogix.Utility.MultiString)">
            <summary>
            <p>The setMultiStringValue method is used to store a multi-string value in the
            the Registry using an open registry key. Multi-strings in C++ are represented 
            as a sequence of null-terminated strings, with the final string terminated by 
            2 nulls to indicate the end of the multi-string. As this is not possible in 
            .NET, multi-strings are instead represented by MultiString objects.</p>
            </summary>
            <remarks>
            <p>If the multi-string value is null, an exception will be thrown.</p>
            <p>If the key has not been opened, an exception will be thrown.</p>
            <p>If no name is given (i.e. the key name is null or blank) the value will be
            stored as the default key value.</p>
            </remarks>
            <param name="Name">The name of the value to set.</param>
            <param name="Value">The multistring data to store in the registry.</param>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the value 
            parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
            registry key has not been opened.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
            registry key value cannot be set or changed.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.SetStringValue(System.String,System.String)">
             <summary>
             <p>The SetStringValue method is used to store a string value in the Registry 
             under the open registry key. If the value with the specified name does not 
             exist, it will be created.</p>
            
             The following code demonstrates how to write a string to the WindowsCE Registry:
             <code>  
                 RegistryKey stringTest = new RegistryKey();
                 try {
                     stringTest.Create(RegistryKey.LOCAL_MACHINE, "TempKey");
                     stringTest.SetStringValue("TempName", "TempVal");
                 }
                 catch( Exception e ) {
                     // handle error here ...
                 }
            
                 stringTest.Close();
             </code>
            
             </summary>
             <remarks>
             <p>If the string value is null, an exception will be thrown.</p>
             <p>If the key has not been opened, an exception will be thrown.</p>
             <p>If no name is given (i.e. the key name is null or blank) the value will 
             be stored as the default key value.</p>
             </remarks>
             <param name="Name">The name of the value to set.</param>
             <param name="value">The string data to store in the registry.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the value 
             parameter is null.</exception>
             <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
             registry key has not been opened.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
             registry key value cannot be set or changed.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.SetObjectValue(System.String,System.Object)">
             <summary>
             <p>The setObjectValue method is used to store an object value in the Registry
             using the open registry key. The following object types are supported:</p>
             
             * byte []
             * int
             * MultiString
             * String
            
             <p>The following code demonstrates how to write objects to the WindowsCE registry:</p>
             <code>  
                 RegistryKey objectTest = new RegistryKey();
                 try {
                     // create a registry key under 'HKEY_LOCAL_MACHINE'
                     objectTest.Create(RegistryKey.LOCAL_MACHINE, "ObjectTest");
                     objectTest.SetObjectValue("myValue", 3);
                     objectTest.SetObjectValue("myValue2", "This is only a test");
                     objectTest.SetObjectValue(null, "Default Value Here");
                 }
                 catch( Exception e ) {
                     // handle error here ...
                 }
             
                 objectTest.Close();
             </code>
             </summary>
            
             <remarks>
             <p>If an object of an unsupported type is passed to the SetObjectValue method,
             an ArgumentException will be thrown.</p>
             <p>If the object value is null, an exception will be thrown.</p>
             <p>If the key has not been opened, an exception will be thrown.</p>
             <p>If no name is given (i.e. the key name is null or blank) the value will 
             be stored as the default key value.</p>
             <p>The parameter name is not case-sensitive.</p>
             </remarks>
             <param name="Name">The name of the value to set.</param>
             <param name="value">The actual value data to store in the registry.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the value 
             parameter is null.</exception>
             <exception cref="T:System.ArgumentException">ArgumentException - If the value supplied
             is not supported (see above).</exception>
             <exception cref="T:System.InvalidOperationException">InvalidOperationException - If 
             registry key has not been opened.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the supplied
             registry key value cannot be set or changed.</exception>
        </member>
        <member name="T:PsionTeklogix.Configuration.RegistryKey.RegistryValue">
             <summary>
              The RegistryValue class is used to report registry values read from the Registry
             with the enumerateValues method.
             </summary>
             <remarks>
             <p>The name member will contain the name of the associated registry value, and can be
             null or blank if the value is the default key value.</p>
            
             <p>The value parameter will contain the value read from the registry, as one of four
             types:
              * Integer - for all integer values, including big and little endian values. Note
                that big/little endian values will be converted to the correct endianess before
                being returned to the application.
              * ByteArrayObject - for all binary values.
              * MultiString - for all multistrings.
              * String - for all strings. 
             </p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.RegistryValue.name">
            <summary> The name of the registry value read from the Registry </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryKey.RegistryValue.value">
            <summary> The value read from the Registry. </summary>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.RegistryValue.#ctor(System.String,System.Object)">
             <summary>RegistryValue Constructor.</summary>
            
             <param name="name">
             The name of the registry value found in the registry.
             </param>
             <param name="value">
             The value read from the registry.
             </param>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegistryKey.RegistryValue.ToString">
            <summary> Converts the RegistryValue object to a string.</summary>
            <returns> The RegistryValue object as a string. </returns>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanTriggerEventArgs">
            <summary>
            @deprecated Please use Trigger namespace.            
            Contains the trigger state at the time a ScanTriggerEvent occurred. 
            </summary>
            <remarks>
            <p>A ScanTriggerEvent will occur whenever the user presses or releases the scan 
            button, or presses and releases the scanner trigger.</p>
            <p>Single-click and double click events replace trigger events - no trigger event 
            will be seen if a single click or double-click event occurs.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanTriggerEventArgs.ToString">
            <summary>
            @deprecated Please use Trigger namespace.            
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanTriggerEventArgs.ScanTriggerState">
            <summary>
            @deprecated Please use Trigger namespace.            
            Reports the state of the trigger at the time the event was generated.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Win32">
            <summary>
            Win32 API defintions.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Win32.LoadCursor(System.IntPtr,System.String)">
            <summary>
            This function loads a cursor resource.
            </summary>
            <param name="hInstance">
            [in] Handle to an instance of the module whose 
            executable file contains the cursor to be loaded. 
            </param>
            <param name="lpCursorName">
            See enum: CURSOR_ID
            </param>
            <returns>
            The handle to the newly loaded cursor indicates success. 
            NULL indicates failure. To get extended error information, 
            call GetLastError. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Win32.SetCursor(System.IntPtr)">
            <summary>
            This function establishes the cursor shape.
            </summary>
            <param name="hCursor">
            [in] Handle to the cursor. The cursor must have been 
            created by the CreateCursor or loaded by the LoadCursor 
            or LoadImage function. If this parameter is NULL, 
            the cursor is removed from the screen. 
            The width and height of the cursor must be the values 
            returned by the GetSystemMetrics function for SM_CXCURSOR 
            and SM_CYCURSOR. 
            </param>
            <returns></returns>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Win32.Sleep(System.Int32)">
            <summary>
            This function suspends the execution of the current 
            thread for a specified interval. 
            </summary>
            <param name="dwMiliseconds"></param>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID">
            <summary>
            To be used with SetCursor().
            To use one of the Microsoft Win32 predefined cursors, 
            the application must set the hInstance parameter to NULL 
            and the lpCursorName parameter to a specific value. 
            The following table shows the possible values. 
            This parameter must be set to one of these values.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_ARROW">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_IBEAM">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_WAIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_CROSS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_UPARROW">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_ICON">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_SIZENESW">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_SIZEWE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_SIZENS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_SIZEALL">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_APPSTARTING">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_HELP">
            <summary>
            
            </summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Win32.CURSOR_ID.IDC_HAND">
            <summary>
            
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.SignatureControl">
            <summary>
            Implements Signature control that may be placed on a form to capture a 
            signature from a user.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.#ctor">
            <summary>
            Creates a new instance of a signature box.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnResize(System.EventArgs)">
            <summary>
            Handle the Resize event. Dispose of old bitmap and graphics and create new one.
            </summary>
            <param name="e">Resize event arguments.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Save(System.IO.Stream)">
            <summary>
            Save the signature bitmap to a stream in monochrome BMP format.
            </summary>
            <remarks>
            Saving is slow so the cursor should be changed to the busy cursor.
            </remarks>
            <example>
            <code lang="C#">
            Cursor.Current = Cursors.WaitCursor;
            mySignature.Save(bitmapStream);
            Cursor.Current = Cursors.Default;
            </code>
            </example>
            <param name="stream">Stream to write.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Save(System.String)">
            <summary>
            Save the signature bitmap to a monochrome BMP file.
            </summary>
            <remarks>
            Saving is slow so the cursor should be changed to the busy cursor.
            </remarks>
            <example>
            <code lang="C#">
            Cursor.Current = Cursors.WaitCursor;
            mySignature.Save("filename.bmp");
            Cursor.Current = Cursors.Default;
            </code>
            </example>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Clear">
            <summary>
            Clear the current signature.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is placed in the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is moved from the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is moved through the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.DrawImage(System.Collections.ArrayList)">
            <summary>
            It allows developers to redraw the signature. This approach allows easier 
            persistence of the signature in your database, flat file, etc. We didn't
            provide the serialization mechanism because there isn't one included into 
            .NET CF. This allows developers to use their own. If however, developers
            don't want to use this approach, they have option to persist their signatures
            into bitmap.
            </summary>
            <param name="p">New signature to draw, as an ArrayList of Point[] lines.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Dispose(System.Boolean)">
            <summary>
            Release graphics resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.SignatureControl.Image">
            <summary>
            The bitmap image of the signature.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.SignatureControl.Lines">
            <summary>
            The signature data, as an ArrayList of strokes. Each stroke is of type Point[].
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs">
            <summary>
            Arguments for the <see cref="T:PsionTeklogix.Windows.Forms.OrientationChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs.#ctor(PsionTeklogix.Windows.Forms.Orientations)">
            <summary>
            
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs.NewOrientation">
            <summary>
            Retrieves the new orientation after the orientation change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortAttachedEvent">
            <summary>
            The SerialPortAttachedEvent class is used to report when a new serial port appears
            on the target device, usually as the result of adding new hardware such as a 
            Bluetooth radio or port replicator.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortChangeEvent">
            <summary>
            The SerialPortChangeEvent class is used to report when a COM port 
            experiences an event of some sort. Subclasses of SerialPortChangeEvent will
            be used to report particular types of events.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPortChangeEvent.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The name of the COM port generating the event.</param>
        </member>
        <member name="F:PsionTeklogix.Serial.SerialPortAttachedEvent.SourcePort">
            <summary>
            The name of the COM port generating the event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPortAttachedEvent.#ctor(System.String)">
            <summary>
            SerialPortAttachedEvent constructor. Initializes the attached event object 
            with the source port name.
            </summary>
            <param name="sourcePort">The name of the COM port generating the event.</param>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralsEventArgs">
            <summary>
            Represents a type of the docking station or type of
            the tether port device that is passed as an argument in dockingEvent and tetherEvent.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.PeripheralsEventArgs.peripheralValue">
            <summary>
            The value that is returned from Docking or Tether port driver.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStateEventArgs">
            <summary>
            Provides data for the ConnectionStateChanged event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.ConnectionStateEventArgs.#ctor(PsionTeklogix.RAS.ConnectionStates,System.Int32)">
            <summary>
            Initialzes a new instance of an ConnectionStateChanged class. This constructor is internal
            so that this class cannot be instantiated outside this assembly.
            </summary>
            <param name="state">The current state if the connection.</param>
            <param name="error">Was there an error.</param>
        </member>
        <member name="P:PsionTeklogix.RAS.ConnectionStateEventArgs.state">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.ConnectionStateEventArgs.Error">
            <summary>
            Gets the error number associated with the state change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.RegistryHive">
             @deprecated
             <summary>
             Represents the root keys in the Windows CE registry.
             </summary>
             <remarks>
             Please note: the Configuration Namespace is deprecated.
             Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
             <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/> 
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryHive.LocalMachine">
            <summary>Hardware and driver configuration data</summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryHive.ClassesRoot">
            <summary>OLE and file-type matching configuration data</summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryHive.CurrentUser">
            <summary>Configuration data for the current user</summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.RegistryHive.Users">
            <summary>Stores data that applies to all users</summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.RegKey">
            @deprecated
            <summary>
            The RegKey class represents a registry key. It encapsulates the Win32 Registry API
            functionality in Windows CE.
            </summary>
            <remarks>
            <p>Please note: the Configuration Namespace is deprecated.
            Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.
            <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/></p> 
               
            This API is a subset of the full .Net framework registry keys class.
            <para/>
            As many of the CE settings are in the registry, this class is required
            to configure entities that have not been encapsulated in the framework.
            Developers should refrain from using the registry to configure applications
            and use the setting classes to configure applications.
            </remarks>
            <example>
            <code lang="C#">
            public void SetAutoDial(string connectionName)
            {
                RegistryKey key = RegistryKey.OpenKey(RegistryHive.CurrentUser, "RemoteAccess");
                key.SetValue("InternetProfile", connectionName);
            }
            
            // Will return null if not set or does not exist
            public string GetAutoDial()
            {
                RegistryKey key = RegistryKey.OpenKey(RegistryHive.CurrentUser, "RemoteAccess");
                return key.GetValue("InternetProfile");
            }
            </code>
            <code lang="VB">
            Public Sub SetAutoDial(ByValue connectionName As String)
                Dim key as Registrykey = RegistryKey.OpenKey(RegistryHive.CurrentUser, "RemoteAccess")
                key.SetValue("InternetProfile", connectionName)
            End Sub
            
            Public Function GetAutoDial() As String
                Dim key as Registrykey = RegistryKey.OpenKey(RegistryHive.CurrentUser, "RemoteAccess")
                Return key.GetValue("InternetProfile")
            End Sub
            </code>
            </example>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.#ctor(PsionTeklogix.Configuration.RegistryHive,System.String,System.Boolean)">
            <summary>
            Creates a new instance of a RegKey.
            </summary>
            <param name="root">The Registry Hive.</param>
            <param name="key">The name of the root subkey to open.
            This subkey must not begin with the backslash character (\).
            </param>
            <param name="create">If the key does not exist then create it.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.OpenKey(PsionTeklogix.Configuration.RegistryHive,System.String)">
            <summary>
            Factory method that will open a key in a root. If the key does not
            exist then an exception will be thrown.
            </summary>
            <param name="root">The Registry Hive.</param>
            <param name="key">The name of the root subkey to open.</param>
            <returns>An instance of the registry key representing the key.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.OpenKey(PsionTeklogix.Configuration.RegistryHive,System.String,System.Boolean)">
            <summary>
            Factory method that will open a key in a root. If the key does not
            exist then the key will be created if requested.
            </summary>
            <param name="root">The Registry Hive.</param>
            <param name="key">The name of the root subkey to open.</param>
            <param name="create">If true then the key will be created.</param>
            <returns>An instance of the registry key representing the key.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.OpenSubKey(System.String)">
            <summary>
            Opens a sub key. If the sub key does not exist then an exception is thrown.
            </summary>
            <param name="key">The sub key name.</param>
            <returns>An instance of the registry key representing the sub key.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.OpenSubKey(System.String,System.Boolean)">
            <summary>
            Opens a sub key. If create==true and the sub key does not exist, then it
            will be created else an exception will be thrown.
            </summary>
            <param name="key">The sub key name.</param>
            <param name="create">If the sub key does not exist then create it.</param>
            <returns>An instance of the registry key representing the sub key.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.DeleteSubKey(System.String)">
            <summary>
            Delete the sub key.
            If the key that we are trying to delete doesn't exist,
            the function will throw an exception
            </summary>
            <param name="key">The sub key name.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.GetSubKeyNames">
            <summary>
            Get an array of sub key names.
            </summary>
            <returns>An array of sub key names.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.GetValue(System.String)">
            <summary>
            Get the named value. If the name does not exist then null will be returned.
            </summary>
            <remarks>
            The parameter name is not case-sensitive.
            To get the default value for a particular registrykey, name can be 
            either a null reference (Nothing in Visual Basic), or the empty string ("").
            </remarks>
            <param name="name">The name of the value.</param>
            <returns>Returns null if the value does not exist.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.GetValue(System.String,System.Object)">
            <summary>
            Get the named value. If the name does not exist then the default value
            will be returned.
            </summary>
            <remarks>
            The parameter name is not case-sensitive.
            To get the default value for a particular registrykey, name can be 
            either a null reference (Nothing in Visual Basic), or the empty string ("").
            </remarks>
            <param name="name">The name of the value.</param>
            <param name="defaultValue">The default value if the key does not exist.</param>
            <returns>Returns the default value if the value does not exist.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.SetValue(System.String,System.Object)">
            <summary>
            Set the named value.
            </summary>
            <remarks>
            The parameter name is not case-sensitive.
            To get the default value for a particular registry key, name can be 
            either a null reference (Nothing in Visual Basic), or the empty string ("").
            If the method failed, it will throw an exception.
            </remarks>
            <param name="name">The name of the value to set.</param>
            <param name="value">The actual value to be set.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.DeleteValue(System.String)">
            <summary>
            Delete a value.
            If this method failed, it will throw an exception.
            </summary>
            <param name="name">The name of the value to delete.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.GetValueNames">
            <summary>
            Get an array of value names in the current key.
            </summary>
            <returns>An array of value names.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.Close">
            <summary>
            Close the current registry key immediately.
            </summary>
            <remarks>
            Use the close method to ensure that there are no race conditions by 
            immediately closing all references to the specified registry key. 
            It will release explicatelly allresources allocated for this use.
            If close is not called, then the garbage collector will close it sometime
            later.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Configuration.RegKey.Dispose">
            <summary>
            Dispose of resources used.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.RegKey.CurrentRoot">
            <summary>
            Gets the Registry Hive for this instance.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.RegKey.CurrentKey">
            <summary>
            Gets the key name for this instance.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WwanIndicationsHandler">
            <summary>
            Handles the conversion of WWAN indications from the common layer to the C# layer.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.IndicationReceiverProc">
            <summary>
            Thread procedure.  Blocks until an indication event arrives, marshals the 
            data and calls function so common layer knows that we are done with the data.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.ParseSmsLocation">
            <summary>
            Parse WWAN_SMS_LOCATION when WM_ON_NEW_SMS_MSG is received 
            Created for unit test purpose
            </summary>
            <returns>location data read from the native side </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.Dispose">
            <summary>
            Dispose of the DeviceInterface.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.Dispose(System.Boolean)">
            <summary>
            Finalizer method.  Dispose of all managed and unmanaged resources.
            </summary>
            <remarks>
            This function must be called explicitly by the application (via the
            device interface's Dispose() method.  The reason for this is that 
            CF 1.0 does not support background threads.  That means that the
            garbage collector will not run because there is an active foreground
            thread (workerThread).  Unfortunately the thread will not be terminated
            until the Dispose method is called. 
            </remarks>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.WaitForIndication">
            <summary>
            wrapper for WaitForIndicationNative        
            </summary>
            <returns>indication id</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.StopWaitingForIndication">
            <summary>
            Wrapper for StopWaitingForIndicationNative
            Created for unit test purpose
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.WwanIndicationsHandler.SetIndicationsListener">
            <summary>
            Wrapper for SetIndicationsListenerNative
            Created for unit test purpose
            </summary>        
        </member>
        <member name="T:PsionTeklogix.WWAN.AccessFlags">
            <summary>
             Flags used to control access to various WWAN operations.
            </summary>
            <remarks>
             Some WWAN operations performed by an application could conflict with similar
            operations performed by the WWAN user interface (WWANUI). In order to
            prevent these operations from causing problems, an application is normally
            prevented from performing them. If an application needs to perform one of these
            operations, for example changing the PIN, it must first request access to the
            operation. Doing so will prevent the WWAN UI from performing the disabled
            operation, or reacting to the operation being performed by another application.
            </remarks>
        </member>
        <member name="F:PsionTeklogix.WWAN.AccessFlags.EnableSetPin">
            <summary>Controls access to the set PIN operation.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.AccessFlags.EnableSetRegisterState">
            <summary>Controls access to the set register state operation.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.AccessFlags.EnableSetProvisionedContexts">
            <summary>Controls access to the set provisioned contexts operation.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.AccessFlags.SuppressCallNotifications">
            <summary>Suppressed the indication of incoming voice calls (ring) by WWANUI (rev.
             1.10047 or later) </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.FrequencyBandFlags">
            <summary>
             Flags used to represent frequency bands of the WWAN radio
            </summary>    
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_GSM_850">
            <summary>
            frequency band for GSM 850
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_GSM_900">
            <summary>
            frequency band for GSM 900
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_GSM_1800">
            <summary>
            frequency band for GSM 1800
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_GSM_1900">
            <summary>
            frequency band for GSM 1900
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_UMTS_850">
            <summary>
            frequency band for UMTS 850
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_UMTS_1900">
            <summary>
            frequency band for UMTS 1900
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_UMTS_2100">
            <summary>
            frequency band for UMTS 2100
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_UMTS_900">
            <summary>
            frequency band for UMTS 900
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.FrequencyBandFlags.WWAN_BAND_UMTS_AWS">
            <summary>
            frequency band for UMTS AWS
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.IndicationsListener">
             <summary>
               The IndicationsListener class defines the interface to be implemented
             by applications that require notification when indications are generated by
             the NDIS driver.
             </summary>
             <remarks>
             In order to receive indications, an application must:
            
             <ol>
             <li> Implement the IndicationsListener interface.</li>
             <li> Register itself with the WirelessWAN class using the SetIndicationsListener
                method.</li>
             <li> Enable indications using the SetIndicationsState method.</li>
             </ol>
             <p>An application can temporarily disable indications by calling the method
             WirelessWAN::SetIndicationsState, with the parameter set to false.</p>
            
             <p>An application must disable indications before terminating by calling the
             method WirelessWAN::SetIndicationsState, with the parameter set to false.</p>
             </remarks>
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnReadyState(PsionTeklogix.WWAN.WWAN_READY_STATE)">
             <summary>
              This indication is generated when the ready state of the driver changes.
             </summary>
             <remarks>
             <p>Barring a catastrophic failure, ready state indications should only be
             received at start-up and shutdown. Note that the start-up timing depends on the
             type of modem.</p>
             </remarks>
            
             <param name="ReadyState"> The ready state information. </param>
            
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnSignalState(PsionTeklogix.WWAN.WWAN_SIGNAL_STATE)">
             <summary>
              This indication is generated when the RSSI (received signal strength
             indicaton) changes. A signal strength indication will be sent when the
             measured signal strength travels outside the configured threshold.
             </summary>
            
             <param name="SignalState"> The signal state information.</param>
            
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnPinState(PsionTeklogix.WWAN.WWAN_PIN_STATE)">
             <summary>
             This indication is generated when the PIN state changes. Indications may
             occur at start-up and during the course of operation.
             </summary>
            
             <param name="PinState"> The current PIN state settings.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnRegisterState(PsionTeklogix.WWAN.WWAN_REGISTRATION)">
             <summary>
             This indication is generated when the registration state changes.
             </summary>
            
             <param name="Registration"> The current register state settings. </param>
            
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnPacketService(PsionTeklogix.WWAN.WWAN_PACKET_SERVICE)">
             <summary>
             This indication is generated when a packet service setting changes.
             </summary>
            
             <param name="PacketService"> The packet service settings. </param>
            
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnNewSmsMessage(PsionTeklogix.WWAN.WWAN_SMS_LOCATION)">
             <summary>
             This indication is generated when a new SMS message is received.
             </summary>
            
             <param name="SmsLocation"> The SMS message and mailbox indicies. </param>
            
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnStatusWanLineUp">
            <summary>
             This indication is generated when a packet data connection is established
            via RAS (e.g. by pressing the "Connect Data" button on the Wireless
            WAN control panel).
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnStatusWanLineDown">
            <summary>
             This indication is generated when a packet data connection is dropped
            via RAS (e.g. by pressing the "Disconnect" button on the Wireless
            WAN control panel).
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.IndicationsListener.OnStatusClosingIndicated">
            <summary>
             This indication is sent when the driver is about to terminate. There will
            be no further indications following this indication.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WirelessWAN">
             <summary>
               This class is used to perform all Wireless Wide Area Networking-
             related operations.
             </summary>
             <remarks>
             <p>The WirelessWAN class is used to perform all Wireless Wide Area
             Networking-related operations and activities, including:
            
              * Registering to receive indications
              * Getting the capabilities of the installed WWAN modem
              * Getting the WWAN driver version (major and minor)
              * Getting the operational state of the device (ready state, PIN state,
                   and registration state)
              * Listing all available networks
              * Changing, enabling, disabling, or submitting the PIN.
              * Setting provisioned contexts
              * Changing the signal strength settings (interval and threshold)
              * Reading SMS messages
              * Deleting SMS messages
              * Getting the SMS capabilities of the modem
              * Sending SMS messages
              * Setting the SMS configuration
              * Retrieving the SMS configuration
             </p>
            
             <p>When an application calls a WirelessWAN method, it should first check the
             return code of the function - this value determines whether or not the
             request was successfully issued to the driver. If the method returned
             successfully, the application should then check the resultCode member of
             the WWanRequestParameters structure to determine the results of the operation.</p>
             </remarks>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.Initialize">
             <summary>
              Initializes the WirelessWAN API.
             </summary>
             <remarks>
              The Initialize method initializes the WirelessWAN API for use by
             applications. This method must be called before any other API methods have
             been called.
             </remarks>
            
             <returns>
              * WwanRequest.DriverNotRunning   - If the WWAN driver is not running.
              * WwanRequest.Failure            - If the API did not initialize properly.
              * WwanRequest.Success            - If the API initialized successfully.
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.Shutdown">
             <summary>
               Shuts down the WirelessWAN API.
             </summary>
             <remarks>
              This method must be called before the application exits.
             </remarks>
            
             <returns>
              * WwanRequest.Success            - If the API was successfully shutdown.
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetCurrentAccessFlags(PsionTeklogix.WWAN.AccessFlags@)">
             <summary>
              Returns the current set of flags representing the restricted SMS
              operations currently reserved for use by applications.
             </summary>
             <remarks>
              The GetCurrentAccessFlags method returns the current set of flags
             representing the restricted SMS operations currently reserved for use by
             applications.
             </remarks>
            
             <param name="accessFlags"> The current set of operations not be performed by the
              WWAN user interface (WWANUI).</param>
             <returns> The status of the request:
              * WwanRequest.Success        - If the operation was successful.
              * WwanRequest.NotInitialized - If the Initialize method was not called or failed.
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetCurrentAccessFlags(PsionTeklogix.WWAN.AccessFlags)">
             <summary>
              Modifies the set of access flags used to control access to the restricted
             operations listed in the AccessFlags enumeration.
             </summary>
             <remarks>
             <p>When calling this method, one or more access flags may be supplied. These
             flags allow the application to access several operations normally reserved
             for the WWAN user interface (WWANUI.exe), while at the same time preventing
             the WWANUI itself from performing them. Take care when using these operations,
             especially the Set PIN operation, as setting an invalid value(s) could
             prevent the modem from functioning properly.</p>
            
             <p>An application calling this method should take care to save the old set of
             access flags and restore them on exit.</p>
            
             <p>An application should NOT simply change access flags, perform an operation,
             and then reset the flags. Under most circumstances, the application should modify
             the flags at startup, and reset them on exit.</p>
             </remarks>
            
             <param name="accessFlags"> Specifies the set of reserved operations to be performed
               by the application. Set the parameter value to zero if no reserved operations
               are required by the application.</param>
             <returns> The status of the request:
              * WwanRequest.Success            - If the operation was successful.
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetIndicationsListener(PsionTeklogix.WWAN.IndicationsListener)">
             <summary>
               Registers the specified object to receive indications sent by the WWAN
             driver.
             </summary>
             <remarks>
              The SetIndicationsListener method registers the specified object to receive
             indications sent by the WWAN driver. Indications will only be sent if the
             SetIndicationsState method is called with a value of 'true'.
             </remarks>
            
             <param name="listener"> The object to register to receive indications. The parameter
              can be null, if so indications will not be generated, regardless of whether
              indications are enabled.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetIndicationsState(System.Boolean)">
             <summary>
               Enables or disables indications.
             </summary>
             <remarks>
              The SetIndicationsState method enables or disables the generation of
             indications. It must be called with a value of 'true' in order to enable
             indications.
             </remarks>
            
             <param name="enable"> If true, indications will be enabled. If false, indications
              will not be generated.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetDeviceCaps(PsionTeklogix.WWAN.WWAN_DEVICE_CAPS)">
             <summary>
              This method is used to query the capabilities of the WWAN modem.
             </summary>
             <remarks>
              The GetDeviceCaps method is used to query the capabilities of the WWAN modem,
             including the cellular technology, the classes of packet data supported,
             the type of voice service provided, and whether a SIM is used.
             </remarks>
            
             <param name="caps"> A WWAN_DEVICE_CAPS object. </param>
            
             <returns> The status of the request:
              * WwanRequest.InvalidParameter   - If the caps parameter was 0 (NULL).
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetReadyState(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_READY_STATE)">
             <summary>
              The method allows the application to retrieve the ready state of the
             WWAN driver.
             </summary>
             <remarks>
              The GetReadyState method allows the application to retrieve the ready
             state of the WWAN driver. It also allows the driver to report other related
             information, such as the subscriber and equipment identity, and associated
             ISDNs (phone numbers).
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="readyState"> A WWAN_READY_STATE object.</param>
            
             <returns>
              * WwanRequest.InvalidParameter   - If the readyState parameter was 0 (NULL).
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetPinState(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_PIN_STATE)">
             <summary>
              Returns the password/PIN state, primarily indicating when a PIN needs
             to be entered.
             </summary>
             <remarks>
             <p>The GetPinState method is used to retrieve the PIN state, primarily to
             determine if the PIN/PUK needs to be entered.</p>
            
             <p>The GetPinState method will fail if the modem does not support a SIM, as
             is the case with most CDMA modems. Use the GetDeviceCaps method to determine
             if the modem supports a SIM.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="pinState"> The current PIN state settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetPin(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SET_PIN)">
             <summary>
              This method is used to change the PIN settings on a SIM card.
             </summary>
             <remarks>
             <p>The SetPin method is used to send a PIN to the device, enable or disable PIN
             settings, or change a PIN on the SIM.</p>
            
             <p>The SetPin method will fail if the modem does not support a SIM, as
             is the case with for most CDMA modems. Use the GetDeviceCaps method to
             determine if the modem supports a SIM.</p>
            
             <p>All PIN operations require that a valid PIN be supplied. If too many invalid
             PIN values are sent in a row, the SIM will be disabled until a valid PUK is
             entered.</p>
            
             <p>The SetPin method is a restricted operation. The method call will fail
             with the WwanRequest.AccessFlagNotSet error if the appropriate access flag
             has not been set using the SetCurrentAccessFlags method.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="SetPin"> The new PIN settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetSIMID(PsionTeklogix.WWAN.WWanRequestParameters,System.String@)">
             <summary>
              Returns the ID of the SIM card in the internal GSM modem
             </summary>
            
             <param name="parameters"> The request parameters for the request.</param>
             <param name="id"> The ID of SIM card in the internal modem.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If tfshe driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetAvailableNetworks(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_PROVIDER_LIST)">
             <summary>
              Returns a list of available networks.
             </summary>
             <remarks>
             <p>The GetAvailableNetworks returns a list of available networks to the
             caller.</p>
            
             <p>The GetAvailableNetworks method is not supported for CDMA modems. Use the
             GetDeviceCaps method to determine the modem type.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="providerList"> On exit, the current list of known providers.</param>
            
             <returns>
              * WwanRequest.InvalidParameter   - If the providerList parameter was 0 (NULL).
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetRegisterState(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_REGISTRATION)">
             <summary>
              Returns the register state of the driver.
             </summary>
             <remarks>
             <p>The GetRegisterState is used to retrieve registration information from the
             WWAN driver, including the register mode, register state, and the current
             provider the modem is camped on.</p>
            
             <p>The registration information will change if the connection to the network
             drops or if the provider changes.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="registration"> The current register state settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetRegisterState(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_REGISTRATION)">
             <summary>
              Allows the application to set the register state of the driver.
             </summary>
             <remarks>
             <p>The SetRegisterState is used to change the registration information of the
             WWAN driver, including the register mode, register state, and the current
             provider the modem is camped on. The device should remain in this registration
             mode until either the registration state is changed by a call to
             SetRegisterState or the driver is disabled.</p>
            
             <p>The SetRegisterState method is not supported for CDMA modems.</p>
            
             <p>The SetRegisterState method is a restricted operation. The method call will
             fail with the WwanRequestAccessFlagNotSet error if the appropriate access
             flag has not been set using the SetCurrentAccessFlags method.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="registration"> The new register state settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetPacketService(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_PACKET_SERVICE)">
             <summary>
              Returns the current packet service availability state.
             </summary>
             <remarks>
              The GetPacketService method is used to retrieve the current packet service
             availability state, including the data class and attach state (attached,
             searching, detached, denied, or unknown). Note that a context cannot be
             activated through RAS until the attach status is "attached".
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="packetService"> The current packet service settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetSignalSuggestion(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SIGNAL_STATE)">
             <summary>
              This method sets the suggested notification intervals and thresholds
             for the signal strength.
             </summary>
             <remarks>
              The SetSignalSuggestion method sets the suggested evaluation intervals
             and thresholds for signal strength.  These values are optionally used by the
             driver during conditions where increased power savings can be realized by
             reducing signal notifications even further.
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="signalState"> The new RSSI settings.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetProvisionedContexts(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_CONTEXT_LIST)">
             <summary>
              Sets the current provisioned contexts on the device.
             </summary>
             <remarks>
             <p>The SetProvisionedContexts method is used to set one or more provisioned
             contexts on the device. This information is stored locally. Context
             information includes the user name and password, authentication type,
             and access string.</p>
            
             <p>Note that the user name and password are also required by RAS. In particular,
             the access string (e.g. the APN for GPRS) must be set through the
             SetProvisionedContexts method before a packet data connection can be
             established through RAS.</p>
            
             <p>The SetProvisionedContexts method is a restricted operation. The method
             call will fail with the WwanRequestAccessFlagNotSet error if the appropriate
             access flag has not been set using the SetCurrentAccessFlags method.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request.</param>
             <param name="ContextList"> The new provisioned contexts.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetSmsCaps(PsionTeklogix.WWAN.WWAN_SMS_CAPS)">
             <summary>
              Retrieves the SMS capabilities.
             </summary>
             <remarks>
             <p>The GetSmsCaps method returns information about the SMS capabilities of
             the modem, including:
              * The supported data encoding schemes (DCS)
              * The number of mailboxes
              * The maximum and current number of messages in each mailbox
              * The properties of each mailbox (where the messages are stored, if the
                   mailbox is writable, etc.)
             </p>
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE.SMSSTORE
             is set.</p>
             </remarks>
            
             <param name="capabilities"> - If successful, the SMS capabilities.</param>
            
             <returns>
              * WwanRequest.InvalidParameter   - If the result capabilities was 0 (NULL).
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.AccessDenied       - If the SMS capabilities cannot be queried
                                                   at this time.
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.ReadSms(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SMS_READ_REQUEST,PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT)">
             <summary>
              Retrieves an SMS message from a mailbox.
             </summary>
             <remarks>
             <p>The ReadSms method is used to retrieve an SMS message from a specified
             mailbox and message index. If the location specified in the read request
             structure is invalid, an error will be returned. Note that messages may
             not be sequentially located in a mailbox (for example, 3 messages could
             be found at indicies 2, 3, and 7). The GetSmsCaps method can be used to
             get the number of mailboxes, and the current/maximum numbers of messages
             in each mailbox.</p>
            
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE_SMSSTORE
             is set.</p>
            
             <p>Note that SMS messages returned by this method are not guaranteed to be
             null-terminated. Also, remember that the message size reported is in bytes,
             not characters.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.InvalidMailboxIndex - the mailbox index was outside the allowed range
              * WwanResult.InvalidMessageIndex - the message index was outside the allowed range
              * WwanResult.NoDcsConversion - the data coding scheme of the message can't be
                  converted to the requested data coding scheme
              * WwanResult.PduDecodeError - a GSM SMS PDU read from the modem could not be decoded
              * WwanResult.RequestRejected - the modem or driver state does not allow the request
                  to be processed at this time
             </param>
             <param name="Request"> The SMS read request containing the message location at
                  conversion flags. </param>
             <param name="readResult"> The SMS read result structure. </param>
            
             <returns>
              * WwanRequest.InvalidParameter   - If the result parameter was 0 (NULL).
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.DeleteSms(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SMS_LOCATION)">
             <summary>
              Deletes a message from a mailbox.
             </summary>
             <remarks>
             <p>The DeleteSms function deletes a message from the specified mailbox at
             a given index. Deleting a message can cause the mailbox to have gaps (for
             example, deleting message #2 from a mailbox containing messages at indicies
             1, 2, and 3 will result in messages at indicies 1 and 3). An application
             must take this into account when retrieving messages using the ReadSms
             method. The GetSmsCaps method can be used to get the number of mailboxes,
             and the current/maximum numbers of messages in each mailbox.</p>
            
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE_SMSSTORE
             is set.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.InvalidMailboxIndex - the mailbox index was outside the allowed range
              * WwanResult.InvalidMessageIndex - the message index was outside the allowed range
              * WwanResult.PduDecodeError - a GSM SMS PDU read from the modem could not be decoded
              * WwanResult.RequestRejected - the modem or driver state does not allow the request
                  to be processed at this time
             </param>
             <param name="Location"> The indicies of the mailbox and message to delete.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SendSms(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST)">
             <summary>
              Sends a message to device capable of receiving SMS messages.
             </summary>
             <remarks>
             <p>The SendSms method is used to send an SMS message to another SMS-enabled
             device. Messages can be sent in a variety of formats, including GSM 7-bit
             character set, UNICODE text, and binary.</p>
            
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE_SMSSTORE
             is set.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.InvalidMailboxIndex - the mailbox index was outside the allowed range
              * WwanResult.NoDcsConversion - invalid message format for the installed modem
              * WwanResult.RequestRejected - the modem or driver state does not allow the request
                  to be processed at this time
              * WwanResult.MailboxNotWritable - The specified mailbox is read-only.
              * WwanResult.AddressTooLong - The address in the send request is too long
              * WwanResult.AddressInvalid - The address in the send request contains invalid
                  characters
              * WwanResult.MessageTooLong - The message in a send request is too long and
                  length checking was requested
              * WwanResult.UnknownError - An unknown error occurred, probably specific
                  to one provider/network/modem.
             </param>
             <param name="SendRequest"> The request structure containing the SMS message, its
              destination, etc.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetSmsConfiguration(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SMS_CONFIG)">
             <summary>
              Retrieves the SMS configuration.
             </summary>
             <remarks>
             <p>Retrieves the SMS configuration, including the Short Message Service
             Centre address and configuration flags.</p>
            
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE_SMSSTORE
             is set.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.RequestRejected - the modem or driver state does not allow the request
                  to be processed at this time
              * WwanResult.NoDcsConversion - Illegal DCS encoding
              * WwanResult.AddressInvalid - The SMSC address contains invalid characters
              * WwanResult.AddressTooLong - The SMSC address contains too many characters
             </param>
             <param name="Config"> The request structure containing the SMS configuration.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                   is invalid.
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetSmsConfiguration(PsionTeklogix.WWAN.WWanRequestParameters,PsionTeklogix.WWAN.WWAN_SMS_CONFIG)">
             <summary>
              Sets the SMS configuration.
             </summary>
             <remarks>
             <p>Sets the SMS configuration, including the Short Message Service Centre
             address and configuration flags.</p>
            
             <p>SMS messages cannot be sent, retrieved or deleted, or the SMS capabilities
             or configuration queried, until the ready-state flag WWAN_READY_STATE_SMSSTORE
             is set.</p>
            
             <p>Take care when changing the SMS configuration. Setting an empty or invalid
             SMSC address will prevent the modem from sending SMS messages.</p>
             </remarks>
            
             <param name="parms"> The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.RequestRejected - the modem or driver state does not
                   allow the request to be processed at this time
             </param>
             <param name="Config"> The request structure containing the SMS configuration.</param>
            
             <returns>
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                 failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                 is invalid.
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                 handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetSupportedFrequencyBands(PsionTeklogix.WWAN.WWanRequestParameters,System.UInt64@)">
             <summary>
             Get the frequency bands supported by the WWAN radio
             </summary>
             <param name="parms">The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.RequestRejected - the modem or driver state does not
                   allow the request to be processed at this time</param>
             <param name="supportedBands">bit mask of supported frequency bands</param>
             <returns>
             WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                 failed.
             WwanRequest.Failure            - If the request could not be issued.
             WwanRequest.Success            - If the request was successful.
             WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                 is invalid.
             WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                 handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetEnabledFrequencyBands(PsionTeklogix.WWAN.WWanRequestParameters,System.UInt64@)">
             <summary>
             Get the frequency bands enabled by the WWAN radio
             </summary>
             <param name="parms">The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.RequestRejected - the modem or driver state does not
                   allow the request to be processed at this time</param>
             <param name="enabledBands">bit mask of enabled frequency bands</param>
             <returns>
             WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                 failed.
             WwanRequest.Failure            - If the request could not be issued.
             WwanRequest.Success            - If the request was successful.
             WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                 is invalid.
             WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                 handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.SetEnabledFrequencyBands(PsionTeklogix.WWAN.WWanRequestParameters,System.UInt64,System.Boolean@)">
             <summary>
             Set the frequency bands enabled by the WWAN radio
             </summary>
             <param name="parms">The request parameters for the request. When the request
               completes, the following error codes can be set:
            
              * WwanResult.Success - operation completed successfully
              * WwanResult.RequestRejected - the modem or driver state does not
                   allow the request to be processed at this time</param>
             <param name="bandsToEnable">bit mask of band frequency to be enabled</param>
             <param name="resetNeeded">true if this set requires a power reset to
             take effect</param>
             <returns>
             WwanRequest.NotInitialized     - If the Initialize method was not called or
                                              failed.
             WwanRequest.Failure            - If the request could not be issued.
             WwanRequest.Success            - If the request was successful.
             WwanRequest.EventHandleInvalid - If the event handle in the params structure
                                                 is invalid.
             WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                 handle the request
             </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.WirelessWAN.GetDriverVersion(System.Int32@,System.Int32@)">
             <summary>
              This method is used to get the version of the WWAN driver.
             </summary>
            
             <param name="driverVersionMajor">Receives the major driver version.</param>
             <param name="driverVersionMinor">Receives the minor driver version.</param>
            
             <returns> The status of the request:
              * WwanRequest.NotInitialized     - If the Initialize method was not called or
                                                   failed.
              * WwanRequest.Failure            - If the request could not be issued.
              * WwanRequest.Success            - If the request was successful.
              * WwanRequest.OutOfMemory        - If a memory allocation failure occurred
              * WwanRequest.BufferTooSmall     - If an internal buffer was too small
              * WwanRequest.AccessDenied       - If the driver is in an invalid state to
                                                   handle the request
             </returns>
             
        </member>
        <member name="T:PsionTeklogix.WWAN.PhonebookEntry">
            <summary>
            This class represents a WWAN phonebook entry (An entry stored in a WWAN phonebook,
            See documentation for the Phonebook object for more details.). This class can be 
            used to read/modify/set the properties of the phonebook entries stored in the phonebook.
            <para/>
            A PhonebookEntry object can not be created directly through a public constructor.  
            Use the Phonebook::GetPhonebooks() method to enumerate and return a list of all of the 
            accessible WWAN phonebooks. The PhonebookEntries can be retrieved from any of the 
            returned Phonebook objects using the Phonebook::GetPhonebookEntries() method (which
            will return an array of PhonebookEntry objects). 
            <para/>
            To create a PhonebookEntry not already stored in the Phonebook, use the Phonebook's
            AddPhonebookEntry() method which will store the new entry in the phsyical phonebook
            and return a PhonebookEntry object to represent it.
            
            <para/>
            Please note: To use/create this object the following conditions must be met:<para />
            - The device must have a WWAN modem installed.<para />
            - The PsionTeklogix::WWAN::WirelessWAN namespace MUST be initialized.  Use
              PsionTeklogix.WWAN.WirelessWAN.Initialize() to initialize it, and 
              PsionTeklogix.WWAN.WirelessWAN.Shutdown() when you are finished with the namespace.
              It will fail to initialize if it is initialized too many times without shutting it
              down. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.#ctor(PsionTeklogix.WWAN.PhonebookEntry)">
            <summary>
            Copy constructor for the PhonebookEntry class. Create another object to represent
            the same phsyical WWAN phonebook entry (No data is copied on the modem/SIM).
            </summary>
            <param name="entrySource">The phonebook entry to copy class data from.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.Dispose">
            <summary>
            Free all resources held by this object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.Dispose(System.Boolean)">
            <summary>
            Free managed and/or unmanaged resources.
            </summary>
            <param name="disposing">
            If true, frees managed resources as well
            </param>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.Finalize">
            <summary>
             Destructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.GetDataCodingScheme">
            <summary>
            Gets the data coding scheme for this PhonebookEntry.
            </summary>
            <returns>
            The datacoding scheme that was used to store this phonebook entry.
            </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.SetDataCodingScheme(PsionTeklogix.WWAN.DataCodingScheme)">
            <summary>
            Set the data coding scheme that is to be used to store this phonebook 
            entry.  The set datacoding scheme determines how many characters can 
            actually be stored in a phonebook entry.  For example, you can store 
            approximately twice as many characters using the Ascii8Bit encoding Vs. 
            the Unicode 16Bit encoding (but you will not be able to store unicode 
            characters). Use the Phonebook objects property "SupportedDataCodingSchemes" 
            to determine which encoding scheme(s) can be set in that phonebook's entries.
            </summary>
            <param name="value">
            The data coding scheme that is to be used to store this phonebook 
            entry. If the scheme is not supported, there will be no change.
             </param>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.GetName">
            <summary>
            Gets the name stored in this phonebook entry.
            </summary>
            <returns>The name stored in this phonebook entry.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.SetName(System.String)">
            <summary>
            Sets the name stored in this phonebook entry.
            </summary>
            <param name="value">The name to be stored in this phonebook entry.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.GetPhoneNumber">
            <summary>
            Gets the phone number stored in this phonebook entry.
            </summary>
            <returns>The phone number stored in this phonebook entry.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.PhonebookEntry.SetPhoneNumber(System.String)">
            <summary>
            Sets the phone number stored in this phonebook entry.
            </summary>
            <param name="value">The phone number to be stored in this phonebook entry.</param>
        </member>
        <member name="T:PsionTeklogix.WWAN.Phonebook">
            <summary>
            This class represents a WWAN phonebook (which is either stored in the WWAN modem 
            or SIM card). This class can be used to get/create/modify the phonebook entries
            and phonebook properties stored in any of the existing WWAN Phonebooks.
            <para/>
            A Phonebook object can not be created directly through a public constructor.  Use the
            Phonebook::GetPhonebooks() method to enumerate and return a list of all of the 
            accessible WWAN phonebooks.  Phonebook entries can be retrieved from any of the 
            returned Phonebook objects using the Phonebook::GetPhonebookEntries() method (which
            will return an array of PhonebookEntry objects).  Use the objects to read/modify
            the existing entires in the phonebook.
            <para />
            Please note: To use/create this object the following conditions must be met:<para />
            - The device must have a WWAN modem installed.<para />
            - The PsionTeklogix::WWAN::WirelessWAN namespace MUST be initialized.  Use
              PsionTeklogix.WWAN.WirelessWAN.Initialize() to initialize it, and 
              PsionTeklogix.WWAN.WirelessWAN.Shutdown() when you are finished with the namespace.
              It will fail to initialize if it is initialized too many times without shutting it
              down.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.#ctor(PsionTeklogix.WWAN.Phonebook)">
            <summary>
            Copy constructor for the Phonebook class. Create another object to represent
            the same phsyical WWAN phonebook (No data is copied on the modem/SIM).
            </summary>
            <param name="source">The phonebook to copy class data from.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.Dispose">
            <summary>
            Free all resources held by this object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.Dispose(System.Boolean)">
            <summary>
             Free managed and/or unmanaged resources.
            </summary>
            <param name="disposing">
             If true, frees managed resources as well
            </param>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.Finalize">
            <summary>
             Destructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.GetPhonebooks">
            <summary>
            Initialize and return an array of all available WWAN phonebooks (stored on 
            either the WWAN modem or SIM card).  This is the only public method available 
            to get the phonebook objects.
            </summary>
            <returns>The array of available phonebooks.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.GetPhonebookEntries">
            <summary>
            Initialize and return an array containing all phonebook entries sotred 
            in this phonebook.
            </summary>
            <returns>
            An array containing all of the phonebook entries stored in this phonebook.
            </returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.AddPhonebookEntry(System.String,System.String)">
            <summary>
            Create and add a phonebook entry into this phonebook (if the phonebook 
            is not full).
            </summary>
            <param name="newName">The name to store in the created entry.</param>
            <param name="newNumber">The phone number to store in the created entry.</param>
            <returns>The created/inserted PhonebookEntry object.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.Phonebook.RemovePhonebookEntry(PsionTeklogix.WWAN.PhonebookEntry)">
            <summary>
            Remove a phonebook entry from this phonebook and invalidate the object.
            Please Note:
             After calling this method, the PhonebookEntry object can no longer be used 
             since the object no longer cooresponds to a phsyical phonebook entry.
             Any attempt to use the object will result in an Exception.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.Writable">
            <summary>
            Is true if the phonebook is writable (If not, it is read-only).
            Please Note: Some phonebooks classified as read-only may in fact
            be writable, depending on the modem and sim card used. If you attempt
            to write to a read-only phonebook, the operation could take up to 60s to
            return (20s timeout with 3 retries), be warned.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.StoredOnSim">
            <summary>
            Is true if the phonebook is stored on a SIM card.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.StoredOnModem">
            <summary>
            Is true if the phonebook is stored on a modem.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.Volatile">
            <summary>Is true if the phonebook is volatile (it can be modified through 
            another interface without any notifications to the driver).</summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.PhonebookContent">
            <summary>
            The content type of the stored entries in this phonebook.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.SupportedDataCodingSchemes">
            <summary>
            Returns an array of DataCodingSchemes supported by this phonebook. If an
            unsupported data coding scheme is set in one of this phonebook's entries,
            the driver will use the default encoding scheme and some characters might be lost.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.NameStorageLimit">
            <summary>
            The storage capacity for the name field in any of this phonebook's entries 
            (in bytes). <para/>
            Please note: <para/>
             The actual number of characters that can be stored depends on
             the selected data coding scheme.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.PhoneNumberStorageLimit">
            <summary>
            The storage capacity for the phone number field in any of this phonebook's 
            entries (in bytes).<para/>
            Please note:<para/>
             The actual number of characters that can be stored depends on
             the selected data coding scheme.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.Phonebook.NumberOfPhonebookEntrySlots">
            <summary>
            The number of PhonebookEntry objects that can be phsyically stored in this
            phonebook.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCall">
            <summary>
            This class represents a WWAN voice call.  It can be used to view/control the state 
            of a voice call (For example, answer the call, hang up the call, get the caller ID 
            of the connected party.. etc.). 
            <para />
            This object can not be created through a public constructor.  There are two ways of
            creating a VoiceCall object:<para />
            - Create a VoiceCallManager and add a listener to the IncomingCallEvent. The 
              listener will receive a created voice call object representing any incoming call(s).<para />
            - Use the VoiceCall::DialNumber() static method to create a VoiceCall object that
              will be returned to the application in the "Dialing" state.<para />
            - Note: There is no API, at this time, to return a VoiceCall object for a voice call 
              already in progress. If you delete all instances of the created VoiceCall object, 
              you will lose fine control of that specific voice call.  The VoiceCallManager 
              object can still be used to perform global operations such as "hangup all".
            
            Please note: To use/create this object the following conditions must be met:<para />
            - The device must have a WWAN modem installed and be connected to a voice call 
              service provider.<para />
            - The PsionTeklogix::WWAN::WirelessWAN namespace MUST be initialized.  Use
              PsionTeklogix.WWAN.WirelessWAN.Initialize() to initialize it, and 
              PsionTeklogix.WWAN.WirelessWAN.Shutdown() when you are finished with the namespace.
              It will fail to initialize if it is initialized too many times without shutting it
              down.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.Dispose">
            <summary>
            Free all resources held by this object, events will no longer be generated.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.Finalize">
            <summary>
             Destructor, events will no longer be generated.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.Dispose(System.Boolean)">
            <summary>
            Free managed and/or unmanaged resources.
            Events will no longer be generated.
            </summary>
            <param name="disposing">
            If true, frees managed resources as well
            </param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.DialNumber(System.String)">
            <summary>
            Create a voice call and dial a phone number.  A voice call will be returned
            in the "Dialing" state.
            </summary>
            <param name="numberToDial">The phone number to dial</param>
            <returns>A VoiceCall object representing the initiated connection with 
            the dialed number.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.HangUp">
            <summary>
            Terminate this voice call.  The other party will be disconnected and this VoiceCall
            object will no longer be functional.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.AnswerIncoming">
            <summary>
            Answer the incoming call.
            <para />
            Please note: <para />
              If there are any active conversations and an incoming call, the active 
              conversation will be placed on hold and the incoming call will become 
              the new active conversation.  If at this time, there is also conversation 
              on hold, the active conversation and the held conversation will be combined 
              in the held state (All held parties will be able to converse without you in
              the created conference), the incoming call will become the new active call.
            <para />
              If you do not want to conference the active and held conversations, one of
              them MUST BE DISCONNECTED BEFORE ANSWERING the incoming call.  
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.RejectIncoming">
            <summary>
            Reject the incoming call.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.GetStatus">
            <summary>
            Get the current status of this voice call.  The status can change at any time
            for many reasons (such as other party hangs up).  Instead of polling this method, 
            it is recommended that an application creates an event handler and adds it to 
            the VoiceCall's StatusChangeEvent.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.ActivateAndHoldOthers">
            <summary>
            Activate this call and place all other calls on hold (in a conference).
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCall.GetOtherPartyCallerId">
            <summary>
            Get the caller Id of the other party.  If the other party has witheld their
            caller ID, the returned string will be empty.
            </summary>
        </member>
        <member name="E:PsionTeklogix.WWAN.VoiceCall.StatusChangeEvent">
            <summary>
            This status changed event is triggered by any change in this VoiceCall's status 
            (or flags).  Add your StatusChangeHandler implementation to this event to
            receive the events.  If your handler is not installed at the time the event occurred,
            the event will be missed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCall.StatusChangeHandler">
            <summary>
            Callback delegate, to receive VoiceCall events.  Register your event handler
            with the StatusChangeEvent event in the VoiceCall object you with to receive
            events from.
            </summary>
            <param name="sender">The VoiceCall object generating the event</param>
            <param name="updatedStatus">The new status of the VoiceCall</param>
            <param name="updatedFlags">The call flags for the VoiceCall</param>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCallManager">
            <summary>
            This class provides functonality to support WWAN voice calls. It can be used to 
            control the state of all voice calls in the system simultaneously or network
            settings that also affect every voice call (for example hangup all calls, hold 
            all calls, change the volume settings, get or set call forwarding settings in 
            the network, and many more).<para />
            
            In order to receive notification(s) about incoming calls, a VoiceCallManager must
            be created, and a listener must be added to the IncomingCallEvent. The listener 
            will receive a created VoiceCall object representing any incoming call(s). 
            Use this VoiceCall object to get the caller ID of the incoming party, answer, or 
            reject the call. <para />
            Please note: To use/create this object the following conditions must be met: <para />
             - The device must have a WWAN modem installed and be connected to a voice call 
               service provider. <para />
             - The PsionTeklogix::WWAN::WirelessWAN namespace MUST be initialized. Use 
               PsionTeklogix.WWAN.WirelessWAN.Initialize() to initialize it, and 
               PsionTeklogix.WWAN.WirelessWAN.Shutdown() when you are finished with the 
               namespace.  It will fail to initialize if it is initialized too many times 
               without shutting it down.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.#ctor">
            <summary>
            Constructor for the VoiceCallManager class.  <para />
            This method will throw an exception if the device does not have a WWAN modem
            installed, it is not connected to a WWAN network, or it is not initialized. 
            It may take some time (up to 30 seconds) to initialize after booting the device 
            or restoring it from hibernation.<para />
            Use the WirelessWAN::GetReadyState() method to test the ready state of the WWAN
            modem, or register for ready state changes through the 
            WirelessWAN::SetIndicationsListener() method.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.Dispose">
            <summary>
            Free all resources held by this object.
            Events will no longer be received from this object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.Dispose(System.Boolean)">
            <summary>
            Free managed and/or unmanaged resources.
            Events will no longer be received from this object.
            </summary>
            <param name="disposing">
            If true, frees managed resources as well
            </param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.Finalize">
            <summary>
            Destructor.
            Events will no longer be received from this object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SendDTMF(System.String)">
            <summary>
            Send any DTMF tone(s) to the active conversation. <para/>
            This method can be used to use an automated service that accepts DTMF
            tones (such as dialing an extension or using voicemail). <para/> 
            This method will throw an exception if there is no active call.
            </summary>
            <param name="toneToSend">The tone(s) to send.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.HangUpAll">
            <summary>
            Hang-up all active and held calls.
            Please note: Any unanswered waiting call will be automatically answered.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.HangUpHeld">
            <summary>
            Hang-up all held calls if there is no incoming waiting call. If there is an 
            incoming waiting call, this method will throw an exception.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.HangUpActive">
            <summary>
            Hang-up all active calls.
            Please note: Any unanswered waiting call will be automatically answered.
            If there is no waiting call, then any held conversation will become active.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.HoldActive">
            <summary>
            Place all active calls on hold.  These calls will be joined in a conference 
            with any conversation already on hold. If there is a waiting call, this 
            function will throw an exception.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SwapHeldAndActive">
            <summary>
            Swap any held conversation and active conversation.
            If there is an incoming waiting call, this method will throw an exception.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.RetrieveHeld">
            <summary>
            Place all held calls in the active state.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.Transfer">
            <summary>
            Connect all active and held calls and withdraw from the conversation. <para/>
            Please note: Some networks may not support this function.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.GetSpeakerVolume">
            <summary>
            Get the volume of the speaker (Range 0 - 100).
            </summary>
            <returns>The volume of the speaker (Range 0 - 100).</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SetSpeakerVolume(System.UInt32)">
            <summary>
            Set the volume of the speaker during a voice call (Range 0 - 100). <para/>
            Please note: the actual set value will be rounded to the nearest allowed value.
            This method will throw an exception if there are no voice calls in progress.
            </summary>
            <param name="volume">The volume to set (Valid range 0 - 100)</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.GetMicrophoneMute">
            <summary>
            Get the status of the mute setting for the michrophone.
            If mute is enabled, the other parties will not be able to hear you
            even if the conversation is in the active state.  You will be able to
            hear the other parties. <br/>
            Please Note: This method may return an incorrect setting if the Microphone
            was muted in a previous call and not re-set for the current call.  This is a known
            issue and will be fixed.  To workaround, set the mute state to the desired state 
            at the beginning of each voice call.
            </summary>
            <returns>true, if mute is enabled</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SetMicrophoneMute(System.Boolean)">
            <summary>
            Set the status of the mute setting for the microphone.
            If mute is enabled, the other parties will not be able to hear you
            even if the conversation is in the active state.  You will be able to
            hear the other parties.
            This method will throw an exception if there is no active call.
            </summary>
            <param name="enableMute">Set to true to enable mute.</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.GetForwardingData(PsionTeklogix.WWAN.VoiceForwardingReason,PsionTeklogix.WWAN.VoiceForwardingData@)">
            <summary>
            Get the current forwarding service status and forwarding data from the network.
            <para/>
            Data for only one forwarding reason can be requested at a time. <para/>
            Please note:  This method performs an interrogation to the WWAN network and may
            take a few seconds to return.
            </summary>
            <param name="reasonToLookup">The forwarding reason to request the status of</param>
            <param name="dataToGet">Forwarding data from the WWAN network</param>
            <returns>The forwarding status for the specified forwarding reason</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.EnableForwarding(PsionTeklogix.WWAN.VoiceForwardingData)">
            <summary>
            Enable call forwarding and set forwarding data on the network. <para/>
            Please note:  This method performs an interrogation to the WWAN network and may
            take a few seconds to return. <para/>
            Please note: This service may not be supported by all networks.
            </summary>
            <param name="dataToSet">The forwarding data to commit to the WWAN network</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.DisableForwarding(PsionTeklogix.WWAN.VoiceForwardingReason,System.Boolean)">
            <summary>
            Disable call forwarding (and erase set call forwarding data if requested) on 
            the network. <para/>
            Please note:  This method performs an interrogation to the WWAN network and may
            take a few seconds to return.
            </summary>
            <param name="reason">The reason that call forwarding will be disabled for</param>
            <param name="eraseDataOnServer">Set to true to erase the data from the network.  
            If set to false, the forwarding data can later be queried using GetForwardingData()
            then enabled using EnableForwarding()</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.GetCallWaitingEnabled">
            <summary>
            Get the state of the call waiting service.
            </summary>
            <returns>true if call waiting is enabled</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SetCallWaitingEnabled(System.Boolean)">
            <summary>
            Set the state of the call waiting service.  <para/>
            Please note: This service may not be supported by all networks.
            </summary>
            <param name="enableCallWaiting">Set to true to enable call waiting</param>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.GetOutgoingCallerId">
            <summary>
            Get the state of the outgoing caller Id.  <para/>
            If enabled, the dialed party will be able to see this device's phone number.
            </summary>
            <returns>The network setting of the outgoing caller ID functionality.</returns>
        </member>
        <member name="M:PsionTeklogix.WWAN.VoiceCallManager.SetOutgoingCallerId(PsionTeklogix.WWAN.VoiceCallerIdSetting)">
            <summary>
            Set the state of the outgoing caller ID. <para/>
            Please note: This service may not be supported by all networks.
            </summary>
            <param name="showOutgoingCallerId">The outgoing caller ID setting to set 
            in the network.</param>
        </member>
        <member name="E:PsionTeklogix.WWAN.VoiceCallManager.IncomingCallEvent">
            <summary>
            This event is triggered by any incoming voice call. Add your IncomingCallHandler 
            implementation to this event to receive the events. If your handler is not installed 
            at the time the event occurred, the event will be missed.
            
            Please note: There may be a PTX application running called WWANUI that also handles
            WWAN Voice notifications.  To prevent WWANUI from notifying the user about incoming
            calls (so that your application can do it on it's own), use the SetCurrentAccessFlags 
            method with the SuppressCallNotifications flag set.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCallManager.IncomingCallHandler">
            <summary>
            Callback delegate, to receive VoiceCallManager events.  Register your event handler
            with the IncomingCallEvent event.
            </summary>
            <param name="sender">The VoiceCallManager generating the event</param>
            <param name="incomingCall">The VoiceCall object representing the incoming
            voice call.  Use this object to answer the call.</param>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceForwardingMode.Enabled">
            <summary>
            Enable call forwarding
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceForwardingMode.Disabled">
            <summary>
            Disable call forwarding
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceForwardingMode.Erase">
            <summary>
            Remove all forwarding data from the network
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdStatus.Unknown">
            <summary>
            Unknown caller ID state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdStatus.Provisioned">
            <summary>
            The service can be used.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdStatus.NotProvisioned">
            <summary>
            The service can not be used.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdMode.Unknown">
            <summary>
            The status is "unknown" or "not provisioned".
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdMode.Permanent">
            <summary>
            The outgoing Caller ID is shown can NOT be changed by the user.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdMode.TemporaryShow">
            <summary>
            The outgoing Caller ID is by default shown, user can change this 
            through the Set command.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdMode.TemporaryHide">
            <summary>
            The outgoing Caller ID is by default not shown, user can change this 
            through the Set command.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdOwnStatus.Unknown">
            <summary>
            The service status is not known.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdOwnStatus.Default">
            <summary>
            Use the subscription default.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdOwnStatus.OwnShow">
            <summary>
            Show outgoing caller Id.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallManager.VoiceCallerIdOwnStatus.OwnHide">
            <summary>
            Hide outgoing caller Id.
            </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security">
             <summary>
              The Security class is used to change the security settings of a Psion Teklogix 
             device. Currently, the Security class can be used to perform the following 
             operations:
            
             * Set the security level of WindowsCE shell. Some Psion Teklogix devices can be 
               configured to allow different levels of access to their shells. Descriptions of 
               the various security levels can be found below.
             * Get the shell security level. Applications can retrieve the current shell 
               security level and use the value in order to restrict access to programs or 
               program features, based on the current security setting.
             * Register to receive a notification when the shell security level changes.
             * Pop up the shell security-related dialog boxes (configuration dialog, and the
               security level setting change dialog).
            
             As mentioned above, there are three levels of security:
             1. <b>User</b>. The <b>User</b> security level is the most restrictive access 
                level. Users are not allowed to access the Desktop, Programs, Settings, and Run 
                entries in the start menu. If the desktop is visible, the "My Computer" and
                "Recycle Bin" icons will not be usable. Most TekTerm parameters will not be visible.
             2. <b>Supervisor</b>. The <b>Supervisor</b> security level allows access to most 
                of the features of a Psion Teklogix device, with the exception of a few TekTerm 
                parameters and program features.
             3. <b>Teklogix</b>. The <b>Teklogix</b> security level allows access to all of the 
                features, programs, and parameters of a Psion Teklogix device.
             </summary>
             
             <remarks>
             Currently, the shell security settings are only available on the 7530, 7535, and 
             7525 (the WORKABOUT PRO).
             </remarks>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.eventList">
            Attached Event listeners. 
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.Dispose">
            @deprecated
            <summary>
            The Dispose method is used to release all internal static resources owned by
            the security API, stops any running threads, etc.
            </summary>
            <remarks>
            Deprecated. Remove the event handlers from ShellSecurityLevelChangeHandler
            instead. 
            
            Events will no longer be generated after this method is invoked.
            Failure to call this method before an application terminates may prevent the
            application from exiting properly.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.GetShellSecurityLevel">
             <summary>
             Returns the current shell security level configured on the Psion Teklogix device. 
             </summary>
             <remarks>
             Devices that support the shell security API use a default security level of User.
             </remarks>
            
             <returns>The current shell security level.</returns>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.SetShellSecurityLevel(PsionTeklogix.SystemPTX.Security.SecurityLevel,System.String)">
            <summary>
            Changes the current shell security level configured on the Psion Teklogix device. 
            Valid shell security levels are:
            * <b>User</b>
            * <b>Supervisor</b>
            * <b>Teklogix</b>
            </summary>
            <remarks>
            <p>Changing the security level requires that a valid password be supplied for the
            new level.</p>
            <p>When changing the security level to User, the password parameter
            is ignored.</p>
            </remarks>
            <param name="securityLevel">The shell security level to set.</param>
            <param name="password">The password for the security level specified.</param>
            <exception cref="T:System.ArgumentException">ArgumentException - If the password is null 
             or incorrect when attempting to change to a non-<b>User</b> security level.
            </exception>
            <exception name="ApplicationException">ApplicationException - If the device 
            does not support the shell security API.</exception>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.ShowShellSecurityConfigDialog">
             <summary>
             Launches the shell security configuration dialog, showing the current shell 
             security configuration settings.
             </summary>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
            
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.ShowShellSecurityChangeDialog">
             <summary>
             Launches the shell security change dialog. It allows a user to change the security
             level, rather than changing the level through the security API.
             </summary>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
            
        </member>
        <member name="E:PsionTeklogix.SystemPTX.Security.shellSecurityEvent">
            The shell security level change event. All subscribing functions will be
            notified when an shell security event occurs.
            <exception name="ArgumentException">If Attempting to deregister an 
            unregistered event handler. </exception>        
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security.SecurityLevel">
            Enumerates the security levels that can be configured on a Psion Teklogix device.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.User">
             The <b>User</b> security level is the most restrictive access level. Users 
            are not allowed to access the Desktop, Programs, Settings, and Run 
            entries in the start menu. If the desktop is visible, the "My Computer" 
            and "Recycle Bin" icons are not accessible. Most TekTerm parameters will 
            not be visible.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.Supervisor">
             The <b>Supervisor</b> security level allows access to most of the features 
            of a Psion Teklogix device, with the exception of a few TekTerm parameters 
            and program features.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.Teklogix">
             The <b>Teklogix</b> security level allows access to all of the features, 
            programs, and parameters of a Psion Teklogix device.
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security.ShellSecurityLevelChangeHandler">
            The ShellSecurityLevelChangeHandler delegate defines the signature for any
            function that is to be registered to receive shell security level change events.
        </member>
        <member name="T:PsionTeklogix.Peripherals.InterfaceEvent">
            <summary>
            This class is used to publish the events generated when a device interface
            is attached or detached. For more details <see cref="T:PsionTeklogix.Peripherals.Peripherals"/>.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.InterfaceEvent.InterfaceValue">
            <summary>
            The value that represents which interface status has changed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Function">
                /// <summary>
                /// The following functions represent various operations that can be performed by
                /// the keyboard driver when a particular scan code is mapped to one of the functions
                /// below.  </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Skip">
            <summary>
            A scan code remapping with the function set to 'Skip' will cause the scan
            code to be ignored. The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Blue">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Blue' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Orange">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Orange' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Shift">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Shift' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Control">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'CTRL' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Alt">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'ALT' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendUnshiftedCode">
            <summary>
            This function is used to pass a scan code to virtual key mapping to the
            keyboard driver, but forces the keyboard driver to treat the key as if the
            'SHIFT' key had been released. For example, a mapping of (scancode=0x50,
            virtual key=VK_EQUAL, function=SendUnshiftedCode) would cause the F5 key on
            a 56-key keyboard to generate a '|' key code, If the SHIFT key had not been
            previously pressed, this function will cause a WM_KEYDOWN message to be sent
            for the SHIFT key, followed by a WM_CHAR message for the right-arrow, followed
            by a WM_KEYUP message for the SHIFT key. This function will also release any
            pending one-shots set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendShiftedCode">
            <summary>
            This function is used to pass a scan code to virtual key mapping to the
            keyboard driver, but forces the keyboard driver to treat the key as if the
            'SHIFT' key had been pressed. For example, a mapping of (scancode=0x52,
            virtual key=VK_BACKSLASH, function=SendShiftedCode) would cause the 9 key on
            a 56-key keyboard to generate a '|' key code, If the SHIFT key had not been
            previously pressed, this function will cause a WM_KEYDOWN message to be sent
            for the SHIFT key, followed by a WM_CHAR message for the right-arrow, followed
            by a WM_KEYUP message for the SHIFT key. This function will also release any
            pending one-shots set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendCode">
            <summary>
            SendCode is the standard function used to create a scan code-to-virtual key
            remapping. For example, a mapping of (scancode=0x10, virtual key=VK_F2,
            function=SendCode) would cause the F1 key on a 56-key keyboard to generate a
            virtual key press of VK_F2 that would be passed unmodified to the keyboard driver.
            Existing modifier key states can modify how an application treats the virtual
            key code (i.e. one or more of the following has been pressed: ALT, CTRL, SHIFT,
            BLUE, ORANGE). This function will also release any pending one-shots set for
            any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ContrastUp">
            <summary>
            Increases the constrast level of the display. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any
            of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ContrastDown">
            <summary>
            Decreases the constrast level of the display. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.VolumeUp">
            <summary>
            Increases the volume of the beeper/wave device. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.VolumeDown">
            <summary>
            Decreases the volume of the beeper/wave device. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ScannerOn">
            <summary>
            Generates a trigger press, causing the scanner to fire while the key is held
            down. The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.TerminalOff">
            <summary>
            Places the terminal into suspend. The virtual key code will be ignored. This
            function will also release any pending one-shots set for any of the modifier
            keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightCycleUp">
            <summary>
            This function increases the backlight intensity until its maximum is reached.
            The intensity will then roll over to the minimum intensity allowed. The virtual
            key code will be ignored. This function will also release any pending one-shots
            set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Macro">
            <summary>
            This function remaps the selected scan code to a macro. When the scan code is
            generated by a user, it will be mapped to the configured sequence of key
            presses. The virtual key value specified in the remapping should be the index
            of the macro to map to. This function will also release any pending one-shots
            set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendUnicode">
            <summary>
            Generates a UNICODE character instead of a virtual key, for UNICODE symbols
            that do not have a virtual key equivalent. The virtual key field should
            contain the value of the UNICODE character to be generated.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightBrighter">
            <summary>
            This function increases the backlight intensity. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightDimmer">
            <summary>
            This function increases the backlight intensity. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightCycleDown">
            <summary>
            This function decreases the backlight intensity in small steps until the
            minimum backlight intensity is reached. The intensity will then roll over to
            the maximum intensity allowed. The virtual key code will be ignored. This
            function will also release any pending one-shots set for any of the modifier
            keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SystemPowerState">
            <summary>
            This function initiates a system reset according to the mode specified in the
            virtual key.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendDPadCode">
            <summary>
            This function can be used to alter the behaviour of the enter key, or one
            of the arrow keys on a Psion Teklogix Pocket PC device. If a remapping is
            created using this function for the enter key, it will cause the keyboard's
            enter key to behave like the enter key on a PocketPC DPad. On a PocketPC DPad,
            pressing the Enter key causes a WM_KEYDOWN message with a virtual key code
            of VK_F23 to be generated, followed by a WM_KEYDOWN message with the virtual
            key code of VK_RETURN. When the enter key is released, a WM_KEYUP message
            with the virtual key code VK_RETURN will be generated, followed by a WM_KEYUP
            message with the virtual key code VK_F23 up. This function can also be used
            to change the behaviour of the arrow keys, to make them behave like the arrow
            keys on a PocketPC DPad [a VK_F21 event will be generated in addition to the
            arrow virtual key event].
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.FunctionTrigger">
            <summary>
            Specifies that this scan code will be treated a trigger source (see the
            TriggerControl class). The value supplied with function will be treated
            as the trigger source ID value.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.FunctionWindowsMobileKey">
            <summary>
            This function gives access to keys that exists on Windows Mobile only.
            Currently only the following data is supported when this function is
            specified: VK_APP1,VK_APP2,VK_APP3,VK_APP4,VK_APP5,VK_APP6,VK_DONE.
            The numeric value of these values can be found in winuserm.h.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Unknown">
            Unmapped value(reserved)
            MUST be the last entry in this list 
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation">
            <summary>
            The SystemInformation class is used to obtain hardware and device-specific system 
            information  such as the machine ID, type, name, description, and memory usage. 
            This class also provides a method which allows the program to adjust the percentage 
            of RAM devoted to program memory (as opposed to storage memory).
            </summary>
            <remarks>
            System settings:
            
            * MachineType - The type of the current device: "Psion Teklogix 753x", etc.
            * MachineModel - The current device model: "7530", "7535", etc.
            * MachineUID - The unique machine identifier 
            * FlashSize - The total amount of flash memory on the device, in bytes.
            * FlashSizeFree - The amount of flash memory available for use by applications.
            * FlashUsed  - The amount of flash memory used by applications and the OS.
            * RAMSize - The total amount physical memory on the device, in bytes.
            * FreeProgramMemorySize - The  amount of memory available for new programs on the device,
              in bytes. See the SetProgramStorageMemoryRatio  method for more information.
            * FreeStorageMemorySize - The amount of memory available for new data on the device, in 
              bytes.
            * RAMSize - Total amount of RAM in the device, in bytes.
            * SoftwareVersion - The date code of the Windows CE image on the Psion Teklogix 
              device.
            * PCONVersion - The date code of the Peripheral Controller software on the Psion 
              Teklogix device.
            * BootCodeVersion - The date code of the boot code on the Psion Teklogix device.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.UserSuppliedMachineName">
            <summary>
            The machine name supplied by the user on the 
            device name tab of the system properties panel. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.UserSuppliedMachineDescription">
            <summary>
            The machine description supplied by the user
            on the device name tab of the system properties panel. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.SetProgramStorageMemoryRatio(System.UInt32)">
            <summary>
            Allows application developers to define the percentage of unused memory 
            devoted to storage memory (the object store).
            </summary>
            <returns>
              Success - The program storage memory ratio was successfully changed.
              Reboot - The program storage memory ratio was successfully changed,
                       but the change will not take effect until the terminal is rebooted.
            </returns>
            <remarks>
            The ratio is a percentage, passed as an unsigned integer. If a value of 40 is 
            passed, for instance, 40% of unused memory will be devoted to storage memory; 
            the remaining 60% will be used for program memory. 
            </remarks>
            <param name="ratio">
            Defines percentage of unused memory devoted to Storage Memory.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when ratio parameter larger 
            than 99
            </exception>        
            <exception cref="T:System.ApplicationException">If the program/storage ratio previously set 
            required a reboot.
            </exception>        
            <exception cref="T:System.ApplicationException">if The specified ratio is invalid. It must
             have  a range of 0-99. Also, a minimum of 256 KB must be assigned to program memory
             and object storage memory.
            </exception>        
            
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.GetPermanentDataStatus">
            <summary>Determines the current state of application data within the permanent
            storage.</summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
            <returns>Status of permanently-stored application data.</returns>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.GetPermanentData">
            <summary>Retrieves application data stored in this device's permanent storage.
            </summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
            <returns>Data from permanent storage.</returns>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])">
            <summary>Writes application data into this device's permanent storage. Before
            calling this routine, please read the full documentation for very important
            information.</summary>
            <remarks>
            <p>Some Psion Teklogix devices contain a storage medium, such as EEPROM
            memory, that allows storage of data that is retained even across cold boots.
            Not all devices contain this type of storage, and not all devices allow the
            application to store data in this permanent storage.  The routines that access
            application permanent data will throw not-supported exceptions when they are
            executed on any device that does not support this feature.</p>
            <p><b>Warning: This routine should not be used regularly.</b> Permanent
            storage hardware such as EEPROMs have a limited cycle life. After being
            rewritten many times -- sometimes even as low as 100 times -- they become
            unreliable, leading to data corruption. Calling this routine too many times
            can render a device unusable.</p>
            <p>The number of bytes of permanent storage available for application use is
            usually very small. For example, the first device to support this feature
            allows just 28 bytes of application data.</p>
            <p>There is only one area for application data, so if two or more applications
            access this feature to store different data, those applications will not be
            able to co-exist.</p>
            <p>Based on the above limitations, it may be advisable to find other means of
            storing your application data. For example, if you want to have a permanent
            unique identifier for a particular device, use <see cref="P:PsionTeklogix.SystemPTX.SystemInformation.MachineUID"/>
            instead.</p>
            </remarks>
            <param name="data">Data to write.</param>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.LockPermanentData">
            <summary>Locks the data previously stored with <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/>
            so that it cannot be overwritten. <b>Use with care, only if necessary!</b>
            </summary>
            <remarks><p>Once this routine is called, any attempt to store application data
            in permanent storage will result in an access-denied exception.</p>
            <p>This routine provides a medium level of security for the stored data. The
            Mobile Devices SDK will refuse to overwrite the stored data; however, there is
            no physical or electrical security over the storage device itself.</p>
            <p>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></p></remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineUID">
            <summary>
            Gets the machine's unique identifier.
            </summary>
            <remarks>
            The machine UID is used to uniquely identify a Psion Teklogix device. The format 
            of the unique identifier may change from device to device but the identifier
            is unique across all products. 
            <para>On the NetbookPro and 753x, the unique ID has two components, 
            the hardware serial number, and the terminal serial number. The hardware 
            serial number is the serial number placed on the main logic board. The 
            terminal serial number identifies the device as a whole. Both serial numbers 
            consist of a sequence of characters, not necessarily digits, and are separated 
            in the unique identifier by a dash ('-'). Mote that dash may also be present 
            in one or both of the serial numbers.
            </para>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineType">
            <summary>
            Gets the type of the device:
            NetBook Pro, 7535, etc.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineModel">
            <summary>
            Returns the device model, as a string. For example, "7530", "7535", etc.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashSize">
            <summary>
            Returns the total amount of flash memory on this device, in bytes.
            in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashSizeFree">
            <summary>
            Returns the amount of flash memory currently available for use on this device, 
            in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashUsed">
            <summary>
            Returns the amount of flash memory in use on this device, in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FreeProgramMemorySize">
            <summary>
            Gets the RAM Available for use;
            not used by the application (in bytes)
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FreeStorageMemorySize">
            <summary>
            Gets the number of 
            bytes of physical memory available. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.RAMSize">
            <summary>
            Gets the total number of bytes of physical memory present on the current device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.SoftwareVersion">
            @deprecated Get this information with SystemInformationList property.
            <summary>
            Returns the date code of the Windows CE image on the Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.PCONVersion">
            @deprecated Get this information with SystemInformationList property.
            <summary>
            Returns the date code of the Peripheral Controller software on the Psion 
            Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.BootCodeVersion">
            @deprecated Get this information with SystemInformationList property.
            <summary>
            Returns the date code of the boot code on the Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.SystemInformationList">
            <summary>
            Returns various properties of the Psion Teklogix device. 
            List is empty on error
            </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio">
            <summary>
            Result from setting the storage ratio.
            </summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio.Success">
            <summary>The program storage memory ratio was successfully changed.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio.Reboot">
             <summary>The program storage memory ratio was successfully changed,
            but the change will not take effect until the terminal is rebooted.</summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus">
            <summary>Contains information about any application data stored in permanent
            storage.</summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.capacity">
            <summary>The number of bytes of permanent storage available for
            application use.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.storedLength">
            <summary>The number of bytes of application data currently stored in
            permanent storage.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.locked">
            <summary>Indicates if the application data currently stored in permanent
            storage has been locked, and therefore cannot be overwritten.</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.ErrorEventArgs">
            <summary>
            Represents the arguments to an ErrorEvent.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.ErrorEventArgs.#ctor">
            <summary>
            Creates an instance of the ErrorEventArgs class.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerTransitionEventArgs">
            <summary>
            Arguments for power transition event.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerTransitionEventArgs.State">
            <summary>
            Gets power state.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerTransitionEventArgs.Name">
            <summary>
            Gets power state name.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_DCS">
            <summary>
             The Data Coding Scheme flags.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.DEFAULT">
            <summary>Message is in the default encoding scheme.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.GSM_7BIT">
            <summary>Message is 7-bit ASCII (GSM).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.ASCII_8BIT">
            <summary>Message is 8-bit ASCII.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.UNICODE_16BIT">
            <summary>Message is Unicode.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.BINARY_8BIT">
            <summary>Binary data.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_DCS.GSM_PDU">
            <summary>Binary PDU data for GSM.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX">
            <summary>
             Mailbox flags.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX.WRITABLE">
            <summary>Messages can be written to this mailbox (via WWAN_SMS_SEND_REQUEST).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX.SIM">
            <summary>This mailbox is stored on the SIM.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX.MODEM">
            <summary>This mailbox is stored in the modem.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX_CAPS">
            <summary>
             Class the defines the SMS mailbox capabilities.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX_CAPS.MailboxCaps">
            <summary>Mailbox flags.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX_CAPS.CurrentMessages">
            <summary>Number of messages present.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MAILBOX_CAPS.MaxMessages">
            <summary>Maximum number of messages that can be stored.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_CAPS">
            <summary>
             The SMS capabilities of the modem.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CAPS.SupportedDcs">
            <summary>Bitmask of supported DCSs.</summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_SMS_CAPS.MailBoxes">
            <summary>Array of mailbox information.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_LOCATION">
            <summary>
             Used to define the location of an SMS message.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_LOCATION.MailboxIndex">
            <summary> 0...MailboxCount-1 (WWAN_SMS_CAPS) </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_LOCATION.MessageIndex">
            <summary> 0...MaxMessages-1 (WWAN_MAILBOX_CAPS) </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP">
            <summary>
             Message timestamp.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Year">
            <summary>Year the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Month">
            <summary>Month the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Day">
            <summary>Day the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Hour">
            <summary>Hour the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Minute">
            <summary>Minute the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.Second">
            <summary>Second the message was received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_TIMESTAMP.TimeZone">
            <summary> Offset towards GMT in minutes (including sign)</summary>
            <remarks> The most significant bit is the sign (1 = negative value).</remarks>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_PRIORITY">
            <summary>
             The message priority.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_PRIORITY.WwanSmsPriorityNormal">
            <summary>Normal message priority.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_PRIORITY.WwanSmsPriorityInteractive">
            <summary>Interactive message priority.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_PRIORITY.WwanSmsPriorityUrgent">
            <summary>High message priority.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_PRIORITY.WwanSmsPriorityEmergency">
            <summary>Emergency priority.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_READ_REQUEST">
             <summary>
              Class used to read an SMS message.
             </summary>
             <remarks>
             <p>On Data Coding Scheme (DCS) conversions when reading messages:</p>
            
             <p>A text mode application (i.e. an application handling human-readable messages) should
             set RequestDcs to WWAN_SMS_DCS_UNICODE_16BIT. All text coding schemes (7-bit Default
             Alphabet and 16-bit Unicode for GSM, 8-bit ASCII for CDMA) are then returned converted
             to Unicode, messages in other coding schemes produce the result code
             WwanSmsResultDcsNoConversion.</p>
            
             <p>A machine-to-machine communication application should set RequestDcs to 
             WWAN_SMS_DCS_BINARY_8BIT. Messages in an 8-bit data coding scheme are then returned
             unchanged, messages in text coding schemes produce the result code
             WwanSmsResultDcsNoConversion.</p>
            
             <p>An application wanting to read all messages regardless of the data coding scheme
             should set RequestDcs to WWAN_SMS_DCS_DEFAULT. All text coding schemes (7-bit Default
             Alphabet and 16-bit Unicode for GSM, 8-bit ASCII for CDMA) are then returned converted
             to Unicode, messages in an 8-bit data coding scheme are then returned unchanged. For
             GSM only, certain system messages (PDUs other than SMS-DELIVER and SMS-SUBMIT) are
             returned with all message headers and without any decoding. The application has to
             evaluate ReadDcs in order to determine the encoding of the returned message
             (WWAN_SMS_DCS_UNICODE_16BIT, WWAN_SMS_DCS_BINARY_8BIT, or WWAN_SMS_DCS_GSM_PDU).</p>
            
             <p>For GSM only, an application that wants to use features that are not supported by the
             driver can set RequestDcs to WWAN_SMS_DCS_GSM_PDU and all messages are returned with
             all message headers and without any decoding. For CDMA modems this setting will
             produce the result code WwanSmsResultDcsNoConversion for all messages.</p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_REQUEST.Location">
            <summary></summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_REQUEST.RequestDcs">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_MSG_FLAGS">
            <summary>
             Message flags for received messages.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MSG_FLAGS.RECEIVED">
            <summary>Set for a received message; reset for a stored message.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MSG_FLAGS.PROCESSED">
            <summary>Set if a received message has been read or sent.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MSG_FLAGS.ADDR_VALID">
            <summary>Set if the address field contains valid data.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_MSG_FLAGS.TIME_VALID">
            <summary>Set if the timestamp field contains valid data.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT">
            <summary>
             Class used to report message data and related information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.Location">
            <summary>The message location.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.ReadDcs">
            <summary>Message encoding flags.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.Timestamp">
            <summary>When the message was sent/received.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.Address">
            <summary>If WWAN_SMS_MSG_FLAG_RECEIVED is set then this is the sender's 
            address ("From:"), otherwise it is the destination address ("To:").</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.MsgFlags">
            <summary>The message flags.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.Priority">
            <summary>The message priority.</summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.MessageData">
            <summary>The message data in binary.</summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_SMS_READ_RESULT.MessageText">
            <summary>The message data as text (check DCS flags first).</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_SEND_FLAGS">
            <summary>
             Flags used when sending messages.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_FLAGS.STORE">
            <summary>Store the message in a mailbox before sending it.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_FLAGS.ALLOW_ESC">
            <summary>For the GSM 7-bit alphabet allow the use of escaped characters</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_FLAGS.ALPHA_ADR">
            <summary>For GSM encode the address in alphanumeric format.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_FLAGS.CHECK_LEN">
            <summary>Do not quietly truncate messages, reject messages that are too long.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST">
             <summary>
              Class used to send an SMS message.
             </summary>
             <remarks>
             <p>On Data Coding Scheme (DCS) conversions when sending messages:</p>
            
             <p>A text mode application (i.e. an application handling human-readable messages) 
             should set SendDcs to WWAN_SMS_DCS_DEFAULT. The message buffer in this case must 
             contain Unicode characters. For GSM, if the message contains only ISO Latin 1 
             characters, Greek characters, or the Euro symbol then the message is sent in the 
             GSM 7-bit alphabet. Otherwise it is sent unmodified as Unicode. For CDMA, the 
             message is sent as 8-bit ASCII. An application that needs complete control over 
             the transmission encoding could set SendDcs to WWAN_SMS_DCS_GSM_7BIT, WWAN_SMS_DCS_ASCII_8BIT, 
             or WWAN_SMS_DCS_UNICODE_16BIT. Note that when SendDcs is set to WWAN_SMS_DCS_GSM_7BIT then
             all characters that can not be converted to the GSM 7-bit default alphabet are dropped.
             Note further that if WWAN_SMS_SEND_FLAG_ALLOW_ESC is set and a message is converted to
             the GSM 7-bit default alphabet then the character set is extended to include the Euro
             symbol as well as '{', '}', '[', ']', '\', '~', '^', and page break. However, each of
             the additional Unicode character is encoded as two 7-bit characters and the maximum
             number of characters in a messsage is thus reduced.</p>
            
             <p>A machine-to-machine communication application should set SendDcs to
             WWAN_SMS_DCS_BINARY_8BIT. The message buffer in this case must contain bytes which are
             transmitted unchanged.</p>
            
             <p>For GSM only, an application that wants to use features that are not supported by the
             driver can set SendDcs to WWAN_SMS_DCS_GSM_PDU. The message buffer in case must
             contain a GSM SMS PDU preceeded by the SMS centre address.</p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.Location">
            <summary>Ignored if WWAN_SMS_SEND_FLAG_STORE is not set; only MailboxIndex is 
            used otherwise (MessageIndex is chosen automatically)</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.Priority">
            <summary>Ignored for GSM, network-dependent for CDMA.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.SendDcs">
            <summary>Data Coding Scheme.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.Address">
            <summary>Destination address.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.SendFlags">
            <summary>Flags used to control how the message is sent.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.message">
            message to send
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.MessageText">
            <summary>
             The message text to send.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_SMS_SEND_REQUEST.MessageData">
            <summary>
             The message data to send.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_CFG_FLAGS">
            <summary>
             SMS configuration flags.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CFG_FLAGS.TPRD">
            <summary>Set TP-Reject-Duplicates.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CFG_FLAGS.TPRP">
            <summary>Set TP-Reply-Path.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CFG_FLAGS.TPSRR">
            <summary>Set TP-Status-Report-Request.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CFG_FLAGS.VP_VALID">
            <summary>The validity period is valid.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SMS_CONFIG">
            <summary>
             Contains SMS configuration information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CONFIG.SmscAddress">
            <summary>SMS Address.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CONFIG.ConfigFlags">
            <summary>SMS Configuration flags.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CONFIG.ValiditySeconds">
            <summary>Validity period in seconds. Only valid if the appropriate configuration
            flag is valid.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CONFIG.EncodedPid">
            <summary></summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SMS_CONFIG.EncodedDcs">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.Win32">
            <summary>
            Win32 Registry API definitions.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.HKEY_CURRENT_USER">
            <summary>
            Key Handle
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.HKEY_LOCAL_MACHINE">
            <summary>
            Key Handle
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.HKEY_CLASSES_ROOT">
            <summary>
            Key Handle
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.HKEY_USERS">
            <summary>
            Key Handle
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.KEY_NOTIFY">
            <summary>
            Registry Specific Access Rights
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.READ_CONTROL">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.KEY_QUERY_VALUE">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.KEY_ENUMERATE_SUB_KEYS">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.KEY_SET_VALUE">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.ERROR_FILE_NOT_FOUND">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_OPTION_NON_VOLATILE">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.KEY_ALL_ACCESS">
            <summary>
            Registry Specific Access Rights.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_BINARY">
            <summary>
            Predefined Value Types.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_EXPAND_SZ">
            <summary>
            Predefined Value Types.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_DWORD">
            <summary>
            Predefined Value Types.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_SZ">
            <summary>
            Predefined Value Types.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_MULTI_SZ">
            <summary>
            Predefined Value Types.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_CREATED_NEW_KEY">
            <summary>
            New Registry Key created
            </summary>
        </member>
        <member name="F:PsionTeklogix.Configuration.Win32.REG_OPENED_EXISTING_KEY">
            <summary>
            Existing Key opened
            </summary>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegCloseKey(System.UInt32)">
            <summary>
            This function releases the handle of the specified key.
            </summary>
            <param name="hKey">
            [in] Handle to the open key to close. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero
            error code defined in Winerror.h indicates failure.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegCreateKeyEx(System.UInt32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.UInt32@,System.Int32@)">
            <summary>
            This function creates the specified key. 
            If the key already exists in the registry, the function 
            opens it.
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or one of the following predefined reserved handle values: 
            <list type="bullet"><item>HKEY_CLASSES_ROOT</item> 
            <item>HKEY_CURRENT_USER </item>
            <item>HKEY_LOCAL_MACHINE </item>
            <item>HKEY_USERS </item></list>
            </param>
            <param name="lpSubKey">
            [in] Pointer to a null-terminated string specifying the 
            name of a subkey that this function opens or creates. 
            The subkey specified must be a subkey of the key identified 
            by the hKey parameter. This subkey must not begin with the 
            backslash character (\). If the parameter is NULL, then 
            RegCreateKeyEx behaves like RegOpenKey where it opens the 
            key specified by hKey. In Windows CE, the maximum length of 
            a key name is 255 characters, not including the terminating NULL character. 
            You can also only nest 16 levels of sub-keys in Windows CE. 
            </param>
            <param name="lpReserved">
            [in] Reserved; set to 0. 
            </param>
            <param name="lpClass">
            [in] Pointer to a null-terminated string that specifies the
             class (object type) of this key. This parameter is ignored
             if the key already exists. In Windows CE, the maximum 
             length of a class string is 255 characters, not including
             the terminating NULL character. 
            </param>
            <param name="dwOptions">
            [in] Ignored; set to 0 to ensure compatibility with future 
            versions of Windows CE. 
            </param>
            <param name="samDesired">
            [in] Ignored; set to 0 to ensure compatibility with future 
            versions of Windows CE. 
            </param>
            <param name="lpSecurityAttributes">
            [in] Set to NULL. Windows CE automatically assigns the key 
            a default security descriptor. 
            </param>
            <param name="phkResult">
            [out] Pointer to a variable that receives a handle to the 
            opened or created key. When you no longer need the returned
            handle, call the RegCloseKey function to close it. 
            </param>
            <param name="lpdwDisposition">
            [out] Pointer to a variable that receives disposition values. 
            The folowing list shows possible values for this parameter. Value Description 
            REG_CREATED_NEW_KEY The key did not exist and was created. 
            REG_OPENED_EXISTING_KEY The key existed and was simply opened without being changed. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegDeleteKey(System.UInt32,System.String)">
            <summary>
            This function deletes a named subkey from the specified registry key. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or one of the following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            The key specified by the lpSubKey parameter must be a subkey
            of the key identified by hKey. 
            </param>
            <param name="lpSubKey">
            [in] Pointer to a null-terminated string specifying the 
            name of the key to delete. This parameter cannot be NULL. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code defined
            in Winerror.h indicates failure. To get a generic description
            of the error, call FormatMessage with the FORMAT_MESSAGE_FROM_SYSTEM
            flag set. The message resource is optional; therefore,
            if you call FormatMessage it could fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegDeleteValue(System.UInt32,System.String)">
            <summary>
            This function removes a named value from the specified 
            registry key.
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or any of the following 
            predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            </param>
            <param name="lpValueName">
            [in] Pointer to a null-terminated string that names the 
            value to remove. If this parameter is NULL or points to an 
            empty string, the default value of the key is removed. 
            A default value is created by calling RegSetValueEx with a 
            NULL or empty string value name. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegEnumKeyEx(System.UInt32,System.Int32,System.Char[],System.Int32@,System.Int32,System.Char[],System.Int32@,System.Int32)">
            <summary>
            This function enumerates subkeys of the specified open
            registry key. RegEnumKeyEx retrieves information about one
            subkey each time it is called and it retrieves the class 
            name of the subkey and the time it was last modified. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or one of the
            following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            The enumerated keys are subkeys of the key identified by
            hKey. 
            </param>
            <param name="dwIndex">
            [in] Index of the subkey to retrieve. This parameter should
            be zero for the first call to the RegEnumKeyEx function and then
            incremented for subsequent calls. 
            Because subkeys are not ordered, any new subkey will have
            an arbitrary index. This means that the function may return subkeys in any order. 
            </param>
            <param name="lpName">
            [out] Pointer to a buffer that receives the name of the
            subkey, including the terminating null character.
            The function copies only the name of the subkey,
            not the full key hierarchy, to the buffer. 
            </param>
            <param name="lpcbName">
            [in, out] Pointer to a variable that specifies the size,
            in characters, of the buffer specified by the lpName
            parameter. This size should include the terminating null
            character. When the function returns, the variable pointed
            to by lpcbName contains the number of characters stored in
            the buffer. The count returned does not include the terminating
            null character. 
            </param>
            <param name="lpReserved">
            [in] Reserved; set to NULL. 
            </param>
            <param name="lpClass">
            [out] Pointer to a buffer that contains the class of the
            enumerated subkey when the function returns. 
            This parameter can be NULL if the class is not required. 
            </param>
            <param name="lpcbClass">
            [in, out] Pointer to a variable that specifies the size,
            in characters, of the buffer specified by the lpClass parameter.
            The size should include the terminating null character. 
            When the function returns, lpcbClass contains the number of 
            characters stored in the buffer. The count returned does not
            include the terminating null character. This parameter can be
            NULL only if lpClass is NULL. 
            </param>
            <param name="lpftLastWriteTime">
            [in] Ignored; set to NULL. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A return value of 
            ERROR_MORE_DATA indicates that the lpName buffer is too 
            small to receive the name of the key. A nonzero error code
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegEnumValue(System.UInt32,System.Int32,System.Char[],System.Int32@,System.Int32,System.Int32@,System.Byte[]@,System.Int32@)">
            <summary>
            This function enumerates the values for the specified open 
            registry key. RegEnumValue copies one indexed value name 
            and data block for the key each time it is called. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or one of the following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            The enumerated values are associated with the key 
            identified by hKey. 
            </param>
            <param name="dwIndex">
            [in] Index of the value to retrieve. This parameter should 
            be zero for the first call to the RegEnumValue function and 
            then be incremented for subsequent calls. 
            Because values are not ordered, any new value will have an 
            arbitrary index. This means that the function may return 
            values in any order. 
            </param>
            <param name="lpValueName">
            [out] Pointer to a buffer that receives the name of the 
            value, including the terminating null character. 
            </param>
            <param name="lpcbValueName">
            [in, out] Pointer to a variable that specifies the size, 
            in characters, of the buffer pointed to by the lpValueName 
            parameter. This size should include the terminating null 
            character. When the function returns, the variable pointed 
            to by lpcbValueName contains the number of characters 
            stored in the buffer. The count returned does not include 
            the terminating null character. 
            </param>
            <param name="lpReserved">
            [in] Reserved; set to NULL. 
            </param>
            <param name="lpType">
            [out] Pointer to a variable that receives the type code for the value entry. The following table shows the possible values for type code. Value Description 
            REG_BINARY Specifies binary data in any form. 
            REG_DWORD Specifies a 32-bit number. 
            REG_DWORD_LITTLE_ENDIAN Specifies a 32-bit number in little-endian format. This is equivalent to REG_DWORD. 
            In little-endian format, a multi-byte value is stored in memory from the lowest byte (the little end) to the highest byte. For example, the value 0x12345678 is stored as (0x78 0x56 0x34 0x12) in little-endian format.
            REG_DWORD_BIG_ENDIAN Specifies a 32-bit number in big-endian format. 
            In big-endian format, a multi-byte value is stored in memory from the highest byte (the big end) to the lowest byte. For example, the value 0x12345678 is stored as (0x12 0x34 0x56 0x78) in big-endian format.
            REG_EXPAND_SZ Specifies a null-terminated string that contains unexpanded references to environment variables (for example, %PATH%). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions. 
            REG_LINK Specifies a Unicode symbolic link. Used internally; applications should not use this type. 
            REG_MULTI_SZ Specifies an array of null-terminated strings, terminated by two null characters. 
            REG_NONE No defined value type. 
            REG_RESOURCE_LIST Specifies a device-driver resource list. 
            REG_SZ Specifies a null-terminated Unicode string.  
            The lpType parameter can be NULL if the type code is not required. 
            </param>
            <param name="lpData">
            [out] Pointer to a buffer that receives the data for the 
            value entry. This parameter can be NULL if the data is not 
            required. 
            </param>
            <param name="lpcbData">
            [in, out] Pointer to a variable that specifies the size, 
            in bytes, of the buffer pointed to by the lpData parameter. When the function returns, the variable pointed to by the lpcbData parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if lpData is NULL. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegOpenKeyEx(System.UInt32,System.String,System.Int32,System.Int32,System.UInt32@)">
            <summary>
            This function opens the specified key. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or any of the following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            Windows CE does not support the HKEY_CURRENT_CONFIG, 
            HKEY_PERFORMANCE_DATA, or HKEY_DYN_DATA predefined reserved
            handle values. 
            </param>
            <param name="lpSubKey">
            [in] Pointer to a null-terminated string containing the 
            name of the subkey to open. If this parameter is NULL or a 
            pointer to an empty string, the function will open a new 
            handle to the key identified by the hKey parameter. In this 
            case, the function will not close the handles previously 
            opened. 
            </param>
            <param name="ulOptions">
            [in] Reserved; set to 0. 
            </param>
            <param name="samDesired">
            [in] Not supported; set to 0. 
            </param>
            <param name="phkResult">
            [out] Pointer to a variable that receives a handle to the 
            opened key. When you no longer need the returned handle, 
            call the RegCloseKey function to close it. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegQueryInfoKey(System.UInt32,System.Char[],System.Int32@,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            This function retrieves information about a specified registry key. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or any of the following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            </param>
            <param name="lpClass">
            [out] Pointer to a buffer that receives the key's class 
            name. This parameter can be NULL. 
            </param>
            <param name="lpcbClass">
            [in, out] Pointer to a variable that specifies the size, in 
            characters, of the buffer pointed to by the lpClass 
            parameter. This size should include the terminating null 
            character. When the function returns, this variable 
            contains the length of the class string stored in the 
            buffer. The count returned does not include the terminating 
            null character. If the buffer is not big enough, the 
            function returns ERROR_MORE_DATA, and the variable contains 
            the size of the string, in characters, without counting the 
            null character. 
            If lpClass is NULL, lpcbClass can be NULL. 
            If the lpClass parameter is a valid address, but this 
            parameter is not, the function returns ERROR_INVALID_PARAMETER. 
            </param>
            <param name="lpReserved">
            [in] Reserved; set to NULL. 
            </param>
            <param name="lpcSubKeys">
            [out] Pointer to a variable that receives the number of 
            subkeys contained by the specified key. This parameter can 
            be NULL. 
            </param>
            <param name="lpcbMaxSubKeyLen">
            [out] Pointer to a variable that receives the length, in 
            characters, of the key's subkey with the longest name. 
            The count returned does not include the terminating null 
            character. This parameter can be NULL. 
            </param>
            <param name="lpcbMaxClassLen">
            [out] Pointer to a variable that receives the length, 
            in characters, of the longest string specifying a subkey 
            class. The count returned does not include the terminating 
            null character. This parameter can be NULL. 
            </param>
            <param name="lpcValues">
            [out] Pointer to a variable that receives the number of 
            values associated with the key. This parameter can be NULL. 
            </param>
            <param name="lpcbMaxValueNameLen">
            [out] Pointer to a variable that receives the length, in 
            characters, of the key's longest value name. The count 
            returned does not include the terminating null character. 
            This parameter can be NULL. 
            </param>
            <param name="lpcbMaxValueLen">
            [out] Pointer to a variable that receives the length, in 
            bytes, of the longest data component among the values of 
            the key. This parameter can be NULL. 
            </param>
            <param name="lpcbSecurityDescriptor">
            [in] Not used; set to NULL.
            </param>
            <param name="lpftLastWriteTime">
            [in] Ignored; set to NULL. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegQueryValueEx(System.UInt32,System.String,System.Int32,System.Int32@,System.Byte[],System.Int32@)">
            <summary>
            This function retrieves the type and data for a specified 
            value name associated with an open registry key. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or any of the following predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            </param>
            <param name="lpValueName">
            [in] Pointer to a string containing the name of the value 
            to query. If this parameter is NULL or an empty string, 
            the function retrieves the type and data for the key's 
            unnamed value. A registry key does not automatically have 
            an unnamed or default value. Unnamed values can be of any 
            type. 
            </param>
            <param name="lpReserved">
            [in] Reserved; set to NULL. 
            </param>
            <param name="lpType">
            [out] Pointer to a variable that receives the type of data 
            associated with the specified value. The following table 
            shows the possible values that lpType can return. 
            Value Description 
            REG_BINARY Specifies a binary data in any form. 
            REG_DWORD Specifies a 32-bit number. 
            REG_DWORD_LITTLE_ENDIAN Specifies a 32-bit number in little-endian format. This is equivalent to REG_DWORD. 
            In little-endian format, a multi-byte value is stored in memory from the lowest byte (the little end) to the highest byte. For example, the value 0x12345678 is stored as (0x78 0x56 0x34 0x12) in little-endian format.
            REG_DWORD_BIG_ENDIAN Specifies a 32-bit number in big-endian format. 
            In big-endian format, a multi-byte value is stored in memory from the highest byte (the big end) to the lowest byte. For example, the value 0x12345678 is stored as (0x12 0x34 0x56 0x78) in big-endian format.
            REG_EXPAND_SZ Specifies a null-terminated string that contains unexpanded references to environment variables. For example, %PATH%. 
            REG_LINK Specifies a Unicode symbolic link. Used internally; applications should not use this type. 
            REG_MULTI_SZ Specifies an array of null-terminated strings, terminated by two null characters. 
            REG_NONE No defined value type. 
            REG_RESOURCE_LIST Specifies a device-driver resource list. 
            REG_SZ Specifies a null-terminated Unicode string. 
            The lpType parameter can be NULL if the type is not required. 
            </param>
            <param name="lpData">
            [out] Pointer to a buffer that receives the value's data. 
            This parameter can be NULL if the data is not required. 
            </param>
            <param name="lpcbData">
            [in, out] Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the lpData parameter. When the function returns, this variable contains the size of the data copied to lpData. 
            If the data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type, then lpcbData will also include the size of the terminating null character. 
            The lpcbData parameter can be NULL only if lpData is NULL. 
            If the buffer specified by lpData parameter is not large enough to hold the data, the function returns the value ERROR_MORE_DATA, and stores the required buffer size, in bytes, into the variable pointed to by lpcbData. 
            If lpData is NULL, and lpcbData is non-NULL, the function returns ERROR_SUCCESS, and stores the size of the data, in bytes, in the variable pointed to by lpcbData. This lets an application determine the best way to allocate a buffer for the value's data. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code 
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Win32.RegSetValueEx(System.UInt32,System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            This function stores data in the value field of an open 
            registry key. It can also set additional value and type 
            information for the specified key. 
            </summary>
            <param name="hKey">
            [in] Handle to a currently open key or any of the following
            predefined reserved handle values: 
            HKEY_CLASSES_ROOT 
            HKEY_CURRENT_USER 
            HKEY_LOCAL_MACHINE 
            HKEY_USERS 
            </param>
            <param name="lpValueName">
            [in] Pointer to a string containing the name of the value 
            to set. If a value with this name is not already present in
            the key, the function adds it to the key. If this parameter
            is NULL or an empty string, the function sets the type and 
            data for the key's unnamed value. Registry keys do not have
            default values, but they can have one unnamed value, which 
            can be of any type. The maximum length of a value name is 
            255, not including the terminating NULL character. 
            </param>
            <param name="lpReserved">
            [in] Reserved; must be zero. 
            </param>
            <param name="lpType">
            [in] Type of information to be stored as the value's data. The following table shows the possible values for dwType. Value Description 
            REG_BINARY Specifies binary data in any form. 
            REG_DWORD Specifies a 32-bit number. 
            REG_DWORD_LITTLE_ENDIAN Specifies a 32-bit number in little-endian format. This is equivalent to REG_DWORD. 
            In little-endian format, a multi-byte value is stored in 
            memory from the lowest byte (the little end) to the highest
            byte. For example, the value 0x12345678 is stored as 
            (0x78 0x56 0x34 0x12) in little-endian format.
            REG_DWORD_BIG_ENDIAN Specifies a 32-bit number in big-endian format. 
            In big-endian format, a multi-byte value is stored in memory from
            the highest byte (the big end) to the lowest byte. 
            For example, the value 0x12345678 is stored as 
            (0x12 0x34 0x56 0x78) in big-endian format.
            REG_EXPAND_SZ Specifies a null-terminated string that 
            contains unexpanded references to environment variables 
            (for example, %PATH%). 
            REG_LINK Specifies a Unicode symbolic link. Used internally;
            applications should not use this type. 
            REG_MULTI_SZ Specifies an array of null-terminated strings,
            terminated by two null characters. 
            REG_NONE No defined value type. 
            REG_RESOURCE_LIST Specifies a device-driver resource list. 
            REG_SZ Specifies a null-terminated Unicode string. Do not use the REG_SZ type to store hard-coded paths to the system root. 
            </param>
            <param name="lpData">
            [in] Pointer to a buffer containing the data to be stored 
            with the specified value name. 
            </param>
            <param name="cbData">
            [in] Size, in bytes, of the information pointed to by the 
            lpData parameter. If the data is of type REG_SZ, 
            REG_EXPAND_SZ, or REG_MULTI_SZ, cbData must include the 
            size of the terminating null character. The maximum size 
            of data allowed in Windows CE is 4 KB. 
            </param>
            <returns>
            ERROR_SUCCESS indicates success. A nonzero error code
            defined in Winerror.h indicates failure. To get a generic 
            description of the error, call FormatMessage with the 
            FORMAT_MESSAGE_FROM_SYSTEM flag set. The message resource 
            is optional; therefore, if you call FormatMessage it could 
            fail.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver">
            <summary>
            The ScannerServicesDriver class implements a driver for the Scanner Service 
            used in the NetBook Pro, 753x.
            </summary>
            <remarks>
            <p>Note that not all the properties of the Scanner Services have been implemented. 
            This is due to the fact that some of these properties will probably be implemented
            programatically. If you require the use of the additional properties then
            refer to the Scanner Services Programming Guide and use the SetProperty method to
            implement the custom property.</p>
            <p> The ApplySettingChanges method now must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerDriverBase">
            <summary>
            An interface that all Scanner drivers have to implement.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerDriverBase.Scan">
            <summary>
            The Scan method will initate a software scan.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScannerDriverBase.Scanner">
            <summary>
            Gets/Sets a reference to the Scanner instance.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerDriverBase.Device">
            <summary>
            Gets/Sets the device the scanner is connected to.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerDriverBase.SettingSection">
            <summary>
            Gets/Sets the setting section that the will be used to
            configure the driver.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerDriverBase.Enabled">
            <summary>
            Gets/Sets the current scanner status.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.#ctor">
            <summary>
            Creates an instance of  ScannerServicesDriver
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SetProperty(System.String,System.Object)">
            <summary>
            Set custom scanner property.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            <p>Possible property names can be retrieved by GetSettingName() iterating from
            0 to TotalSettingCount-1.</p>
            </remarks>
            <param name="parameter">Name of property.</param>
            <param name="value">Value that custom propety will be set to.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to pass
            command to scanner driver.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.GetProperty(System.String)">
            <summary>
            Get custom scanner property.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            <p>Possible property names can be retrieved by GetSettingName() iterating from
            0 to TotalSettingCount-1.</p> 
            </remarks>
            <param name="parameter">Name of property.</param>
            <returns>Value of property returned or null if not set.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to 
            pass command to scanner driver.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ApplySettingChanges">
            <summary>
            Apply the setting changes that were made by SetProperty calls. 
            </summary>
            <remarks>
            The setting changes made by the SetProperty method will not take effect until 
            this method is called, or the device is rebooted.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.DisableScanners">
            <summary>
            Disables all scanners integrated in the device. This is done thorugh Scanner Services.
            </summary>
            <returns>
            If successful, returns true. Otherwise returns, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.EnableScanners">
            <summary>
            Enables all scanners integrated in the device . This is done
            through Scanner Services.
            </summary>
            <returns>
            If successful returns true, otherwise returns false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Register">
            <summary>
            Registers ScannerServicesDriver with ScannerServices. This will allow 
            for the Scanner data to be retrieved.
            </summary>
            <returns>
            If successful it returns true, otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Deregister">
            <summary>
            Un-Registers ScannerServicesDriver with ScannerServices.
            </summary>
            <returns>
            If successfull, returns true otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Scan">
            <summary>
            Called when a scan has been requested.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to register
            for scanner device driver notifications.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.OnScanComplete(System.Int32,System.Byte[],System.String)">
            <summary>
            Called when a scan has completed. Pass data on to parent Scanner.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Dispose">
            <summary>
            Explicitly release resources and cleanup.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Close">
            <summary>
            Synonym for Dispose()
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Dispose(System.Boolean)">
            <summary>
            Do the work of disposing managed objects and freeing Win32 resources
            </summary>
            <param name="disposing">true if explicitly called by user code.
            false if implicitly called by garbage collector.</param>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Finalize">
            <summary>
            Finalization code called implicitly by garbage collector.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.GetSettingName(System.Int32)">
            <summary>
            Gets the name of the scanner setting based on the index.
            </summary>
            <param name="settingIndex">
            An integer that represents an index of a setting.
            </param>
            <returns>
            A scanner setting name based on the index, represented as a string.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to obatain
            name of the scanner property based on its index.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Device">
            <summary>
            The Device property allows applications to determine the name of the driver 
            the object is controlling. This property cannot be changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.IsScannerPresent">
            <summary>
            Used to determine if one or more barcode scanners are present on the target 
            device.
            </summary>
            <returns>
            true if one or more scanners are present on the current device; false otherwise.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ExternalScannerType">
             <summary>
             Returns the name of the external scanner found on the target Psion Teklogix device.
             </summary>
             <remarks>
             <p>Valid scanner names include:
              * No external scanner
              * Non-decoded scanner
              * Serial scanner
            
             Other values may be reported in the future.</p>
             </remarks>
             <returns>The name of the external scanner present, or "No external scanner" if the
              device does not currently have an attached external scanner. 
             </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.InternalScannerType">
             <summary>
              Returns the name of the internal scanner found on the target Psion Teklogix device.
             </summary>
             <remarks>
             <p>Valid scanner names include:
              * Not configured
              * No internal scanner
              * Symbol 1200 HP
              * Symbol 1200 LR
              * Symbol 1200 ALR
              * Symbol 1200 WA
              * Symbol 1223 HP
              * Symbol 1223 LR
              * Symbol 1223 ALR
              * Symbol 1223 WA
              * Symbol 1224 HP
              * Symbol 1524 ER
              * Symbol 2223
              * Symagery SX4000 (ST)
              * Symagery SX4000 (ULR)
              * Symagery SX4000 (UHD)
              * Symagery SX5303 (ST)
              * Symagery SX5303 (ULR)
              * Symagery SX5303 (UHD)
              * Rfid Sirit OEM 186
              * Rfid Sirit OEM 187
              * Symbol 923 HP
              * HHP IT4080
              * Symagery ImagePak 5390
              * Unknown type 
            
             Other values may be reported in the future.</p>
             </remarks>
             <returns> The name of the internal scanner present, or "No internal scanner" if the
              device does not currently have an internal scanner. or "Not configured" if the
              device has not yet been configured to report a particular scanner type.
             </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.IsSupported">
            <summary>
            Determines whether or not this device supports barcode scanning.
            </summary>
            <remarks>
            The fact that the Scanner class is supported does not imply that a barcode 
            scanner is actually present (see the isScannerPresent method).
            </remarks>
            <returns>
            true if this device has scanner support; false otherwise.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SettingSection">
            <summary>
            Gets/Sets the setting section that the will be used to
            configure the driver.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Enabled">
            <summary>
            Gets/Sets whether the scanner driver is being enabled/disabled.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanResult">
            <summary>
            Gets/Sets the Scan Result property. When this parameter is enabled (set to 1), 
            the type of bar code and the result of the scan appear on the terminal screen. 
            Note that this information is only displayed after a successful decode and only as 
            long as the scanner trigger is pressed. When the trigger is released, this information is cleared from the screen.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanIndicator">
            <summary>
            Gets/Sets Scan Indicator property. 
            When this parameter is enabled (set to 1), the laser warning logo appears on the
            display whenever the scanner is activated. 
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanResultTime">
            <summary>
            Gets/Sets Scan result Time Property.
            The value assigned to the "Result Time" parameter determines how long the scan
            results of a successful scan are displayed on the terminal screen. Time is measured
            in seconds, and a value of 0 (zero) disables the parameter.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanBeep">
            <summary>
            Gets or sets whether the scanner will beep after a successful barcode scan.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanFailedBeep">
            <summary>
            Gets or sets whether the scanner will beep after a failed barcode scan.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ClickTime">
            <summary>
            Gets or sets the ClickTime property.
            </summary>
            <remarks>
            <p>This parameter controls the maximum gap time (in milliseconds) for a double-click.
            If the time between the first and second clicks of the scanner trigger is within this
            time, it is considered a double-click. The allowable range is 0 to 1000. A value of
            zero disables this feature.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ClickData">
            <summary>
            Gets/Sets Click/Data property.
            For both integrated and external scanners, this parameter determines which
            character is sent to TESS or ANSI following a double-click. Enter the UNICODE
            value of the character desired from 0 to 65535. Entering an ASCII value [0-255] 
            is also acceptable.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.DotTime">
            <summary>
            @deprecated Please use Get/SetProperty("NonDecoded\\Dot Time", value) instead.                
             Gets or sets how long the targeting dot time will remain on for all non-decoded
            barcode scanners.
            </summary>
            <remarks>
            <p> The value selected for DotTime determines how long (in milliseconds) the
            targeting dot will remain on before the scanner switches to a normal scan sweep.
            The allowable values are: 0, 100, 500, 10000, 1500, 2000, 2500, and 3000 
            milliseconds.</p>
            <p> A value of 0 (zero) disables the targeting dot.</p>
            <p> This property only applies to non-decoded scanners.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ShortCode">
            <summary>
            @deprecated Please use Get/SetProperty("NonDecoded\\Short Code", value) instead.                
            Gets or sets the Short Code property for all non-decoded scanners.
            </summary>
            <remarks>
            <p> When enabled (set to 1), this parameter allows scanning of short I 2 of 5 
            bar codes (2 characters). When ShortCode is disabled (set to 0), these short 
            bar codes are ignored.</p>
            <p> This property only applies to non-decoded scanners.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Verify">
            <summary>
            @deprecated Please use Get/SetProperty("NonDecoded\\Verify", value) instead.                        
            Gets or sets the Verify property for all non-decoded scanners.
            </summary>
            <remarks>
            <p>The value entered for this parameter determines the number of correct 
            additional decodes required after the initial decode before a bar code is 
            accepted. The allowable range is 0 to 15. Higher values significantly increase 
            the time it takes to decode a bar code.</p>
            <p> This property only applies to non-decoded scanners.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Security">
            <summary>
            @deprecated Please use Get/SetProperty("NonDecoded\\Security", value) instead.                        
            Gets or sets the Security property for all non-decoded scanners.
            </summary>
            <remarks>
            <p>This parameter controls the tolerance for decoding edge-to-edge bar codes
            (Code 93, Code 128, UPC/EAN). The allowable value is 0 to 99. Lower values 
            have a lower tolerance for misreads, but they also increase the time it takes 
            to decode the bar code.</p>
            <p> This property only applies to non-decoded scanners.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.UPCAEnabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\UPCA\\Enabled", value) instead.                        
            Gets/Sets UPC-A barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.UPCEEnabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\UPCE\\Enabled", value) instead.
            Gets/Sets UPC-E barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.UPCEANEnabled">
            <summary>
            @deprecated Please Suse Get/SetProperty("Barcode\\UPC_EAN\\Enabled", value) instead.                        
            Gets/Sets UPC/Ean barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.EAN8Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\EAN8\\Enabled", value) instead.                        
            Gets/Sets EAN8 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.EAN13Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\EAN13\\Enabled", value) instead.                        
            Gets/Sets EAN-13 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Code11Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\C11\\Enabled", value) instead.                        
            Gets/Sets Code 11 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Code39Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\C39\\Enabled", value) instead.                        
            Gets/Sets Code 3 of 9 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Code128Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\C128\\Enabled", value) instead.                        
            Gets/Sets Code 128 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Code93Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\C93\\Enabled", value) instead.                        
            Gets/Sets Code 93 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.I2Of5Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\I25\\Enabled", value) instead.                        
            Gets/Sets Interleaved 2 of 5 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Discrete2Of5Enabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\D25\\Enabled", value) instead.                        
            Gets/Sets discrete 2 of 5 barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.CodabarEnabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\CDB\\Enabled", value) instead.                        
            Gets/Sets Codabar barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.MSIPlesseyEnabled">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\MSI\\Enabled", value) instead.                        
            Gets/Sets MSI Plessy barcode decoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.IATA2Of5">
            <summary>
            @deprecated Please use Get/SetProperty("Barcode\\IATA25\\Enabled", value) instead.                        
            Gets/Sets whether IATA2Of5 barcode encoding.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ScanLog">
            <summary>
            Gets/Sets to use Scanner Log File.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.LaserOnTime">
            <summary>
            @deprecated Please use Get/SetProperty("Decoded\\Laser On Time", value) instead.                        
            The LaserOnTime property allows an application to determine how long the
            scanner will attempt to find and decode a barcode; that is, the length of time
            the scanner laser will remain on. 
            </summary>
            <remarks>
            The LaserOnTime property can have one of the following values:
            * 0 = 3 seconds
            * 1 = 4 seconds
            * 2 = 5 seconds
            * 3 = 6 seconds
            * 4 = 7 seconds
            <p>The default value for this parameter is 0 (3 seconds).</p>
            <p> This property only applies to decoded scanners.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Trigger">
            @deprecated Support for netpad has been deprecated.
            <summary>
            @deprecated This method has been replaced by Trigger namespace
            The Trigger property allows an application to determine which softkey is
            used to initiate a barcode scan.
            </summary>
            <remarks>
            The Trigger property can have one of the following values:
            * 0 = disabled
            * 1 = Barcode scans will be initiated by the II softkey.
            * 2 = Barcode scans will be initiated by the I softkey.
            * 3 = Barcode scans will be initiated by the UP softkey.
            * 4 = Barcode scans will be initiated by the DOWN softkey.
            * 5 = Barcode scans will be initiated by the LEFT softkey.
            * 6 = Barcode scans will be initiated by the RIGHT softkey.
            <p>The default value is 1 (the II key will initiate a barcode scan).</p>
            <p>This property is only meaningful on a netpad.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SendDoubleClickDataAsScannerData">
            <summary>
            A double-click is caused by a user quickly pressing and releasing the trigger 
            or scan button twice, or pressing and releasing the trigger or scan button and 
            then pressing and holding it down. If this property is set to true, the double-
            click data configured in the Teklogix Scanners control panel will be sent to
            the application as scanner data. If the property is set to false, the data 
            will be sent to the application as a double-click event.
            </summary>
            <remarks>
            <p>If the configured double-click time is zero, or the double-click data is set
            to zero, double-click events will not be generated.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.TotalSettingsCount">
            <summary>
            Gets total number of settings available for the particular scanner.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to obtain number
            of scanner properties.</exception>
        </member>
        <member name="T:PsionTeklogix.Barcode.BarcodeSymbology">
            The symbology of the barcode scanned 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.None">
            No symbology present 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code39">
            Code 39 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Codabar">
            Codabar 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code128">
            Code 128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code2of5Straight">
            D25 / Code 2 of 5 (Straight) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.IATA25">
            IATA 25 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Interleaved2of5">
            ITF / Interleaved 2 of 5 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code93">
            Code 93 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA">
            UPC A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE">
            UPC E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8">
            EAN 8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13">
            EAN 13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code11">
            Code 11 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MSIPlessy">
            MSI / Plessey 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN128">
            EAN 128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1">
            UPC E1 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PDF417">
            PDF-417 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code39FullAscii">
            Code 39 Full Ascii 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Trioptic">
            Trioptic 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Bookland">
            Bookland 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CouponCode">
            Coupon Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ISBT128">
            ISBT-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MicroPDF417">
            Micro PDF 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.DataMatrix">
            Data Matrix 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.QRCode">
            QR Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalPostNet">
            PostNET (US) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalPlaNet">
            PlaNET (US) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code32">
            Code 32 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ISBT128Concat">
            ISBT-128 Concat 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalJapan">
            Japan Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalAustralia">
            Australian Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalDutch">
            Dutch Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MaxiCode">
            Maxicode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Postbar">
            Postbar (CA) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalRoyalMail">
            Royal Mail Post (UK) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MacroPDF417">
            Macro PDF-417 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSS">
            RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSSLimited">
            RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSSExpanded">
            RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ParameterFNC3">
            Parameter (FNC3) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ScanletWebCode">
            Scanlet Webcode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CueCATCode">
            Cue CAT Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA_2">
            UPC A + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE_2">
            UPC E + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8_2">
            EAN-8 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13_2">
            EAN-13 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1_2">
            UPC E1 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN128">
            Composite CC-A + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN13">
            Composite CC-A + EAN-13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN8">
            Composite CC-A + EAN-8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSSExpanded">
            Composite CC-A + RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSSLimited">
            Composite CC-A + RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSS">
            Composite CC-A + RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_UPCA">
            Composite CC-A + UPC-A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_UPCE">
            Composite CC-A + UPC-E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCC_EAN128">
            Composite CC-C + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.TLC39">
            TLC-39 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN128">
            Composite CC-B + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN13">
            Composite CC-B + EAN-13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN8">
            Composite CC-B + EAN-8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSSExpanded">
            Composite CC-B + RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSSLimited">
            Composite CC-B + RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSS">
            Composite CC-B + RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_UPCA">
            Composite CC-B + UPC-A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_UPCE">
            Composite CC-B + UPC-E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA_5">
            UPC A + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE_5">
            UPC E + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8_5">
            EAN-8 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13_5">
            EAN-13 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1_5">
            UPC E1 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MacroMicroPDF">
            Macro Micro PDF 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPC_EAN">
            Undetermined UPC/EAN catch-all 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalKorea">
            Korean Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Aztec2D">
            2-D Aztec scanner 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Matrix25">
            Matrix 2 of 5 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Telepen">
            Telepen 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CodablockA">
            Codablock A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CodablockF">
            Codablock F 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PosiCode">
            PosiCode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code16K">
            Code 16K 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code49">
            Code 49 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN_UCC">
            EAN-UCC Composite 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalCanadian">
            Canadian Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalChina">
            China Post 
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanCompleteEventArgs">
            <summary>
            Arguments for the Scan Complete event handler.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanCompleteEventArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Creates a new instance of the ScanCompleteEventArgs.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="codeIdentifier">A barcode type identifier.</param>
            <param name="textData">Text representation of the data.</param>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.Text">
            <summary>
            Gets a text representation of the barcode that was scanned.
            </summary>
            <remarks><seealso cref="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.RawData"/></remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.RawData">
            <summary>
            Gets a raw representation of the barcode as a byte array.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.CodeIdentifier">
            <summary>
            Gets a code corresponding to the type of barcode that was scanned.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.Symbology">
            <summary>
            Determines the symbology of the barcode scanned, as an enumerated value.
            </summary>
            <remarks>
            See the BarcodeSymbology enumeration for a list of possible values.
            </remarks>
            <returns>
            The symbology of the barcode scanned, as an enumerated value.
            </returns>
        </member>
        <member name="T:PsionTeklogix.WLAN.Infrastructure">
            <summary>
            The infrastructure mode determines how the network adapter connects to the 
            wireless network
            </summary>
            \link Infra     
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.AdHoc">
            <summary>
            In this mode, wireless devices communicate directly with each other. All
            wireless devices within range of each other discover and
            communicate in peer-to-peer fashion without involving a central access point
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.AccessPoint">
            <summary>
            In this mode, wireless devices communicates with an access point which acts as 
            a central transmitter and receiver of radio signals.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.Unknown">
            Unknown Infrastructure type
        </member>
        <member name="T:PsionTeklogix.WLAN.Authentication">
            <summary>
            The authentication mode controls how a wireless device can be authenticated to 
            join a wireless network.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Open">
            <summary>
            Specifies IEEE802.11 Open System authentication mode. No authentication check
            is performed
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Shared">
            <summary>
            In this mode, A pre-shared WEP key is required for the authentication
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.NetworkEAP">
            <summary>
            CCX (Cisco Certified Extension)
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Unknown">
            Unknown Authentication type
        </member>
        <member name="T:PsionTeklogix.WLAN.Encryption">
            <summary>
            This mode specifies the type of encryption algorithm used for data transmission
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.None">
            <summary>
            Data encryption is disabled
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WEP_Manual">
            <summary>
            WEP enabled;WEP keys are entered manually
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WEP_Auto">
            <summary>
            WEP enabled;WEP keys are automatically obtained
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK">
            <summary>
            WPA Personal
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_TKIP">
            <summary>
            WPA Enterprise
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK">
            <summary>
            WPA2 Personal
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_AES">
            <summary>
            WPA2 Enterprise
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CCKM_TKIP">
            <summary>
            TKIP with key generated during EAP authentication and with Cisco key 
            management protocol for fast reauthentication 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CKIP_Manual">
            <summary>
            WEP with up to four static keys-- 40-bit or 128-bit in ASCII or hex -- 
            defined under WEP/PSK Keys, plus Cisco TKIP and/or Cisco MIC if 
            configured on AP 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CKIP_Auto">
            <summary>               
            WEP with key generated during EAP authentication, plus Cisco TKIP and/or 
            Cisco MIC if configured on AP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK_TKIP">
            <summary>
            WPA-PSK with TKIP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK_AES">
            <summary>
            WPA-PSK with AES
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK_TKIP">
            <summary>
            WPA2-PSK with TKIP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK_AES">
            <summary>
            WPA2-PSK with AES
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.Unknown">
            Unknown Encryption type
        </member>
        <member name="T:PsionTeklogix.WLAN.EAP">
            <summary>
            This mode specifies the type of Extensible Authentication Protocol (EAP> used by a
            802.1x enabled wireless network
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.None">
            <summary>
            EAP is not used for authentication
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.MD5">
            <summary>        
            EAP MD5
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.PEAP_MCHAP">
            <summary>
            PEAPv0 method;widely used as Microsoft has added native support to Windows OS
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.PEAP_GTC">
            <summary>
            PEAPv1 method; no native support for this EAP protocol; supported by the Cisco
            CCX extensions program
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.EAP_TLS">
            <summary>
            Natively supported by Windows OS; requires a client-side digital certificate
            located on the client’s hard drive or a smartcard.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.LEAP">
            <summary>
            The Lightweight Extensible Authentication Protocol (LEAP); a proprietary EAP
            method developed by Cisco Systems
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.EAP_FAST">
            <summary>
            Flexible Authentication via Secure Tunneling; a proprietary EAP
            method developed by Cisco Systems
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.Unknown">
            Unknown EAP type
        </member>
        <member name="T:PsionTeklogix.WLAN.RadioMode">
            This enumeration specifies the supported types of 802.11 protocol 
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211b">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate of 5.5 and 11 mbps
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211bg">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate 5.5,11 and 54 mbps
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211g">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate of 54 mbps
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.WEPKeyLength">
            Defines valid length of WEP keys
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.None">
            <summary>
            WEP key has not been defined
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.WEPKeyLength_40Bit">
            <summary>
            length of a 40 bit WEP key
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.WEPKeyLength_128Bit">
            <summary>
            length a 128 bit WEP key
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.BitRate">
            Possible values of preferrable bit rate of radio
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.Auto">
            <summary>
            Bit rate is set by the driver automatically
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_1Mbps">
            <summary>
            1 megabit per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_2Mbps">
            <summary>
            2 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_5_5Mbps">
            <summary>
            5.5 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_6Mbps">
            <summary>
            6 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_9Mbps">
            <summary>
            9 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_11Mbps">
            <summary>
            11 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_12Mbps">
            <summary>
            12 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_18Mbps">
            <summary>
            18 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_24Mbps">
            <summary>
            24 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_36Mbps">
            <summary>
            36 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_48Mbps">
            <summary>
            48 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_54Mbps">
            <summary>
            54 megabits per second
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.Configuration">
            <summary>
            This class encapsulates data describing how to connect to a specific wireless
            network.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.#ctor">
            <summary>
            Default Constuctor
            </summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.#ctor(PsionTeklogix.WLAN.DiscoveredNetwork)">
            <summary>
            Constuctor for copying information from a DiscoveredNetwork object
            </summary>
            <param name="network">
            a DiscoveredNetwork object obtained from GetAvailableNetworks
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.SetWEPKey(System.Int32,System.String)">
            <summary>
            Sets WEP key used for data encryption. Up to 4 keys can be stored in memory.
            Please note that WEP keys are only used when encryption is set to 
            Encryption_WEP_Manual. 
            </summary>
            <param name="index">
            index of WEP key.  Valid values are 1,2,3 and 4.
            </param>
            <param name="key">
            String representation of WEP key. Length of this string will determine the
            size of the encryption key:
            5-characters ascii string or 10-characters hex string will yield a 40-bit
            encryption key. (For example, ascii string "abcde" or hex string 
            "3132333435") 10-characters ascii string or 26-characters hex string will 
            yield a 128-bit encryption key
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.GetWEPKeyLength(System.Int32)">
            <summary>
            Retrieve length of WEP Key of this configuration. Values returned by 
            non-Summit radios are undefined
            </summary>
            <param name="index">
            index of WEP key.  Valid values are 1,2,3 and 4.
            </param>                               
            <exception cref="T:System.ApplicationException">if index is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Authentication">
            <summary>
            retrieve the current 802.11 authentication mode
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Encryption">
            <summary>
            retrieve the current data encryption method for data transmission
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.EAP">
            <summary>
            the type of EAP used for security
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.SSID">
            <summary>
            SSID of the wireless network to be connected to.
            
            </summary>
            <example>
            <code>
            config.SSID = Encoding.UTF8.GetBytes("adam2");
            </code>
            </example>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Infrastructure">
            <summary>
            This parameter specifies if a wireless device should be connected to other
            wireless devices as peers or connected to an access point
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.PSK">
            <summary>
            Pre-shared key for data encryption and authentication
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.WEPKeyIndex">
            <summary>
            Index of WEP key used for data encryption
            </summary>
            <exception cref="T:System.ApplicationException">if index is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.UserName">
            <summary>
            User name used for EAP authentication
            </summary>
            <exception cref="T:System.ArgumentException">if user password is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.UserPassword">
            <summary>
            User password used for EAP authentication
            </summary>
            <exception cref="T:System.ArgumentException">if user password is invalid
            </exception>
        </member>
        <member name="T:PsionTeklogix.WLAN.ConnectionState">
            <summary>
            This class contains a snapshot of information about the current wireless
            connection.  The snapshot is created by calling 
            NetworkAdapter.GetCurrentConnection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.Infrastructure">
            <summary>
            the current infrastructure mode
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.Encryption">
            <summary>
            the current data encryption method for data transmission
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.SignalStrength">
            <summary>
            Received Signal Strength Indication(RSSI) measured in dBm.
            A perfect-signal is represented by -10. A no-signal is represented by -200.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.ChannelFrequency">
            <summary>
            frequency of the selected channel in MHz
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.SSID">
            <summary>
            SSID of the wireless network that the network adapter is currently connected 
            to. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.AccessPointMAC">
            <summary>
            MAC address of the access point that the wireless network adapter is 
            currently connected to. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.DataRate">
            <summary>
            maximum link speed of the radio in units of kbps. 
            </summary>        
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.FrameSize">
            <summary>
            maximum supported network packet size in unit of bytes
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.PacketsIn">
            <summary>
            number of frames that the radio has received without errors
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.PacketsOut">
            <summary>
            number of frames that the radio has transmitted without errors
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.InErrors">
            <summary>
            Retrieves the number of frames received but not passed to the protocols due to 
            errors.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.OutErrors">
            <summary>
            number of frames that the radio has failed to transmit
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.DiscoveredNetwork">
            <summary>
            This class describes an advertised wireless network.
            </summary>
            <remarks>
            Call NetworkAdapter.GetAvailableNetworks to retrieve a list of networks. In order
            to connect to one of these networks, pass the ssid in a saved Configuration object
            to NetworkAdapter.Connect.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.SSID">
            <summary>
            the SSID broadcasted by this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Infrastructure">
            <summary>
            the infrastructure mode currently in use
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Authentication">
            <summary>
            the authentication mode of this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Encryption">
            <summary>
            the encryption mode of this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.ChannelFrequency">
            <summary>
            frequency of radio in use, in MHz
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.SignalStrength">
            <summary>
            Received Signal Strength Indication in dBm
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.MACAddress">
            <summary>
            MAC Address of Access Point
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.NetworkAdapter">
            <summary>
            This class represents the wireless interface (radio) which connects this mobile
            device to wireless networks.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralDevice">
            class PeripheralDevice
            <summary>
            The PeripheralDevice class is designed to encapsulte different peripheral devices
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.#ctor">
            Constructor
            <summary>
            The PeripheralDevice class is designed to encapsulte different peripheral devices
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.#ctor(System.Int32)">
             Constructor
             <summary>
             The PeripheralDevice class is designed to encapsulte different peripheral devices
             </summary>
            <param> peripheralType = "type of peripheral device" </param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.GetBoolSetting(System.Int32)">
            GetBoolSetting
            <summary>retrieve value of specified setting</summary>
            <param> peripheralType = "type of peripheral device" </param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.SetBoolSetting(System.Int32,System.Boolean)">
            SetBoolSetting
            <summary>set value for setting specified</summary>
            <param> setting= "setting to set" </param>
            <param>value="value to set"</param>
        </member>
        <member name="P:PsionTeklogix.Peripherals.PeripheralDevice.PowerMode">
            <summary>power mode of this peripheral device</summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.#ctor">
            <summary>
            Constructor
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.ToString">
            <summary>
            a string representation of the network adapter
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetConnectToAllNetworksEnabled">
            <summary>
            Determines if the network adapter is allowed to connect to all networks.         
            </summary>
            <returns>
            returns true if the network adapter is allowed to connect to all networks, 
            even if the individual network does not match the currently active 
            configuration; returns false if the network adapter is only allowed to connect 
            to networks with matched criteria stored in the saved configurations
            </returns>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SetConnectToAllNetworksEnabled(System.Boolean)">
            <summary>
            Enable/Disable connecting to all networks
            </summary>
            <param name="enable">
            when true, the network adapter is allowed to connect to all networks;
            when false, the network adapter is only allowed to connect to networks with
            matched criteria stored in the saved configurations
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetAvailableNetworks">
            <summary>
            Retrieve all the wireless networks in range
            </summary>
            <returns>
            a list of all of the wireless networks in range
            </returns>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.Connect(System.Byte[])">
            <summary>
            Submit a request to the network adapter to connect to a wireless network 
            </summary>
            <param name="aSSID">
             SSID of a network to be connected to
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetCurrentConnection">
            <summary>
            retrieve information of the current network connection 
            </summary>
            <returns>
            current ConnectionState object if connected; null if the network adapter is
            not associated with any wireless network
            </returns>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetAllConfigurations">
            <summary>
            Retrieve all the static configurations
            </summary>
            <returns>
            An array of Configurations.  Please note that this array can contain zero 
            elements when returned.
            </returns>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SaveConfiguration(PsionTeklogix.WLAN.Configuration)">
            <summary>
            Add the given configuration to the static configuration list
            </summary>
            <param name="config">Configuration object to be added</param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.RemoveConfiguration(System.Byte[])">
            <summary>
            Remove the specified configuration from the static configuration list.  
            </summary>
            <param name="aSSID">
             SSID of a network to be connected to
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.RemoveAllConfigurations">
            <summary>
            Remove all the configurations stored in the static configuration list
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.PowerOn">
            <summary>
            Power on the wlan radio.  This function will look for a builtin wlan radio first
            if found, it will turn it on.  If a builtin radio is not found it will assume that
            the wlan radio is in a CF slot and turn on the power to the cf slot.  By default
            we assume CF slot 0.  See SetCfSlot() to change this default value.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.PowerOff">
            <summary>
            Power off the wlan radio.  This function will look for a builtin wlan radio first
            if found, it will turn it off.  If a builtin radio is not found it will assume that
            the wlan radio is in a CF slot and turn off the power to the cf slot.  By default
            we assume CF slot 0.  See SetCfSlot() to change this default value.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SetCfSlot(System.Int32)">
            <summary>
            Set the CF slot where the radio is located. By default we assume it is in slot 0
            See PowerOff() and PowerOn() to see how this value is used.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.TransmitPower">
            <summary>
            Transmit power of radio, in percent.  Please note that the input is subject to
            rounding for driver compatibility.
            Supported for Summit Radio only
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.BitRate">
            <summary>
            Bit rate of radio. Supported for Summit Radio only.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.RadioMode">
            <summary>
            Type of 802.11 protocol used by the radio . Supported for Summit Radio only
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortDetachedEvent">
            <summary>
            The SerialPortDetachedEvent class is used to report when an existing serial port 
            disappears from a target device, usually as the result of disconnecting/removing 
            hardware such as a Bluetooth radio or port replicator.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.SerialPortDetachedEvent.SourcePort">
            <summary>
            The name of the COM port generating the event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPortDetachedEvent.#ctor(System.String)">
            <summary>
            SerialPortDetachedEvent constructor. Initializes the detached event object 
            with the source port name.
            </summary>
            <param name="sourcePort">The name of the COM port generating the event.</param>
        </member>
        <member name="T:PsionTeklogix.Power.PowerOnEventArgs">
            <summary>
            Power on event arguments.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerOnEventArgs.#ctor">
            <summary>
            Creates a new instance of the PowerOnEventArgs class.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Sound.Beeper.Beeper">
            <summary>
            The Beeper API is used to access the piezo-electric speaker on 
            a Psion Teklogix device. It allows applications to generate an 
            error, warning, or informational beep (or beeps) when an event occurs, 
            such as a completed database operation, barcode scan, or file 
            download. 
            The ability to generate beeps using a piezo-electric speaker 
            can be very useful in in noisy environments, as they tend to be 
            much louder than a standard speaker connected to a waveform 
            audio device.
            </summary>
            <remarks>
            The Beeper class allows an application to play a tone at a specified frequency 
            for a specified duration using the device's built in sound device. Some devices
            have beepers, which can only play tones, and some devices have speakers which
            can play .wav files. If the device does 
            not have a beeper, but does have a wave device, an 
            equivalent sound will be played through the speaker.</remarks>
        </member>
        <member name="M:PsionTeklogix.Sound.Beeper.Beeper.PlayTone(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Used to play a tone at the given frequency, duration, and volume. 
            </summary>
            <remarks>
            <p>Different beepers have different behaviours with regards to 
            frequency response range, valid beep durations, etc. As a result, 
            certain frequencies and durations may not be not be possible on a 
            some devices. If a beeper cannot support a supplied frequency or 
            duration, the value will be increased or reduced as appropriate to 
            the nearest valid value.</p>
            <p> Some devices will use the waveform audio device to generate a beep.</p> 
            </remarks>
            <param name="frequency">
            The frequency of the Beep Sound in Hertz. 
            Frequencies below 20Hz or above 20000Hz are not valid.
            </param>
            <param name="duration">
            Duration of the Beep Sound expressed in milliseconds. 
            Durations of less than one millisecond are not valid.
            </param>
            <param name="volume">
            The volume at which the tone will be played, as a percentage. This parameter 
            currently has no effect on devices with beepers. On these devices, the volume
            is controlled by the user from the Control Panel. On devices with waveform 
            audio support, the parameter functions normally.
            </param>
            <returns>
            true if the tone can be played by either the beeper or wave speaker. 
            </returns>
            <exception cref="T:System.ArgumentException">ArgumentException - if one of the parameters
            is invalid.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - if the tone
            cannot be played.</exception>
        </member>
        <member name="P:PsionTeklogix.Sound.Beeper.Beeper.HasBeeper">
            <summary>
            Used to determine if a target device has a beeper.
            </summary>
            <returns>
            true, if the device has a beeper. false, otherwise.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Backlight.Constants">
            <summary>
            Constants used for Backlight API
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.Constants.ONTIME_INFINITE">
            constant for signaling backlight always on
        </member>
        <member name="T:PsionTeklogix.Backlight.DisplaySettings">
            <summary>
            Encapsulate different settings associated with display backlight
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ALWAYSONFORAC">
            <summary>
            whether or not backlight should remain on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ALWAYSONFORBATTERY">
            <summary>
            whether or not backlight should remain on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.DIMTIMEFORAC">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.DIMTIMEFORBATTERY">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.INTENSITYFORAC">
            <summary>
            brightness of backlight in percentage when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.INTENSITYFORBATTERY">
            <summary>
            brightness of backlight in percentage when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ONTIMEFORAC">
             <summary>
             the length of time backlight will remain on off when connected to AC power
             For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
             </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ONTIMEFORBATTERY">
            <summary>
            the length of time backlight will remain on when connected to battery
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.THRESHOLDFORAC">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.THRESHOLDFORBATTERY">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ValidOnTimes">
            <summary>
            recommended list of timeout values for on time (in milliseconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ValidDimTimes">
            <summary>
            recommended list of timeout values for dim time (in milliseconds)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Backlight.KeyboardSettings">
            <summary>
            Encapsulate different settings associated with keyboard backlight
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ALWAYSONFORAC">
            <summary>
            whether or not backlight should remain on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ALWAYSONFORBATTERY">
            <summary>
            whether or not backlight should remain on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.DIMTIMEFORAC">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.DIMTIMEFORBATTERY">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.INTENSITYFORAC">
            <summary>
            brightness of backlight in percentage when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.INTENSITYFORBATTERY">
            <summary>
            brightness of backlight in percentage when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ONTIMEFORAC">
            <summary>
            the length of time backlight will remain on off when connected to AC power
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ONTIMEFORBATTERY">
            <summary>
            the length of time backlight will remain on when connected to battery
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.THRESHOLDFORAC">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.THRESHOLDFORBATTERY">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ValidOnTimes">
            <summary>
            recommended list of timeout values for on time (in milliseconds)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Backlight.BacklightControl">
            <summary>
            The BacklightControl class is used to control the keyboard and
            display backlight settings on Psion Teklogix devices.
            Backlights are used to illuminate the keyboard and display on
            a Psion Teklogix device in levels of low ambient light.
            The display backlight is also used to make the display easier
            to read in all levels of ambient light. Unfortunately,
            backlights consume a fair amount of current, lowering a device's
            battery life. As a result, backlights are generally turned off
            when the user is inactive for a given length of time (configurable).
            By configuring the length of time the backlight is on, and/or dim,
            it is possible to reduce the drain on the battery, and thereby
            increase the battery life. User activity will reset the timers,
            and cause the backlight to come back on, regardless of the current
            backlight state (dim/off).
            In addition, the battery life can be increased by configuring
            the intensity of the backlight, and the threshold at which it
            turns on. The backlight threshold can be lowered, which
            prevents the backlight from coming on above a certain ambient
            light level. The further the threshold is decreased, the lower
            the ambient light levels have to be in order for the backlight
            to come on. Note that the threshold is independent of the on
            and dim times; the backlight will dim and turn off regardless
            of the ambient light level when the user is inactive.
            Also note that some devices do not have a light sensor, on
            these devices the backlight will always come on, regardless of
            ambient light levels.
            </summary>
            <remarks >Currently, this API is not supported by the Netbook Pro,
            because it controls the display backlight differently 
            (via the Power Management API). Also, the Netbook Pro does not
            have a keyboard backlight.</remarks>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightControl.OnTime_Infinite">
            <summary> This value should be set to indicate that the backlight is to remain
            on indefinitely</summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightControl.IsSupported">
            <summary>
            Determines if the BacklightControl API is supported on the
            current Psion Teklogix device.
            </summary>
            <returns>True, if the device is supported.
            False, if the device does not support the BacklightControl API.</returns>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.Item(System.Int32)">
            <summary>
            Get/Set settings of backlight
            </summary>
            <param>index = "Please use constants defined in class DisplaySettings for
            display backlight and KeyboardSettings for keyboard backlight"</param>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the display backlight should remain on
            (always) while the Psion Teklogix device is being powered
            via External Power Source.
            </summary>
            <exception cref="T:System.ApplicationException">if the backlight always-on
            state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightDimTime">
            <summary>
            Gets/Sets the display backlight dim time (the length of time
            the backlight will remain in a "dimmed" state before it is
            turned off altogether). Note that if the backlight has been
            configured to always be on when external power is present (either
            in the control panel, or via the BacklightControl class),
            the display backlight will never dim/turn off when the
            device is being powered from an external power source.
            </summary>
            <remarks>The length of time the display backlight will remain dim
            before turning off. The time reported is in milliseconds.</remarks>
            <exception cref="T:System.ApplicationException">if the backlight dim-time cannot
            be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightIntensity">
            <summary>
            Gets/Sets the display backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored. As a result,
            the DisplayBacklightIntensity property may return a slightly
            different value than what was set (rounding issues).
            The intensity, as a percentage (range of 0-100).
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightOnTime">
            <summary>
            Used to set the display backlight on time (the length of time the
            backlight will remain on before it is either dimmed or
            turned off altogether). Note that if the backlight has been
            configured to always be on when AC power is present (either
            in the control panel, or via the Backlight class),
            the display backlight will never dim/turn off when the
            device is being powered from an external AC power source.
            </summary>
            <remarks>The length of time the display backlight will remain on
            before turning off (or going dim). The time reported is in
            milliseconds.
            <p>Use the value OnTime_Infinite to have the backlight remain on
            indefinitely.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            on-time cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightThreshold">
            <summary>
            Changes the display backlight threshold level. The threshold
            determines the sensitivity of the light level sensor that
            triggers the display backlight. The backlight on a Psion
            Teklogix is triggered by the amount of ambient light
            present. When the amount of ambient light drops below a
            certain level, the backlight comes on. A low threshold
            value means that the amount of ambient light has to be much
            lower before the backlight is triggered. A higher threshold
            value means that even a slight drop in ambient light will
            allow the backlight to come on.
            </summary>
            <remarks>This method will throw an exception if the Psion
            Teklogix device does not have a light sensor.
            As threshold ranges vary from device to device, the value set
            here may not be exactly what is stored. As a result,
            the DisplayBacklightThreshold property may return a slightly
            different value than what was set (rounding issues).
            This method will throw an exception if the Psion Teklogix
            device does not have a light sensor.
            As threshold ranges vary from device to device, the value set
            here may not be exactly what is stored. As a result, the DisplayBacklightThreshold
            property may return a slightly different value than what was set (rounding issues).
            The threshold, as a percentage (range of 0-100).
            0% indicates the lowest sensitivity level (backlight will rarely turn on).
            100% indicates the highest sensitivity level (backlight should always
            come on).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the threshold level cannot
            be determined, or if the device does not have a light sensor.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the keyboard backlight should remain
            on (always) while the Psion Teklogix device is being
            powered via AC.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            always-on state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightIntensity">
            <summary>
            Gets/Sets the keyboard backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored.
            As a result, the getKeyboardBacklightIntensity method may
            return a slightly different value than what was set
            (rounding issues).
            The intensity, as a percentage (range of 0-100).
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightOnTime">
            <summary>
            Gets/Sets the keyboard backlight on time, (the length of
            time the backlight will remain on before it is turned off).
            Note that if the backlight has been configured to always be
            on when AC power is present (either in the control panel,
            or via the BacklightControl class), the keyboard backlight
            will never turn off when the device is being powered from
            an external AC power source.
            </summary>
            <remarks>The length of time the keyboard backlight will remain
            on before turning off. The time reported is in milliseconds.
            <p>Use the value OnTime_Infinite to have the backlight remain on
            indefinitely.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight on-time
            cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightThreshold">
            <summary>
            Gets/Sets the keyboard backlight threshold level. The threshold
            determines the sensitivity of the light level sensor that
            triggers the keyboard backlight. The backlight on a Psion
            Teklogix is triggered by the amount of ambient light
            present. When the amount of ambient light drops below a
            certain level, the backlight comes on. A low threshold
            value means that the amount of ambient light has to be much
            lower before the backlight is triggered. A higher threshold
            value means that even a slight drop in ambient light will
            allow the backlight to come on.
            </summary>
            <remarks>This method will throw an exception if the Psion
            Teklogix device does not have a light sensor. As threshold ranges
            vary from device to device, the value set here may not be
            exactly what is stored. As a result, the
            KeyboardBacklightThreshold property may return a slightly
            different value than what was set (rounding issues).
            The threshold, as a percentage (range of 0-100).
            0% indicates the lowest sensitivity level (backlight will rarely turn on).
            100% indicates the highest sensitivity level (backlight should always
            come on).</remarks>
            <exception cref="T:System.ApplicationException">If the threshold level cannot
            be determined, or if the device does not have a light sensor.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidDisplayBacklightDimTimes">
            
             @deprecated
            
             <summary>
             Determines what backlight dim-times can be set on the current
             Psion Teklogix device.
             </summary>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidDisplayBacklightOnTimes">
            
             @deprecated 
            
             <summary>
             Determines what backlight on-times can be set on the current
             Psion Teklogix device.
             </summary>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidKeyboardBacklightOnTimes">
            
             @deprecated
            
             <summary>
             Determines what keyboard backlight on-times can be set on the
             current Psion Teklogix device.
             </summary>
             <remarks >An array containing the possible values that be
             set using the KeyboardBacklightOnTime property.
             All times are in milliseconds.</remarks>
        </member>
        <member name="T:PsionTeklogix.WWAN.WwanRequestStatus">
            <summary>
             The request status.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.Success">
            <summary>The request was successfully issued.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.Failure">
            <summary>The request was not successfully issued.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.NotInitialized">
            <summary>The request failed because the API was not initialized.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.DriverNotRunning">
            <summary>The request failed because the driver is not running.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.InvalidParameter">
            <summary>The request failed because a parameter specified by the application was 
            not valid.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.EventHandleInvalid">
            <summary>The request failed because the handle specified was not a valid event 
            (and not null).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.OutOfMemory">
            <summary>The request failed because of a memory allocation failure.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.BufferTooSmall">
            <summary>The request failed because an internal buffer was too small.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.AccessDenied">
            <summary>The request failed because the driver was not in the correct state 
            at the time the request was issued.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.AccessFlagNotSet">
            <summary>The request failed because the appropriate access flag was not set.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanRequestStatus.NotSupported">
            <summary> The request failed because the requested functionality is not 
            supported. </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WwanResult">
            <summary>
             The WWAN operation result.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.Success">
            <summary>Succeeded.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SuccessPartial">
            <summary>Succeeded, partial results given.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.Failure">
            <summary>Failed, no reason given.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NoSim">
            <summary>Failed, SIM is not present.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.BadSim">
            <summary>Failed, SIM is invalid.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SimRejected">
            <summary>Failed, SIM was rejected.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NotInitialized">
            <summary>Failed, device not ready.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SubsidyLocked">
            <summary>Failed, Device is subsidy locked.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.PinLocked">
            <summary>Failed, operation requires PIN.</summary>      
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.PukLocked">
            <summary>Failed, operation requires PUK.</summary>      
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.Pin2Locked">
            <summary>Failed, operation requires PIN2.</summary>     
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.Puk2Locked">
            <summary>Failed, operation requires PUK2.</summary>     
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NetworkPwdLocked">
            <summary>Failed, requires network pwd.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.DevicePwdLocked">
            <summary>Failed, requires device pwd.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.WrongPassword">
            <summary>Failed, password/PIN is incorrect.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.PasswordIgnored">
            <summary>Failed, password type is unlocked.</summary>   
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.RegistrationDenied">
            <summary>Failed, emergency calls okay.</summary>        
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NoProvidersFound">
            <summary>Failed, still searching.</summary>             
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NoActiveProvider">
            <summary>Failed, must be registered.</summary>          
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NotAttached">
            <summary>Failed, must be packet attached.</summary>     
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.MaxActivatedContexts">
            <summary>Failed, max active contexts.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.ServiceUnavailable">
            <summary>Failed, e.g. no packet roaming.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.InvalidMailboxIndex">
            <summary>mailbox index was invalid.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.InvalidMessageIndex">
            <summary>the message index was outside the allowed range or there is no 
            message for this index.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.NoDcsConversion">
            <summary>the data coding scheme of the message can't be converted to the 
            requested data coding scheme.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.PduDecodeError">
            <summary>a GSM SMS PDU read from the modem could not be decoded.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.RequestRejected">
            <summary>the modem or driver state does not allow the request to be processed 
            at this time.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.MailboxNotWritable">
            <summary>the mailbox index in a send request points to a mailbox that is 
            read-only.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.AddressTooLong">
            <summary>the address in a send request is too long.</summary> 
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.AddressInvalid">
            <summary>the address in a send request contains invalid characters.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.MessageTooLong">
            <summary>the message in a send request is too long and length checking had 
            been requested.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.UnknownError">
            <summary>an unknown error occurred.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SmsResultNotSupported">
            <summary>the modem in use does not support this function</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SmsResultBadParameter">
            <summary>one or more of the parameter values or the combination 
            of parameter values is not allowed</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WwanResult.SmsResultNetworkError">
            <summary>the modem has reported an error after trying to process the 
            request</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWanRequestParameters">
            <summary>
             The structure used when performing some WWAN operations.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWanRequestParameters.hWaitForAsyncCompletion">
            <summary>
            The handle of a valid event Windows CE handle, or IntPtr.Zero for synchronous requests.
            </summary>
            <remarks>
             This field is not used and must be set to IntPtr.Zero. All WWAN operations are
            performed synchronously. 
            </remarks>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWanRequestParameters.resultCode">
            <summary>
             The result of the operation. This value will only be valid if the request is
            successfully issued, and the requested operation has completed. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_DEVICE_TYPE">
            <summary>
             The device type.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_TYPE.WwanDeviceTypeUnknown">
            <summary>Unknown device type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_TYPE.WwanDeviceTypeLocal">
            <summary>Local device type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_TYPE.WwanDeviceTypeRemote">
            <summary>Remove device type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_TYPE.WwanDeviceTypeMax">
            <summary>Maximum device type value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_CELLULAR_CLASS">
            <summary>
             The modem class (GSM or CDMA)
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CELLULAR_CLASS.WwanCellularClassUnknown">
            <summary>Unknown cellular class.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CELLULAR_CLASS.WwanCellularClassGsm">
            <summary>GSM Modem.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CELLULAR_CLASS.WwanCellularClassCdma">
            <summary>CDMA Modem.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CELLULAR_CLASS.WwanCellularClassMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_VOICE_CLASS">
            <summary>
             The voice service capabilities of the modem
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_VOICE_CLASS.WwanVoiceClassUnknown">
            <summary>Unknown voice class.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_VOICE_CLASS.WwanVoiceClassNoVoice">
            <summary>No voice support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_VOICE_CLASS.WwanVoiceClassSeparateVoiceData">
            <summary>Separate voice and data support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_VOICE_CLASS.WwanVoiceClassSimultaneousVoiceData">
            <summary>Simultaneous voice and data support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_VOICE_CLASS.WwanVoiceClassMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SIM_CLASS">
            <summary>
             Used to determine whether or not a SIM is required.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIM_CLASS.WwanSimClassUnknown">
            <summary>Unknown SIM class.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIM_CLASS.WwanSimClassNoSim">
            <summary>SIM not required.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIM_CLASS.WwanSimClassSimSupported">
            <summary>SIM supported and required.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIM_CLASS.WwanSimClassMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_DATA_CLASS">
            <summary>
             The data service information (supported technologies)
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.UNKNOWN">
            <summary>Data class is not known.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.GPRS">
            <summary>GPRS Modem.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.EGPRS">
            <summary>Enhanced GPRS support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.UMTS">
            <summary>Universal Mobile Telecommunications System support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.HSDPA">
            <summary>High Speed Downlink Packet Access support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.ONE_XRTT">
            <summary>1xRTT support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.ONE_XEVDO">
            <summary>Evolution-Data Only support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.ONE_XEVDV">
            <summary>Evolution-Data Voice support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.THREE_XRTT">
            <summary>3xRTT support.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DATA_CLASS.INVMASK">
            <summary>Invalid flags mask.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS">
            <summary>
             The capabilities of the modem.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.WwanDeviceType">
            <summary>The device type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.WwanCellularClass">
            <summary>The modem class: GSM, CDMA, etc.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.WwanVoiceClass">
            <summary>The voice service capabilities of the modem.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.WwanSimClass">
            <summary>Determines if a SIM is required.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.WwanDataClass">
            <summary>The data service information (supported technologies).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.Manufacturer">
            <summary>The modem manufacturer.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.Model">
            <summary>The modem model.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.FirmwareInfo">
            <summary>The modem firmware information.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_DEVICE_CAPS.MaxActivatedContexts">
            <summary>Maximum number of simultaneous activated contexts.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS">
            <summary>
             The state of the modem
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.SHUTDOWN">
            <summary>stack is not running.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.PHONEBOOK">
            <summary>can read the phonebook.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.SMSSTORE">
            <summary>SMS store is available (can read messages).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.INITIALIZED">
            <summary>We can transmit / receive.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.NO_SIM">
            <summary>SIM not inserted.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.BAD_SIM">
            <summary>SIM is invalid.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.FAILURE">
            <summary>modem failure.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE_FLAGS.INVMASK">
            <summary>Invalid flags mask.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_READY_STATE">
            <summary>
             The class used to report modem state information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE.State">
            <summary>The modem state (what operations can be performed).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE.Imsi">
            <summary>International Mobile Station Identity.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_READY_STATE.Imei">
            <summary>International Mobile Equipment Identity.</summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_READY_STATE.IsdnList">
            <summary>List of phone numbers.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PIN_TYPE">
            <summary>
             The pin type, used when retrieving the PIN state or setting the PIN.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeUnknown">
            <summary>Unknown PIN type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeNone">
            <summary>No PIN is needed.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeSubsidyLock">
            <summary>Subsidy unlock code.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypePin">
            <summary>Standard PIN.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypePuk">
            <summary>Standard PUK.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypePin2">
            <summary>PIN2.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypePuk2">
            <summary>PUK2.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeNetworkPassword">
            <summary>Network password.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeDevicePassword">
            <summary>Device password.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_TYPE.WwanPinTypeMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PIN_FORMAT">
            <summary>
             The pin format - numeric or alphanumeric.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_FORMAT.WwanPinFormatUnknown">
            <summary>Format of needed pin is unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_FORMAT.WwanPinFormatNumeric">
            <summary>Allow characters 0-9,*,#</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_FORMAT.WwanPinFormatAlphaNumeric">
            <summary>Allow characters a-z, A-Z, 0-9,*,#</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_FORMAT.WwanPinFormatMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PIN_STATE">
            <summary>
             The pin state information - pin format, type, etc.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_STATE.PinType">
            <summary>The PIN type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_STATE.PinFormat">
            <summary>The PIN format.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_STATE.PinLengthMin">
            <summary>Minimum PIN length, usually -1 (i.e. maximum unsigned int value)</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_STATE.PinLengthMax">
            <summary>Maximum PIN length, usually -1 (i.e. maximum unsigned int value)</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_STATE.AttemptsRemaining">
            <summary># of attempts remaining</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PIN_ACTION">
            <summary>
             The pin operation to perform.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionUnknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionSend">
            <summary>Send PIN.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionEnable">
            <summary>Enable PIN.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionDisable">
            <summary>Disable PIN.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionChange">
            <summary>Change PIN.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionCancel">
            <summary>Cancel PIN operation.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PIN_ACTION.WwanPinActionMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SET_PIN">
            <summary>
             The class used to perform a set PIN operation.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SET_PIN.PinAction">
            <summary>The PIN operation.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SET_PIN.PinType">
            <summary>The PIN type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SET_PIN.Pin">
            <summary>The current PIN, or PIN to submit.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SET_PIN.NewPin">
            <summary>The new PIN.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE">
            <summary>
             The provider state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStateUnknown">
            <summary>The provider state is unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStateForbidden">
            <summary>The provider is forbidder.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStateAvailable">
            <summary>The provider is available.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStatePreferred">
            <summary>The provider is available and preferred.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStateCurrent">
            <summary>The provider is the current provider being used.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER_STATE.WwanProviderStateMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PROVIDER">
            <summary>
             Provider information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER.ProviderId">
            <summary>Provider ID.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER.State">
            <summary>Provider State.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PROVIDER.Name">
            <summary>Provider Name.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PROVIDER_LIST">
            <summary>
             List of available providers.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_PROVIDER_LIST.Providers">
            <summary>
             Returns an array of visisble providers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_REGISTER_MODE">
            <summary>
             The registration mode.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeUnknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeReregister">
            <summary>Reregister to the registered operator using current mode.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeAutomatic">
            <summary>Turn on transceiver, camp on best available network, packet attach.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeManual">
            <summary>Turn on transceiver, use numeric code to camp, packet attach.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeDeregister">
            <summary>Transceiver is on, but device is detached and deregistered.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeRadioOff">
            <summary>Transceiver is off, device is detached and deregistered.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_MODE.WwanRegisterModeMax">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_REGISTER_STATE">
            <summary>
             The registration state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateUnknown">
            <summary>Registration state unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateDeregistered">
            <summary>Not registered, not searching.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateSearching">
            <summary>Searching for a provider.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateHome">
            <summary>Device is on a home provider.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateRoaming">
            <summary>Device is on roaming provider.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateDenied">
            <summary>Registration denied, emergency calls may still be made.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTER_STATE.WwanRegisterStateMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_REGISTRATION">
            <summary>
             Registration information structure.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTRATION.RegisterMode">
            <summary>Registration mode.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTRATION.RegisterState">
            <summary>Registration state.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_REGISTRATION.Provider">
            <summary>Registration provider.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_ATTACH_STATE">
            <summary>
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateUnknown">
            <summary>Attach state unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateDetached">
            <summary>Device is not attached and likely unregistered.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateSearching">
            <summary>Automatic after registered.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateAttached">
            <summary>Packet attached.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateDenied">
            <summary>Packet service unavailable.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ATTACH_STATE.WwanAttachStateMax">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_PACKET_SERVICE">
            <summary>
             Packet service information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PACKET_SERVICE.AttachState">
            <summary></summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_PACKET_SERVICE.DataClass">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_SIGNAL_STATE">
            <summary>
             Signal strength and configuration information. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIGNAL_STATE.Rssi">
            <summary>Received Signal Strength in decibels (db).</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIGNAL_STATE.RssiInterval">
            <summary>Suggested interval in seconds.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_SIGNAL_STATE.RssiThreshold">
            <summary>Suggested +/- threshold in db.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION">
            <summary>
             Authenication information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationUnknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationNone">
            <summary>Ignore user/pwd fields.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationChap">
            <summary>Use CHAP authentication.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationPap">
            <summary>Use PAP authentication.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationEap">
            <summary>Use EAP authentication.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT_AUTHENTICATION.WwanContextAuthenticationMax">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_ACTIVATION_STATE">
            <summary>
             The activation state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ACTIVATION_STATE.WwanActivationStateUnknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ACTIVATION_STATE.WwanActivationStateActivated">
            <summary>Activated.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ACTIVATION_STATE.WwanActivationStateDeactivated">
            <summary>Deactivated.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_ACTIVATION_STATE.WwanActivationStateMax">
            <summary>Maximum value.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_CONTEXT">
            <summary>
             Context information.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.ProviderId">
            <summary>Provider owns the access str.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.ActivationState">
            <summary>Activation state.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.AccessString">
            <summary>Context access string.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.AuthenticationType">
            <summary>Authentication type.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.UserName">
            <summary>User name.</summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.WWAN_CONTEXT.Password">
            <summary>Password.</summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.WWAN_CONTEXT_LIST">
            <summary>
             List of contexts.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WWAN.WWAN_CONTEXT_LIST.ContextList">
            <summary></summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.PhonebookContent">
            <summary>
            Represents the content type of the stored phonebook.  For example, there are
            usually multiple phonebooks stored on a SIM card (Contact list, emergency numbers
            received calls....). Use this property to determine which type of content the
            phonebook object represents.  Use the "PhonebookContent" property of the object
            to get this enum.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.Regular">
            <summary>
            Regular phonebook content (contact list).
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.Services">
            <summary>
            Services phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.Mailboxes">
            <summary>
            Mailboxes phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.OwnNumbers">
            <summary>
            Own numbers phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.DialedCalls">
            <summary>
            Dialed calls phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.ReceivedCalls">
            <summary>
            Received calls phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.MissedCalls">
            <summary>
            Missed calls phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.WhiteList">
            <summary>
            White list phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.BlackList">
            <summary>
            Black list phonebook content.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.PhonebookContent.Emergency">
            <summary>
            Emergency phonebook content.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.DataCodingScheme">
            <summary>
            Represents the encoding scheme for data stored in a PhonebookEntry.  The set
            datacoding scheme determines how many characters can actually be stored in a
            phonebook entry.  For example, you can store approximately twice as many characters 
            using the Ascii8Bit encoding Vs. the Unicode 16Bit encoding (but you will not be able
            to store unicode characters). Use the Phonebook objects property 
            "SupportedDataCodingSchemes" to determine which encoding scheme(s) can be set in that 
            phonebook's entries.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsDefault">
            <summary>
            Let the driver decide which coding scheme is best.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsGsm7Bit">
            <summary>
            GSM encoding scheme.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsAscii8Bit">
            <summary>
            CDMA encoding scheme.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsUnicode16Bit">
            <summary>
            GSM encoding scheme.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsBinary8Bit">
            <summary>
            GSM and CDMA encoding scheme.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.DataCodingScheme.SmsGsmPdu">
            <summary>
            GSM encoding scheme.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCallStatus">
            <summary>
            Represents the state of a voice call.  A voice call will usually progress through 
            at least three of the states below (example: Dialing -> Active -> NormalTermination).
            The status of a voice call can be retrieved through the GetStatus() method in the
            VoiceCall object, or an application can be notified of any status change through
            the "StatusChangeEvent" event (recommended method).
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Active">
            <summary>
            The voice call is active. You may speak with the connected parties now.
            All calls in the active state are able to converse.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Held">
            <summary>
            The voice call is held.  Other parties will be unable to hear or speak to you.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Dialing">
            <summary>
            The network is attempting to connect the call with the other party.  
            This state is used for outgoing calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Alerting">
            <summary>
            The other party is being alerted of an incoming voice call 
            (i.e. their phone is ringing). This state is used for outgoing calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Incoming">
            <summary>
            An incoming call will always have this
            state if there are no other conversations at the time (your phone is ringing).
            A This state is used for incoming calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Waiting">
            <summary>
            An "incoming" call will always have this
            state if there are other conversations at the time (call waiting ringing).
            This state is used for incoming calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.NoAnswer">
            <summary>
            The other party did not answer the call. This state is used for outgoing calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.NoCarrier">
            <summary>
            The modem was not able to connect to the remote system. 
            This state is used for outgoing calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.Busy">
            <summary>
            The other parties line is busy. This state is used for outgoing calls only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.SupplementaryAccepted">
            <summary>
            Status to indicate that the supplementary command has been accepted by the 
            network (i.e. sending a *# command through the VoiceCall object's DialNumber method). 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallStatus.NormalTermination">
            <summary>
            The call was terminated under normal conditions (One of the parties may have 
            hung-up or the call may have been disconnected).
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCallFlags">
            <summary>
            Represents any active "properties" a voice call may possess.  
            An application can be notified of any changes to the call flags, which will usually
            correspond to a change in status, through the "StatusChangeEvent" event.  The
            most useful flag is the "LastEvent" flag.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallFlags.Incoming">
            <summary>
            This is an incoming call.  The other party initiated this voice call.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallFlags.Conference">
            <summary>
            This call is part of a conference (More than one voice calls are in
            the same state, active or held).
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallFlags.FirstEvent">
            <summary>
             This is the first event for the call.
              Please note: The first event generates an Incoming Call Event
              through the VoiceCallManager.  An application will never see this set.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallFlags.LastEvent">
            <summary>
            This will be the last event sent for this voice call.  The call has been 
            terminated (for any reason) and the VoiceCall object is no longer "usable".  
            The voice call object should be deleted whenever convienent.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallFlags.WithheldIncomingNumber">
            <summary>
            The calling party withheld their phone number.  GetOtherPartyCallerId() will
            return an empty string.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceForwardingReason">
            <summary>
            Represents the reason(s) for forwarding a voice call.  Get the settings for each
            forwarding reason(s) from the WWAN network through the VoiceCallManager's 
            GetForwardingData method. Change the networks forwarding settings for any reason
            with the EnableForwarding or DisableForwarding methods.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.Unconditional">
            <summary>
            All calls forwarded, overrides any set conditional reasons.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.Busy">
            <summary>
            Forward the incoming call if this line is busy.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.NoAnswer">
            <summary>
            Forward the incoming call if it is not answered within a specified timeout 
            period.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.NotReachable">
            <summary>
            Forward the incoming call if out of reach (Ex. not connected to the network).
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.ReasonAll">
            <summary>
            Represents the reasons: Unconditional, Busy, NoReply, and NotReachable.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingReason.AllConditional">
            <summary>
            Represents the reasons: Busy, NoReply, and NotReachable.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceCallerIdSetting">
            <summary>
            Represents the setting of the outgoing voice caller Id.  Use the 
            GetOutgoingCallerId method to retrieve the currently set value of this 
            property.  Use the SetOutgoingCallerId method to change the setting of 
            this property in the network.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallerIdSetting.Default">
            <summary>
            Use the subscription default.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallerIdSetting.Show">
            <summary>
            Show outgoing caller Id.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceCallerIdSetting.Hide">
            <summary>
            Hide outgoing caller Id.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceServiceStatus">
            <summary>
            Represents the status of a WWAN voice service. This enum is returned in the response
            of the VoiceCallManager's GetForwardingData method to represent the the status of 
            the voice forwarding service.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceServiceStatus.Unknown">
            <summary>
            Unable to retrieve the status of the service.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceServiceStatus.Enabled">
            <summary>
            The service is fully enabled.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceServiceStatus.Disabled">
            <summary>
            The service is fully disabled.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceServiceStatus.SomeEnabled">
            <summary>
            Some of the service is enabled. For example, if forwarding is enabled for the 
            reason "Busy" but disabled for all other reasons, "SomeEnabled" is the service 
            status when forwarding data is requested for "ReasonAll".
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.VoiceForwardingData">
            <summary>
            Voice call forwarding settings.  An application can get the forwarding data 
            for each forwarding reason(s) from the WWAN network through the VoiceCallManager's 
            GetForwardingData method. An application can change the networks forwarding 
            settings for any reason with the EnableForwarding or DisableForwarding methods.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingData.reason">
            <summary>
            The type of situation that will cause the network to forward an incoming voice call.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingData.number">
            <summary>
            The phone number to forward the incoming voice call to.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WWAN.VoiceForwardingData.timeout">
            <summary>
            Time, in seconds, to wait before forwarding.  Only applies to Reasons: "NoAnswer", 
            "All", and "AllConditional".  A value of zero will leave the timeout unchanged.
            The value set may be rounded to the nearest allowed value (due to network
            requirements).  Allowed values are (in seconds): 5, 10, 15, 20, 25, or 30.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralType">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.Unknown">
            constant for specifying unknown peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.InternalBluetooth">
            constant for specifying internal bluetooth radio
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.InternalGSM">
            constant for specifying GSM radio
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.PCMCIA_Slot0">
            constant for built-in PCMCIA slot 0
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.PCMCIA_Slot1">
            constant for built-in PCMCIA slot 1
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.SDMMC_Slot">
            constant for built-in SDMMC
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralSetting">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralSetting.Enable">
            constant for specifying enabling/disabling of a peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralSetting.PowerMode">
            constant for specifying power mode of a peripheral device
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralPowerMode">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.AlwaysOn">
            keep device on all the time
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.AlwaysOff">
            keep device off all the time
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffFollowSuspend">
            turn device off after terminal goes into suspend
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor5Minutes">
            turn device off after on for 5 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor15Minutes">
            turn device off after on for 15 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor30Minutes">
            turn device off after on for 30 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor60Minutes">
            turn device off after on for 60 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor120Minutes">
            turn device off after on for 120 minutes
        </member>
        <member name="T:PsionTeklogix.Indicators.NamedMutex">
            <summary>
            Named Mutex class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.NamedMutex.ReleaseMutex">
            <summary>
            Releases a handle to a named mutex.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.SettingsPropertyAttribute">
            @deprecated
            <summary>
            Defines an attribute that may be applied to fields or properties
            so that they may be persisted to the configuration file.
            </summary>
            <remarks>
            <p>Please note: the Configuration Namespace is deprecated.
            Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
            <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/> 
            </p>        
            This attribute may only be applied to a public property or field.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Configuration.SettingsPropertyAttribute.#ctor">
            <summary>
            Creates an instance of the SettingsPropertyAttribute.
            </summary>
        </member>
        <member name="T:PsionTeklogix.WWAN.SetBandInternal">
            <summary>
            structure used in SetEnabledBandsNative. Must be in sync with the PInvoke
            layer
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Orientations">
            <summary>Possible screen orientations.</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient0Degrees">
            <summary>Landscape</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient90Degrees">
            <summary>Portrait</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient180Degrees">
            <summary>Inverted landscape.</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient270Degrees">
            <summary>Inverted portrait.</summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.OrientationChangedEventHandler">
            <summary>
            The OrientationChangedEventHander delegate represents the method that will be called
            when the orientation is changed by another program or section of a program's code.
            This allows a form or some other visual component to re-orient based on the new
            screen orientation.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Screen">
            <summary>
            Allows an application to determine the properties of a Psion Teklogix device's
            display such as the current orientation, whether screen orientation changes are 
            supported, and if the device has a touch screen.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.#cctor">
            <summary>
            Initializes static members of the screen class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.#ctor">
            <summary>
            Creates an instance of the screen class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.OnOrientationChanged">
            <summary>
            Overridable member that is called when the orientation is 
            being changed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.IsTouchScreen">
            <summary>
            Detects whether touch screen is supported or not.
            </summary>
            <remarks>
             This method is deprecated.
             Get PsionTeklogix.SystemPTX.Touchscreen.Enable property instead.
            </remarks>        
            <returns>
            If Touch Screen supported, returns true, otherwise false.
            </returns>
        </member>
        <member name="E:PsionTeklogix.Windows.Forms.Screen.OrientationChangedEvent">
            <summary>
            Occurs when the screen orientation has changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.Screen.CurrentOrientation">
            <summary>
            Gets or Sets the current screen rotation. Once the screen has been rotated
            the SIP and desktop will be informed that the screen has been rotated.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.Screen.IsRotationSupported">
            <summary>
            Gets an indicator if screen rotation is supported.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.TransmittedEventArgs">
            <summary>
            Represents the arguments to an TransmittedEvent
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.TransmittedEventArgs.#ctor">
            <summary>
            Creates a new instance of the TransmittedEventArgs class.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.Win32">
            <summary>
            Win32 API definitions.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE">
            <summary>
            This enumeration describes the device power states. 
            The PwrDeviceUnspecified and PwrDeviceMaximum values are 
            not valid device power states but are used in some Power 
            Manager APIs.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.PwrDeviceUnspecified">
            <summary>
            The system state is unspecified. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D0">
            <summary>
            Full On. This is the state in which the device is on 
            and running. It is receiving full power from the system and is 
            delivering full functionality to the user. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D1">
            <summary>
            Low On. This is the state in which the device is fully 
            functional at a lower power state than D0, a lower 
            performance state than D0, or both. This state is 
            applicable when the device is being used, but where 
            peak performance is unnecessary and power is at a 
            premium. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D2">
            <summary>
            Standby. This is the state in which the device is 
            partially powered with automatic wakeup on request. 
            The device is effectively standing by. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D3">
            <summary>
            Sleep. This is the state in which the device is 
            partially powered with device-initiated wakeup if 
            available. A device in state D3 is sleeping but 
            capable of raising the System Power State on its own. 
            It consumes only enough power to be able to do so; 
            which must be less than or equal to the amount of 
            power used in state D2. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D4">
            <summary>
            Off. This is the state in which the device is not 
            powered. A device in state D4 should not be consuming 
            any significant power. Some peripheral busses require 
            static terminations that intrinsically use non-zero 
            power when a device is physically connected to the bus;
            a device on such a bus can still support D4. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.PwrDeviceMaximum">
            <summary>
            Valid device power state values are greater than 
            PwrDeviceUnspecified and less than PwrDeviceMaximum. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.Configuration.Section">
            @deprecated
            <summary>
            A section defines a unique namespace for property values to be stored.
            </summary>
            <remarks>    
            <p>Please note: the Configuration Namespace is deprecated.
            Use .NET Compact Framework 2.0 microsoft.win32 namespace instead.    
            <see href="http://msdn2.microsoft.com/en-us/library/microsoft.win32.aspx"/></p>
               
            Sections relate to an instance of a class and properties relate to the
            properties of the class.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.#ctor(System.Xml.XmlDocument,System.String,System.String,PsionTeklogix.Configuration.SettingTypes,PsionTeklogix.Configuration.SettingScopes)">
            <summary>
            Creates an instance of a section.
            </summary>
            <param name="document">The XML document the section exists in.</param>
            <param name="fileName">XML document file name.</param>
            <param name="sectionName">Name of this section.</param>
            <param name="type">Is the section a configuration or preferences.</param>
            <param name="scope">Is the section global or local.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.SetProperty(System.String,System.Object,System.Type)">
            <summary>
            Set the value of a property from an enumerated value. It sets the
            value in the config file to the enumeration name for the property
            value.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <param name="enumType">The Type of the enumeration.</param>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.SetProperty(System.String,System.Object)">
            <summary>
            Set the value of a property.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <exception cref="T:System.Exception">Thrown when an attempt to change
            Configuration section was made.</exception>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetEnum(System.String,System.Object,System.Type)">
            <summary>
            Gets the value of a property if it is enumerated. It sets the
            property value from a string representing the enumerated value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="enumType">typeof(enumType).</param>
            <returns></returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetBoolean(System.String,System.Boolean)">
            <summary>
            Get a boolean property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A boolean property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetString(System.String,System.String)">
            <summary>
            Get a string property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A string property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetInt32(System.String,System.Int32)">
            <summary>
            Get a Int32 property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A Int32 property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetInt64(System.String,System.Int64)">
            <summary>
            Get a Int64 property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A Int64 property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetSingle(System.String,System.Single)">
            <summary>
            Get a single property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A single property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetDouble(System.String,System.Double)">
            <summary>
            Get a double property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <returns>A Double property value.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetProperty(System.String,System.Object,System.Type)">
            <summary>
            Get a property value for the specified type.
            </summary>
            <param name="name">Name of property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="valueType">The type of a value.</param>
            <returns>A property value as specified by valueType.</returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.GetEnumName(System.Type,System.Object)">
            <summary>
            Replacement for FieldInfo.GetName
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PsionTeklogix.Configuration.Section.ParseEnumValue(System.Type,System.String)">
            <summary>
            Replacement for Enum.Parse which is missing from the Compact Framework
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:PsionTeklogix.Configuration.Section.FileName">
            <summary>
            Gets the file name the section is located in.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.Section.SectionName">
            <summary>
            Gets the section name working with.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.Section.Type">
            <summary>
            Gets the type of section, configuration or preferences.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.Section.Scope">
            <summary>
            Gets the scope, global or local.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Configuration.Section.SectionElement">
            <summary>
            Returns the section as XmlElement.
            </summary>
            <remarks>
            Use if hierarchical configuration is necessary.
            </remarks>
            <returns>The section as XmlElement.</returns>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanEventHandler">
            <summary>
            The ScanEventHandler delegate represents the method that will be called
            when a software scan has been initiated.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanCompleteEventHandler">
            <summary>
            The ScanCompleteEventHandler delegate represents the method that will be called
            when a scan has been successfully completed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanTriggerEventHandler">
            <summary>
            @deprecated Please use Trigger namespace.        
            The delegate for trigger event handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedEventHandler">
            <summary>
            The delegate for failed-scan event handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanSingleClickEventHandler">
            <summary>
            @deprecated Please use Trigger namespace.            
            The delegate for receiving single trigger clicks (quick press-and-release).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanDoubleClickEventHandler">
            <summary>
            @deprecated Please use Trigger namespace.            
            The delegate for receiving double trigger clicks (press-and-release followed by
            press-and-release, or press-and-release followed by press-and-hold).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.Scanner">
            <summary>
            The Scanner class is used to hold the barcode data read from a scanner. 
            The Scanner class is used to control barcode scanners attached to a Psion Teklogix device. All types of scanners are supported by the Scanner class: internal, external, serial, etc. as long as the scanner itself is supported by the Psion Teklogix device. 
            The scanner class can be used to perform the following operations: 
            Enable/Disable barcode scanning at the hardware level 
            Check to see if barcode scanning is enabled/disabled 
            Fire the scanner manually. 
            Gets/Sets the setting section that the will be used to
            determine the driver, instantiate the driver and configure
            the driver.
            </summary>
            <remarks>
            The barcode scanner could be either an internal or external scanner and the
            triggering of a scan can be performed from the scanner or by software.
            Scanner class also alows developers to write their own Scanner Drivers. For this
            see an example source code for SE 923 scanner will be provided in the future.
            </remarks>
            <example>
            The following example shows how the scanner is utilized programatically.
            You can also use the VisualStudio IDE to create similar code as this 
            class derives from component. This example also shows how you programmatically
            set the properties of the driver.
            See the <see cref="P:PsionTeklogix.Barcode.Scanner.SettingSection"/> for the details on
            how to use a configuration or preference file to setup the scanner.
            <code lang="C#">
            public void Scan()
            {
                // Initialize the scanner driver
                this.scannerServicesDriver1 = new PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver();
                this.scanner1 = new PsionTeklogix.Barcode.Scanner();
               // 
               // scannerServicesDriver1
               // 
               this.scannerServicesDriver1.ClickData = 5;
               this.scannerServicesDriver1.ClickTime = 4;
               this.scannerServicesDriver1.CodabarEnabled = false;
               this.scannerServicesDriver1.Code11Enabled = false;
               this.scannerServicesDriver1.Code128Enabled = true;
               this.scannerServicesDriver1.Code39Enabled = true;
               this.scannerServicesDriver1.Code93Enabled = false;
               this.scannerServicesDriver1.Discrete2Of5Enabled = false;
               this.scannerServicesDriver1.DotTime = 1;
               this.scannerServicesDriver1.EAN13Enabled = true;
               this.scannerServicesDriver1.EAN8Enabled = true;
               this.scannerServicesDriver1.I2Of5Enabled = true;
               this.scannerServicesDriver1.IATA2Of5 = false;
               this.scannerServicesDriver1.MSIPlesseyEnabled = false;
               this.scannerServicesDriver1.ScanBeep = true;
               this.scannerServicesDriver1.ScanIndicator = true;
               this.scannerServicesDriver1.ScanLog = true;
               this.scannerServicesDriver1.ScanResult = true;
               this.scannerServicesDriver1.ScanResultTime = 3;
               this.scannerServicesDriver1.Security = true;
               this.scannerServicesDriver1.ShortCode = true;
               this.scannerServicesDriver1.UPCAEnabled = true;
               this.scannerServicesDriver1.UPCEANEnabled = true;
               this.scannerServicesDriver1.UPCEEnabled = true;
               this.scannerServicesDriver1.Verify = true;
               // 
               // scanner1
               // 
               this.scanner1.Driver = this.scannerServicesDriver1;
               this.scanner1.ScanCompleteEvent += new PsionTeklogix.Barcode.ScanCompleteEventHandler(this.scanner1_ScanCompleteEvent);
               scanner1.Scan();
            }
            
            private void scanner1_ScanCompleteEvent(object sender, PsionTeklogix.Barcode.ScanCompleteEventArgs e)
            {
               private string barcode = e.Text;
            }
            </code>
            <code lang="VB">
            
            Friend WithEvents ScannerServicesDriver1 As PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver
            Friend WithEvents Scanner1 As PsionTeklogix.Barcode.Scanner
            Me.ScannerServicesDriver1 = New PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver
            Me.Scanner1 = New PsionTeklogix.Barcode.Scanner
            '
            'ScannerServicesDriver1
            '
            Me.ScannerServicesDriver1.ClickData = 7
            Me.ScannerServicesDriver1.ClickTime = 9
            Me.ScannerServicesDriver1.CodabarEnabled = False
            Me.ScannerServicesDriver1.Code11Enabled = False
            Me.ScannerServicesDriver1.Code128Enabled = True
            Me.ScannerServicesDriver1.Code39Enabled = True
            Me.ScannerServicesDriver1.Code93Enabled = False
            Me.ScannerServicesDriver1.Discrete2Of5Enabled = False
            Me.ScannerServicesDriver1.DotTime = 45
            Me.ScannerServicesDriver1.EAN13Enabled = True
            Me.ScannerServicesDriver1.EAN8Enabled = True
            Me.ScannerServicesDriver1.I2Of5Enabled = True
            Me.ScannerServicesDriver1.IATA2Of5 = False
            Me.ScannerServicesDriver1.MSIPlesseyEnabled = False
            Me.ScannerServicesDriver1.ScanBeep = True
            Me.ScannerServicesDriver1.ScanIndicator = True
            Me.ScannerServicesDriver1.ScanLog = True
            Me.ScannerServicesDriver1.ScanResult = True
            Me.ScannerServicesDriver1.ScanResultTime = 4
            Me.ScannerServicesDriver1.Security = True
            Me.ScannerServicesDriver1.ShortCode = True
            Me.ScannerServicesDriver1.UPCAEnabled = True
            Me.ScannerServicesDriver1.UPCEANEnabled = True
            Me.ScannerServicesDriver1.UPCEEnabled = True
            Me.ScannerServicesDriver1.Verify = True
            '
            'Scanner1
            '
            Me.Scanner1.Driver = Me.ScannerServicesDriver1
            Scanner1.Scan()
            
            Private Sub OnScanComplete(ByVal sender as Object, ByVal e as ScanCompleteEventArgs)
                Private barcode as string = e.Text
            End Sub
            </code>
            </example>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#cctor">
            <summary>
            Initialize at run time only once the static vars
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#ctor">
            <summary>
            Creates an empty instance of the Scanner class. Not useable
            until Driver or SettingSection is set.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#ctor(PsionTeklogix.Barcode.ScannerDriverBase)">
            <summary>
            Creates a new instance of the Scanner class.
            </summary>
            <param name="driver">A scanner driver.</param>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.Scan">
            <summary>
            Tell the scanner to start scanning.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScan">
            <summary>
            Callback that will be executed when a scan has been initiated. This is useful
            when there is a trigger on an external scanner and enables the application 
            to be notified of the event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanComplete(System.String,System.Byte[],System.String)">
            <summary>
            Callback that will be executed when a scan has been completed.
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanComplete method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanComplete in a derived class, be 
            sure to call the base class's OnScanComplete method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanTriggerEvent(PsionTeklogix.Barcode.TriggerState)">
            <summary>
            @deprecated Please use Trigger namespace.        
            Callback that will be executed when the trigger is pressed or released.
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanTriggerEvent method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanTriggerEvent in a derived class, be 
            sure to call the base class's OnScanTriggerEvent method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanSingleClickEvent">
            <summary>
            Callback that will be executed when a single-click event is seen (a quick
            press and release of a trigger).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanSingleClickEvent method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanSingleClickEvent in a derived 
            class, be sure to call the base class's OnScanSingleClickEvent method so that 
            registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanDoubleClickEvent(System.String)">
            <summary>
            Callback that will be executed when a double-click event is seen (a quick
            press-release-press-release of a trigger).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanDoubleClickEvent method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanDoubleClickEvent in a derived 
            class, be sure to call the base class's OnScanDoubleClickEvent method so that 
            registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanFailedEvent(PsionTeklogix.Barcode.ScanFailedError)">
            <summary>
            Callback that will be executed when a scan fails (timeout or other reason).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanFailedEvent method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanFailedEvent in a derived class, be 
            sure to call the base class's OnScanFailedEvent method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.TranslateToImagerSdkSymbology(PsionTeklogix.Barcode.BarcodeSymbology)">
            <summary>
            Translates a barcode symbology code from the Mobile Devices SDK enumeration to
            the Imager SDK enumeration. The two enumerations do not map to each other on
            a one-to-one basis, so the translation is approximate and round-trip mappings
            will not necessarily result in the original value.
            </summary>
            <param name="mdsdkSymbology">the MDSDK symbology to be translated</param>
            <returns>the corresponding Imager SDK symbology value</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value is unrecognized.
            </exception>
            <exception cref="T:System.ApplicationException">Thrown if no corresponding value exists.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.TranslateFromImagerSdkSymbology(System.Int32)">
            <summary>
            Translates a barcode symbology code from the Imager SDK enumeration to the
            Mobile Devices SDK enumeration. The two enumerations do not map to each other
            on a one-to-one basis, so the translation is approximate and round-trip
            mappings will not necessarily result in the original value.
            </summary>
            <param name="imagerSdkSymbology">the Imager SDK symbology to be translated</param>
            <returns>the corresponding Mobile Devices SDK symbology value</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value is unrecognized.
            </exception>
            <exception cref="T:System.ApplicationException">Thrown if no corresponding value exists.
            </exception>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanEvent">
            <summary>
            Occurs when a scan has been initiated.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanCompleteEvent">
            <summary>
            Occurs when a scan has been completed.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanTriggerEvent">
            <summary>
            @deprecated Please use Trigger namespace.        
            A ScanTriggerEvent will occur whenever the user presses or releases the scan 
            button, or presses and releases the scanner trigger. The trigger event arguments
            received with the event will indicate the status of the trigger at the time
            of the event. Single-click and double click events replace trigger events - 
            no trigger event will be seen if a single click or double-click event occurs.
            </summary>
            <remarks>
            <p> A trigger event is only meant to be informational in nature: a barcode scan
            is initiated when the trigger or scan button is pressed. There is no need for
            an application to manually trigger a barcode scan.</p>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanFailedEvent">
            <summary>
            A ScanFailedEvent will occur when the scanner fails to scan a barcode. A failed
            scan occurs when either the user releases the scanner trigger or scan button
            before a barcode can be decoded, or when the scanner fails to decode a barcode
            within an alloted time. The former generates a Scan Failed event, with an error
            code of "Cancelled". The latter generates a Scan Failed event, with an error
            code of "TimedOut".
            </summary>
            <remarks>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanSingleClickEvent">
            <summary>
            @deprecated Please use Trigger namespace.            
            A single-click event occurs when the user quickly presses and releases the
            scan button or scanner trigger (within one third of the configured double-
            click time).
            </summary>
            <remarks>
            <p>If a single-click event occurs, no trigger events will be seen.</p>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanDoubleClickEvent">
            <summary>
            @deprecated Please use Trigger namespace.            
            A double-click event occurs when the user quickly presses and releases the
            scan button or scanner trigger twice or presses and releases the trigger, and
            then presses and holds it down within the configured double-click time. 
            </summary>
            <remarks>
            <p>If a double-click event occurs, no trigger events will be seen.</p>
            <p>A double-click event will always be preceded by a single-click event.</p>
            <p>This event will only be seen when using the ScannerServicesDriver control.</p>
            <p>By default, double-click data is sent to the application as barcode, through
            the ScanCompleteEvent event. In order to receive double-click events, the
            property <LINK>PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SendDoubleClickDataAsScannerData</LINK>
            must be set to false. </p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.Scanner.Enabled">
            <summary>
            Gets/Sets whether the scanner is enabled or disabled.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.Scanner.Driver">
            <summary>
            Gets/Sets the driver that will be used for the scanner.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.Scanner.SettingSection">
            <summary>
            Gets/Sets the setting section that the will be used to
            determine the driver, instantiate the driver and configure
            the driver.
            </summary>
            <remarks>
            If this property is set to a value then there will be no design time
            configuration of the scanner driver properties. At runtime, the global and
            local configuration and preferences will be queried for a property 'Driver'.
            The order of precedence is preference files over configuration files and 
            local over global enabling an application to have a user defined definition.
            This property specifies the driver that will be used for the scanner
            and will be in the format 'Assembly, Class'. For example the configuration
            file will have entry [MyScanner Driver="PsionTeklogix.IO.Scanner.ScannerServices.ScannerServicesDriver"]
            where the section name is MyScanner.
            This will cause the ScannerServicesDriver driver to be activated and assigned to this 
            scanner. The driver will then be requested to load it's configuration
            from the same section. Refer to the driver documentation for the
            fields that are required to configure the driver.
            <para/>
            This feature allows the application to be written in a scanner independent
            fashion and use a configuration file at runtime to establish what scanner
            and scanner properties are being used for a given device.
            </remarks>
            <example>
            The following example shows how to use a configuration file to setup the
            scanner.
            <code lang="XML">
            [configuration]
                [MyScanner
                    Driver="PsionTeklogix.IO.Barcode.ScannerServices.ScannerServicesDriver"
                    UPCAEnabled="True"
                    UPCEEnabled="True"
                /]
            [/configuration]
            </code>
            <code lang="C#">
            public void Scan()
            {
                // Intialize the scanner and scan the barcode.
                Scanner scanner = new Scanner();
                scanner.SettingSection = "MyScanner";
                scanner.Scan();
            }
            </code>
            <code lang="VB">
            public void Scan()
            {
                // Intialize the scanner and scan the barcode.
                Dim scanner Scanner = New Scanner()
                scanner.SettingSection = "MyScanner"
                scanner.Scan
            }
            </code>
            </example>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerEvent">
            <summary>   
             Contains the data associated with a trigger event.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerUp">
            <summary> Indicates that a trigger was released. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerDown">
            <summary> Indicates that a trigger was pressed. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerUpDownMask">
            <summary> A mask for up/down events. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerSingleClick">
            <summary> Indicates that a trigger was quickly pressed and released.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerDoubleClick">
            <summary> Indicates that a trigger was quickly pressed and released, then pressed
            again.</summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerEvent.#ctor(System.UInt32,System.UInt32)">
            <summary>   
             Trigger event constructor.
            </summary>
            <param name="id">The source of the trigger event.</param>
            <param name="flags">The event information.</param>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerEvent.SourceId">
            <summary> The source of the trigger event</summary>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerEvent.EventFlags">
            <summary> 
            The event information (trigger up/down, and single/double click information)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerEventHandler">
            <summary>
            Trigger events delegate.
            </summary>        
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerControl">
             <summary>   
             The TriggerControl class used to manage the trigger on Psion Teklogix device.
             </summary>   
             <remarks>
             <p> The TriggerControl class allows applications to:
             * Register to receive trigger events.
             * Register clients that can then be sent trigger events.
             * Change the double-click time for a source.
             * Change the double-click time for all sources.
             * Request a list of registered consumers.
             * Request a list of consumers associated with a trigger source.
             * Create, modify, or remove the associations (mappings) for a trigger source.
             </p>
            
             <p>Using the operations listed above, an application can use the TriggerControl 
             class to perform various operations, including:
             
             * Allowing the scan buttons and pistol trigger to perform application-specific
               operations, or operations not performed by default. For example, on a device
               with an external RFID reader and an internal imager, an application could 
               configure the Imager to use the pistol grip trigger, and the scan button to
               perform RFID operations.
             * Preventing various hardware components (an internal scanner for example)
               from receiving trigger presses during certain application operations.
             * Intercepting trigger events, in order to perform some application-defined
               operation.
             * Generating fake trigger events.
             * "Listen" for trigger events sent to a particular hardware component, such
               as an internal imager, in order to display a message/indication.
             </p>
            
             <p>A trigger event is an event generated when the state of the trigger changes
             on a Psion Teklogix device. The trigger can be in one of two states: up or down.
             A trigger down event is be generated when the trigger (the scan button for
             example) is pressed, and a trigger up event when the button is released.</p>
            
             <p>A trigger event received by an EventListener can also have other flags set, the
             single- and double-click event flags. A double-click event occurs when the user
             quickly presses and releases a trigger twice in a row. A single-click event 
             occurs when the user quickly presses and releases the trigger once, and occurs
             as part of a double-click event. In order to receive single- and double-click
             flags in trigger event structures, the following conditions must be met:
             
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
               double-click time, which will generate a single-click event.
             * The user must press the trigger within the configured double-click time.
               Doing so will generate a trigger down event with the double-click flag
               set.
             * If the user releases the trigger within the configured double-click time,
               trigger up event with the double-click flag set will be generated.
             </p>
             
             <p>A trigger source is simply that: the source of a trigger event. There are a
             variety of possible trigger sources, including: the pistol grip trigger, the
             yellow scan button(s) found on most Psion Teklogix devices, and other keyboard
             buttons. New trigger sources can also be defined.</p>
            
             <p>Trigger sources are identified by trigger source IDs. A trigger source ID is an
             arbitrary integer value that represents the trigger source. For example, 0 is
             default trigger source ID - it is sent by the 753x's grip trigger and by the
             scan buttons on all Psion Teklogix devices. The trigger source ID of the scan
             button(s) can be changed using the keyboard scancode remapping API, and other
             keyboard buttons can also be mapped to trigger source IDs. An application could,
             for example, map the F1 through F6 buttons to trigger source IDs 1-6, 
             respectively.</p>
            
             <p>A trigger consumer is an application, driver, or service that registers to 
             receive (or "consume") trigger events. A trigger consumer is identified by its
             name, a text string.</p>
            
             <p>A trigger association or mapping is an association between a trigger source and
             trigger consumer. Only trigger consumers associated or mapped to a trigger source
             will receive trigger events from that source. More than one consumer can register 
             to receive events from a trigger source at a time, although this behaviour is 
             not recommended. Some trigger consumers represent drivers for hardware components 
             that should not be operating simultaneously due to their power requirements, 
             such as an internal imager and a tethered RFID device.</p>
            
             <p>The following example demonstrates how to use the TriggerControl class to 
             temporarily take control of the default trigger source, without affecting
             existing mappings [i.e., the original mappings will be restored once the program
             terminates].</p>
             </remarks>
            
             <example>
                The code below demostrates how to register a consumer, assign control of the
              default trigger source to it, and register to receive trigger events from the
              trigger source. The code then simulates two trigger presses, with a short delay
              between the trigger press/release.
             
             <code>
                try
                {
                    using (TriggerControl tc = new TriggerControl())
                    {
                        tc.Initialize();
                        tc.RegisterConsumer("TestConsumer");
                        tc.AddMapping(0, "TestConsumer", 
                            TriggerControl.Flags.Override | TriggerControl.Flags.Temporary);
                        tc.RegisterForEvents("TestConsumer");
            
                        tc.triggerEvent += new TriggerEventHandler(OnTriggerEvent);
            
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerDown));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerUp));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerDown));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerUp));
            
                        /// ... other operations here ...
            
                        tc.triggerEvent -= new TriggerEventHandler(OnTriggerEvent);
                        tc.RemoveMapping(0, "TestConsumer");
                        tc.DeregisterConsumer("TestConsumer");
                        tc.DeregisterFromEvents("TestConsumer");
                    }
                }
                catch( Exception ) 
                {
                    // ... some operation here ...
                }
            
                private void OnTriggerEvent( Object source, TriggerEvent evt )
                {
                    // ... some operation here ...
                }
             </code>
             
               The code below demonstrate a trigger mapping to F2 key. It will fire the
               Imager scanner and call OnTriggerEvent each time user press F2 key.
             
             <code>
               using PsionTeklogix.Keyboard;
               using PsionTeklogix.Trigger;
             
               KeyRemapper remapper;
               TriggerControl tc;
             
               try
               {
                    remapper = new KeyRemapper();
                    remapper.RemoveAll();
                    remapper.Add(Keyboard.TranslateToScanCode(Key.F2), null, 
                                 Function.FunctionTrigger, (int)Key.F2);
            
                    tc = new TriggerControl();
                    tc.Initialize();
                    tc.AddMapping(Keyboard.TranslateToTriggerID(Key.F2), "Imager", 
                                  TriggerControl.Flags.WantsTriggerEvents | 
                                  TriggerControl.Flags.Override);
                    tc.RegisterForEvents("Imager");
                    tc.triggerEvent += new TriggerEventHandler(OnTriggerEvent);
                }
                catch (TriggerException exp)
                {
                    MessageBox.Show("Trigger Exception Caught:" + exp.Message);
                }
                catch (Exception exp)
                {
                    MessageBox.Show("Exception Caught:" + exp.Message);
                }
             
                private void OnTriggerEvent( Object source, TriggerEvent evt )
                {
                    // handle trigger event here
                }    
              </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.#ctor">
            <summary>   
            Used to create an instance of the TriggerControl class.
            </summary>
            <exception cref="T:System.OutOfMemoryException">OutOfMemoryException - If an internal 
            memory allocation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.TriggerApiNotFound - if the TriggerApi DLL was not found.
              If this error occurs, it is likely that the device image is too old and
              will need to be updated.
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Finalize">
            <summary>   
            Used to finalize an instance of the TriggerControl class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Dispose(System.Boolean)">
            <summary>   
            Releases resources used by this TriggerControl object.
            </summary>
            <param name="disposeManaged">true to release both managed and unmanaged 
             resources; false to release only unmanaged resources.</param> 
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Dispose">
            <summary>   
            Releases resources used by this TriggerControl object.
            </summary>
            <remarks>
            Call Dispose when you are finished using the TriggerControl object. The
            Dispose method leaves the object in an unusable state.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Initialize">
            <summary>   
            ** Deprecated - Constructor takes care of initalization **
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RegisterForEvents(System.String)">
            <summary>   
             Registers the TriggerControl object as consumer with the specified name to 
            receive trigger events. All received trigger events will be published via the
            triggerEvent event.
            </summary>
            <param name="name">The name of a trigger consumer. A consumer name may not 
            contain backslashes, and may not duplicate existing system names. It should
            match the name of a registered trigger consumer.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.OutOfMemoryException">OutOfMemoryException - If an internal 
            memory allocation fails.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.TriggerApiNotFound - if the TriggerApi DLL was not found.
              If this error occurs, it is likely that the device image is too old and
              will need to be updated.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.DeregisterFromEvents(System.String)">
            <summary>   
            A previous registration established using the RegisterForEvents method is
            removed. Trigger events for the consumer with the specified name will no 
            longer be received by the TriggerControl instance.
            </summary>
            <param name="name">The name of a trigger consumer.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.PublishEvent(PsionTeklogix.Trigger.TriggerEvent)">
            <summary>   
             Generates a "fake" trigger event, which will be forwarded to the trigger
            driver. It will in turn pass the event on to all registered consumers with 
            mappings for the specified event source.
            </summary>
            <remarks>
            <p> WARNING: when simulating trigger events using this method, an 
            application MUST be well behaved. In other words, a trigger down must
            always be followed by a trigger up. Sending out multiple trigger down/up
            events in a row many result in unexpected behaviour in devices that receive
            trigger events.</p>
            <p> The trigger single and double click flags specified in the trigger
            event structure are ignored.</p>
            </remarks>
            <param name="evt">The trigger event information. The source ID should be set to
            the ID of the trigger source that is to have seemed to have generated the
            event. The event flags must have either the trigger down or trigger up
            flag set.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified event object was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.InternalError - An error during initialization occurred. The 
               trigger event cannot be published.
             * TriggerError.InvalidFlagsSet - if either no event flags were set, or
               both the trigger up and trigger down flags were set.
             * TriggerError.EventNotSent - The trigger event cannot be published at this
               time. An internal queue may be full.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RegisterConsumer(System.String)">
            <summary>   
             Registers a trigger event consumer. Once registered, a trigger event 
            consumer can be associated with one or more trigger event sources, allowing
            it to be sent trigger events.
            </summary>
            <remarks>
            <p> This method may be used to register the name of <b>any</b> trigger 
            consumer, including trigger consumers created by other applications
            or drivers.  Usually an application would register and handle its own
            trigger events exclusively, so in most cases you would pick a name
            that is unique.</p>
            </remarks>
            <param name="name">The name of the trigger consumer to register.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.AlreadyRegistered - if the specified consumer name is
              already registered.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.DeregisterConsumer(System.String)">
            <summary>   
             Deregisters a trigger event consumer. 
            </summary>
            <remarks>
            <p> When a consumer is deregistered, all mappings for the consumer are 
            removed.</p>
            <p> This method may be used to deregister the name of <b>any</b> trigger 
            consumer, including trigger consumers created by other applications
            or drivers. This behaviour is not recommended, as deregistering a 
            consumer registered by another driver or other system component will 
            prevent that driver/etc. from receiving further trigger events, and
            can prevent key system components (barcode scanner, imager, etc.) 
            from functioning properly.</p>
            </remarks>
            <param name="name">The name of the trigger consumer to deregister.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.NotRegistered - if the specified consumer name is not
              registered.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetRegisteredConsumers(System.Collections.ArrayList)">
            <summary>   
            Returns a list of all registered consumers.
            </summary>
            <remarks>
            <p> If no clients are registered the operation will complete successfully,
            however the list size will be set to zero.</p>
            </remarks>
            <param name="names">A list of consumer names. If successful, the list will 
              contain all of the registered trigger consumers, as strings.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name ArrayList was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetAssociatedConsumers(System.UInt32,System.Collections.ArrayList)">
            <summary>   
             Returns a list of all consumers associated with the specified trigger 
            source ID.
            </summary>
            <remarks>
            <p> If no clients are registered the operation will complete successfully,
            however the list size will be set to zero.</p>
            </remarks>
            <param name="sourceId">The source ID whose associations/mappings are being 
              queried.</param>
            <param name="names">A list of consumer names. If successful, the list will contain
              all of the registered trigger consumers associated with the specified
              trigger source, as strings.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name ArrayList was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.AddMapping(System.UInt32,System.String,System.UInt32)">
             <summary>   
              Used to create or add a mapping or association between a trigger source 
             and a consumer.
             </summary>
             <remarks>
             <p>In order to receive trigger events, a registered trigger consumer must be
             associated with one or more trigger sources. Once associated with a trigger
             source, a consumer will be sent trigger events coming from that source until
             deregistered, or until another mapping causes the existing mapping to be
             replaced.</p>
            
             <p>All mappings added are permanent. A consumer registered using the trigger
             control class will still be considered registered after a cold/warm restart
             of the device. As a result, applications not launched at startup (and/or
             do not run all the time) should use the "Temporary" flag (see below).</p>
            
             <p>It is possible to map one trigger source to multiple consumers. In other
             words, mappings for multiple consumers may be added to a single source.
             This procedure is not recommended for devices such as imagers and tethered
             RFID readers that can draw large amounts of current.</p>
            
             <p>It is possible to map multiple trigger sources to one consumer. The identity
             of the source generating the event is supplied with the event.</p>
            
             <p>When adding a trigger source-to-consumer mapping, an application may
             specify one or more control flags. Control flags are used to modify the
             way that an application registers.</p>
            
             <p>The Exclusive flag is used to prevent multiple consumers from being 
             simultaneously mapped to a trigger source. An application attempts to 
             create an exclusive association for a consumer with a trigger source that 
             already as a mapping, or attempts to add a mapping to a trigger source that
             has an exclusive mapping, the attempt will fail.</p>
            
             <p>The Override flag is used to override an existing mapping of any sort
             (exclusive or otherwise). All existing mappings will be replaced with the
             existing mapping.</p>
            
             <p>If the Temporary flag is set, the mapping will not persist across a
             warm or cold rest. In addition, if the Override flag is also set, the 
             original mapping(s) will be restored when the temporary client deregisters,
             or its mapping is removed. Note that only one temporary+override mapping
             can exist for a source at a time.</p>
            
             <p>If the IgnoreDupReg flag is set, and the specified mapping already exists, 
             no error will be returned.</p>
             
             </remarks>
             <param name="id">The trigger source ID the trigger consumer will be
                 associated with. When the trigger source is a ketboard key, the
                 Keyboard.TranslateToTriggerID() method must be used. For instance,
                 the following call will map the "A" key as the trigger source:
                 AddMapping(Keyboard.TranslateToTriggerID(Key.A),
                            "TestConsumer",
                            TriggerControl.Flags.Temporary);
                 This assumes that the A key has already been remapped to produce a trigger
                 event, either through the Add Key button of the trigger control panel, or
                 from an application using the keyboard remapping module.
                  
             </param>
             <param name="name">The name of the trigger consumer to associate with the trigger
                source ID.</param>
             <param name="flags">The trigger control flags (see above, and 
                TriggerControlFlags)</param>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             TriggerControl object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified consumer name was null.</exception>
             <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
             One of the following error codes will be with the exception:
              * TriggerError.CommunicationFailure - if the Trigger driver is not
               running, or has failed.
              * TriggerError.NotRegistered - the specified consumer is not registered
              * TriggerError.MappingExists - the specified mapping already exists
              * TriggerError.ExclusiveMappingExists - an exclusive mapping exists,
               and other mappings cannot be added. The Override flag can be specified
               to replace the existing mapping.
              * TriggerError.TemporaryMappingExists - a temporary mapping exists,
               and other mappings cannot be added.         
              * TriggerError.UnknownError - an unknown error occurred.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveMapping(System.UInt32,System.String)">
            <summary>   
            Removes an existing trigger source-to-consumer mapping.
            </summary>
            <remarks>
            <p> The specified mapping/association is removed permanently. Removing 
            the wrong mapping could cause a barcode scanner, imager, etc. to become 
            non-functional.</p>
            <p> Removing a mapping that was added with the temporary and override flags
            will restore the previous mappings. In all other cases, removing a mapping
            does not restore old mappings or otherwise affect other mappings for the
            trigger source. This behaviour can result in trigger sources not having a
            mapping.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="name">The name of the trigger consumer to remove the mapping 
                for.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.MappingNotFound - The specified mapping does not exist
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveAllMappings(System.UInt32)">
            <summary>   
            Removes all mappings for the specified trigger source.
            </summary>
            <remarks>
            <p> All mappings are removed permanently. Removing the wrong mapping 
             could cause a barcode scanner, imager, etc. to become non-functional.</p>
            <p> Removing a mapping that was added with the temporary and override 
             flags will restore the previous mappings. In all other cases, the existing 
             mappings are not restored.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.MappingNotFound - No mappings existed for this source.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetDoubleClickTime(System.UInt32)">
            <summary>   
             Changes the double-click timeout for all trigger sources.
            </summary>
            <remarks>
            <p>A trigger event received by an EventListener can also have other flags set: the
            single- and double-click event flags. A double-click event occurs when the user
            quickly presses and releases a trigger twice in a row. A single-click event 
            occurs when the user quickly presses and releases the trigger once, and occurs
            as part of a double-click event. In order to receive single- and double-click
            events, the following conditions must be met:
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
                  double-click time, which will generate a single-click event.
             * The user must then press the trigger again within the configured 
                  double-click time. Doing so will generate a trigger down event with 
                  the double-click flag set.
             * If the user releases the trigger within the configured double-click 
                  time, trigger up event with the double-click flag set will be generated.
            </p>
            <p> The default double-click time is 0 (no double-clicks). </p>
            <p> The double-click value set here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.</p>
            </remarks>
            <param name="doubleClickTime">The double-click time, in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetDoubleClickTime(System.UInt32,System.UInt32)">
            <summary>   
             Changes the double-click timeout for a single trigger source.
            </summary>
            <remarks>
            <p>A trigger event received by an EventListener can also have other flags set: the
            single- and double-click event flags. A double-click event occurs when the user
            quickly presses and releases a trigger twice in a row. A single-click event 
            occurs when the user quickly presses and releases the trigger once, and occurs
            as part of a double-click event. In order to receive single- and double-click
            events, the following conditions must be met:
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
                  double-click time, which will generate a single-click event.
             * The user must then press the trigger again within the configured 
                  double-click time. Doing so will generate a trigger down event with 
                  the double-click flag set.
             * If the user releases the trigger within the configured double-click 
                  time, trigger up event with the double-click flag set will be generated.
            </p>
            <p>
             * The default double-click time is 0 (no double-clicks). 
             * The double-click value set here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.
            </p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="doubleClickTime">The double-click time, in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetDoubleClickTime(System.UInt32,System.UInt32@)">
            <summary>   
            Returns the double-click time for the specified trigger source. 
            </summary>
            <remarks>
            <p> The default double-click time is 0 (no double-clicks).</p>
            <p> The double-click value reported here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="doubleClickTime">If the operation succeeds, the double-click 
               time in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetTriggerSourceFriendlyName(System.UInt32)">
            <summary> 
             Gets the friendly name for the specified trigger source. 
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel                                                                                                                                                                                                                                                                                                                                                                                                         * panel.
            </summary>
            <param name="id">The ID of trigger source.</param>
            <returns>The friendly name for the the trigger source</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.FriendlyNameNotFound - the friendly name wasn't found.
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetTriggerSourceFriendlyName(System.UInt32,System.String)">
            <summary> 
             Sets the friendly name for the specified trigger source. 
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel.
            </summary>
            <param name="id"> The ID of trigger source.</param>
            <param name="friendlyName"> The friendly name to set.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveTriggerSourceFriendlyName(System.UInt32)">
            <summary> 
             Removes the friendly name for the specified trigger source.
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel.
            </summary>         
            <param name="id">The ID of trigger source.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.TriggerIdNotFound - if the specified trigger source wasn't found.        
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetTriggerSourceId(System.String)">
             <summary> 
               Returns the trigger source ID for the specified friendly name. 
             </summary>        
             <param name="friendlyName">The friendly name look for.</param>
            <returns>The ID of trigger source</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             TriggerControl object has already been disposed.</exception>
             <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
             Common possible exceptions are:        
              * TriggerError.FriendlyNameNotFound - if the specified friendly name wasn't found.        
              * TriggerError.CommunicationFailure - if the Trigger driver is not
               running, or has failed.
              * TriggerError.UnknownError - an unknown error occurred.
             </exception>
        </member>
        <member name="E:PsionTeklogix.Trigger.TriggerControl.triggerEvent">
            <summary>
            The event used to notify registered event handlers when a trigger event occurs.
            </summary>
            <remarks>
             Trigger events are generated via the main window message thread.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerControl.Flags">
            <summary>
             Flags used to control access to trigger sources and the behaviour of the API
            when a new mapping is requested.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Exclusive">
            <summary> The requested mapping is to be exclusive - no other consumers may be
            associated with this trigger source. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Override">
            <summary> Override an existing mapping, even an exclusive one. All other mappings
            are replaced.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.AccessFlags">
            <summary> Mask for the trigger control access flags.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.IgnoreDupReg">
            <summary>  Flag set to indicate that if a mapping involving a consumer/source ID pair
            already exists, that an error should not be returned.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Temporary">
            <summary> Flag set to indicate that the specified mapping is temporary, and should not
            be written to the registry.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.WantsTriggerEvents">
            <summary> Flag set to indicate that specified mapping wants trigger 
            events. </summary>            
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.WantsDoubleClickEvents">
            <summary> Flag set to indicate that specified mapping wants double 
            click events. </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.ShellSecurityLevelChangeEvent">
            
             A ShellSecurityLevelChangeEvent object is passed to all registered event handlers
             when the shell security level is changed.
            
        </member>
        <member name="P:PsionTeklogix.SystemPTX.ShellSecurityLevelChangeEvent.Description">
            
             Returns a description of the event that occurred.
            
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortLocationChangeEvent">
            <summary>
            The SerialPortLocationChangeEvent class is used to report when 
            a serial port's physical location changes. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.SerialPortLocationChangeEvent.sourceVal">
            <summary>
            The name of the COM port generating the event.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.SerialPortLocationChangeEvent.monitorLocation">
            <summary>
            The location of the COM generating the event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPortLocationChangeEvent.#ctor(System.String,PsionTeklogix.Serial.PortLocation)">
            <summary>
            SerialPortLocationChangeEvent constructor. 
            Initializes the location change event object with the 
            source and location values passed to it.
            </summary>
            <param name="source">The name of the COM port generating the event.</param>
            <param name="location">The new port location 
            (see the SerialPort class for possible values)</param>
        </member>
        <member name="T:PsionTeklogix.RAS.LoginForm">
            <summary>
            Display the login form.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.VirtualKey">
            <summary>
            A virtual-key code is a device-independent value defined by the system that 
            identifies the purpose of a key. The following enumeration contains the symbolic 
            constant names and hexadecimal values for the virtual-key codes used by the 
            Microsoft Windows CE operating system. The codes are listed in numeric order. 
            </summary>
            <remarks>
            The virtual keys values are <b>NOT</b> scan codes, nor do they (except indirectly)
            represent characters sent to an application.
            A full list of available virtual-key codes is available through the object browser.
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NONE">
            for use with remappings that do not require a virtual key code (i.e. a function
            code only)
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LBUTTON">
            left mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RBUTTON">
            right mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CANCEL">
            cancel button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MBUTTON">
            middle mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACK">
            the BKSP key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_TAB">
            the TAB key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CLEAR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RETURN">
            return/ENTER
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SHIFT">
            the SHIFT key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CONTROL">
            the CTRL key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MENU">
             
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PAUSE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CAPITAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_KANA_HANGUL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_JUNJA">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_FINAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HANJA_KANJI">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ESCAPE">
            the ESC key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CONVERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NOCONVERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SPACE">
            the SPACE key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PRIOR">
            page up
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NEXT">
            page down
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_END">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HOME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LEFT">
            the left arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_UP">
            the up arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RIGHT">
            the right arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DOWN">
            the down arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SELECT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXECUTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SNAPSHOT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_INSERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DELETE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HELP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_0">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_A">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_B">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_C">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_D">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_E">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_G">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_H">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_I">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_J">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_K">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_L">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_M">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_N">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_O">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_P">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Q">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_R">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_S">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_T">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_U">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_V">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_W">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_X">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Y">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Z">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LWIN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RWIN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_APPS">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SLEEP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD0">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MULTIPLY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ADD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SEPARATOR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SUBTRACT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DECIMAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DIVIDE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F10">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F11">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F12">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F13">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F14">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F15">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F16">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F17">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F18">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F19">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F20">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F21">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F22">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F23">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F24">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMLOCK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SCROLL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LSHIFT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RSHIFT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LCONTROL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RCONTROL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LMENU">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RMENU">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_BACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_FORWARD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_REFRESH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_STOP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_SEARCH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_FAVORITES">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_HOME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_MUTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_DOWN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_UP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_NEXT_TRACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_PREV_TRACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_STOP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_PLAY_PAUSE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_MAIL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_MEDIA_SELECT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_APP1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_APP2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SEMICOLON">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EQUAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_COMMA">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HYPHEN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PERIOD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACKQUOTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LBRACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACKSLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RBRACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_APOSTROPHE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OFF">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXTEND_BSLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OEM_102">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PROCESSKEY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F25">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F26">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F27">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F28">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F29">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F30">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ATTN">
             
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CRSEL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXSEL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EREOF">
                                                                                
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PLAY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ZOOM">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NONAME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PA1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OEM_CLEAR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.Unknown">
             Unmapped value(reserved) 
            <summary>Deprecated</summary>
            MUST be the last entry in this list 
            @deprecated 
        </member>
        <member name="T:PsionTeklogix.Keyboard.SystemPowerState">
            <summary>
            Psion Teklogix device-specific mode for resetting system
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.Suspend">
            send system into suspend mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.WarmReset">
            send system into warm reset mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.ColdReset">
            send system into cold reset mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.ResetToBootLoader">
            reset system to start in boot loader
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.BarcodeScanningState">
            <summary>
            Enumerates the valid scanning states on a Psion Teklogix device. Disabling barcode
            scanning on a Psion Teklogix device is necessary if the trigger is going to be
            used to initiate image capturing.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScannerServices.BarcodeScanningState.Disabled">
            <summary>
            Indicates that the imager will not capture barcodes when the trigger is pressed. A
            trigger event will be published if the trigger capturing is enabled; however it
            will be up to the application to handle the trigger press itself.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScannerServices.BarcodeScanningState.Enabled">
            <summary>
            Indicates that the imager will capture barcodes when the trigger is pressed. A
            trigger event will be published if the trigger capturing is enabled; however a
            barcode scan will already be in progress, or have completed, by the time the trigger
            event is received. (Default state is barcodes enabled).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase">
            <summary>
            <p>ImageCaptureDeviceBase is used to define the interface of the ImageCaptureDevice 
            class and the ImageCaptureDeviceControl class.</p> 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.Dispose">
            <summary>
            Releases the resources held by the ImageCaptureDevice object, in order to 
            allow other applications to be able to use the imager device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.DefaultSettings">
             <summary>
             Defaults all of the image capture device settings. 
             </summary>
             <remarks>
             <p> Defaulting the imager settings has no effect on the settings used by the 
             imager when it is going to scan a barcode.</p>
             
             <p> The following parameters are affected:
             * Brightness
             * Contrast
             * Exposure Time
             * Sub-sampling Factor
             * Horizontal Size
             * Vertical Size
             </p>
             
             <p>The image type parameter will not be affected.</p>
            
             <p>Because changing this property can change the image size and resolution, 
             the value reported by the MaximumFileSize property may also change.</p>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.CaptureImage(System.IO.FileInfo)">
             <summary>
             <p>Causes the image capture device to capture an image using the current parameters
             configured. The captured image will be placed in the object store (the temporary
             Windows CE file system). The name of the captured image (including the extension) 
             will be reported to any registered image capture handlers through an image saved
             event.</p>
             </summary>
             <remarks>
             <p>When an application calls this method it must pass in the name of the file, 
             <u>minus the extension</u>, where the captured image is to be stored. The image
             capture API will add the extension corresponding to the configured image type,
             and report the final name of the capture file in the event sent to all  
             registered image capture event handlers. Any extension provided will be treated 
             as part of the file name.</p>
            
             <p>For example, if an image is configured to generate .BMP files:
             <code>
                imager.CaptureImage(new File("ImageFileName"));
             </code>
            
             will create an image file called <i>ImageFileName.bmp</i>. If the application
             does the following instead:
            
             <code>
                imager.CaptureImage(new File("ImageFileName.bmp"));
             </code>
            
             the file generated will be named <i>ImageFileName.bmp.bmp</i>
             </p>
             </remarks>
             
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified file information object is null.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.CaptureLastValidImage(System.IO.FileInfo)">
             <summary>
              The CaptureLastValidImage method is used to store the last valid image 
             captured by the imager device. 
             </summary>
             <remarks>
             <p>A valid image can be generated in one of two ways:
             * By calling CaptureImage. An image captured this way will remain in memory; 
               calling CaptureLastValidImage will cause the stored image to be saved to 
               the file system.
             * A successful barcode scan, i.e. one that caused one or more barcodes to be 
               decoded by the imaging scanner, will generate a valid image that will remain 
               in memory (until another successful scan or image capture occurs).
             </p>
            
             <p>This method, unlike the CaptureImage method, operates synchronously.
             It does not return until the image data is saved to the file system, or until
             an error is detected. Also, it does not generate an image saved event when an
             image is captured.</p>
             
             <p>In order to get an image associated with a particular barcode, an 
             application should register a ScanCompleteEvent handler method with 
             the event in a Scanner instance. When a scan complete event occurs, an 
             application can then call the CaptureLastValidImage method to get the
             associated barcode.</p>
             </remarks>
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <returns>A FileInfo object representing the file containing the image.</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the specified
             FileInfo object is null.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If there is no
             valid image present in memory to save.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.EnumerateSupportedImageTypes">
            <summary>
             Returns the image type or types supported by the image capture device.
            </summary>
            <remarks>
            Older Symagery imagers (SX4000) only support the bitmap format. Newer Symagery 
            imagers support both the bitmap and JPEG formats.
            </remarks>
            <returns>An array of strings listing the supported image file types.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.Name">
            <summary>
             Returns the name of the image capture device being controlled.
            </summary>
            <returns>The name of the image capture device being controlled.</returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.ImagerTriggerCaptureState">
             <summary>
             <p>All image capture devices, or "imagers", operate as barcode scanners by 
             default. In other words, pulling the scanner trigger, pressing the scan button,
             or initiating a softscan through the Scanner API will simply cause the imager
             to scan for barcodes. However, an application may want to detect when the 
             scanner trigger is pulled, in order capture an image, or store the image 
             generated by a successful barcode scan. In order to be able to perform one of 
             these operations, the application must be able to receive a notification when 
             the imager trigger is pulled. By changing the trigger capture state, 
             applications can register to receive trigger events as they occur, allowing 
             them to gain finer control of imager operations.</p>
            
             <p>Once the trigger capture state has been set to TriggerCaptureState.Enabled,
             all "trigger down" and "trigger up" events will be sent to handlers registered 
             with the imager event, <i>triggerCapturedEvent</i>. Trigger events will always 
             come in order: "trigger down", when the trigger is pulled or the scan button is 
             pressed, followed by "trigger up", when the trigger or scan button is released.
             </p>
             </summary>
             <remarks>
             <p>Changing the trigger capture state has no effect on the imager, with respect
             to its operation as a barcode scanner. At the point when a trigger is received 
             by the application, the process of scanning a barcode will have already begun. 
             In order prevent the imager from scanning a barcode when the trigger is pulled, 
             an application can use the ImagerScanningState property to disable the scanner
             portion of the image capture device.</p>
            
             <p>The scan button(s), the scanner trigger (if the device has one) and a 
             softscan generated using the Scanner API are all considered "triggers", and
             function identically.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.ImagerBarcodeScanningState">
             <summary>
             <p>This property is used to enable or disable the barcode scanning functionality 
             of the image capture device. Disabling the scanner functionality is only 
             typically done when an application either has to prevent a user from scanning 
             barcodes, or when it is going to take control of the trigger in order to use
             the trigger to initiate image captures.</p>
             </summary>
             <remarks>
             <p>Note that when this method is called, <b><u>ALL</u></b> mechanisms used to 
             generate barcode scans, include software-initiated scans, are disabled for this 
             imager device.</p>  
            
             <p><b>Warning:</b> It is the responsiblility of the application to re-enable 
             the scanning features of the imager using this method before it exits. If the 
             application fails to re-enable barcode scanning before it exits, no other 
             application will be able to initiate a barcode scan until another application 
             re-enables barcode scanning.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.HorizontalImageSize">
            <summary>
            <p>The width of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The width set must be positive, and less than or equal to the value reported 
            by the GetMaximumHorizontalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MaximumHorizontalImageSize">
            <summary>
            <p>The maximum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MinimumHorizontalImageSize">
            <summary>
            <p>The minimum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.VerticalImageSize">
            <summary>
            <p>The height of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The height set must be positive, and less than or equal to the value reported 
            by the GetMaximumVerticalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MaximumVerticalImageSize">
            <summary>
            <p>The maximum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MinimumVerticalImageSize">
            <summary>
            <p>The minimum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.Contrast">
            <summary>
            <p>Changes the contrast (also called gain) setting on the imager. The specified 
            contrast value should be between 0 (lowest contrast) and 100 (highest contrast).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.Brightness">
            <summary>
            <p>Changes the brightness (also called illumination) setting on the imager. The 
            specified value should be between 0 (lowest brightness level) and 100 (highest 
            brightness level).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.ExposureTime">
            <summary>
            <p>Changes the current exposure time setting on the imager. The new exposure time
            value should be specified as a percentage between 0 (shortest exposure time) and
            100 (longest exposure time).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.SubSamplingFactor">
             <summary>
             <p>Changes the sub-sampling factor setting on the imager. The sub-sampling 
             factor controls the resolution or pixel-per-inch (ppi) that the imager uses 
             when capturing an image. </p>
             </summary>
             <remarks>
             <p>The Symagery imager uses the parameter to determine the number of pixels (or 
             samples) that will be used to create an image. Smaller values give a finer 
             resolution (and therefore a sharper image), larger values give a more 
             coarse resolution (and therefore a lower-quality image).</p>
            
             For example:
             <code>
              * a value of 0 means no sub-sampling i.e. the finest resolution:  XXXXXXXXXXXXXXXX
              * a value of 1 means 1 out of 2 pixels:                           X_X_X_X_X_X_X_X_
              * a value of 2 means 1 out of 4 pixels:                           X___X___X___X___
              * a value of 3 means 1 out of 8 pixels i.e. the lowest:           X_______X_______
             </code>
            
             <p>Note that the sub-sampling factor applies to both X and Y axis.</p>
            
             <p>The maximum valid value for the subsampling factor is given by the
             MaximumSubSamplingFactor property.</p>
             </remarks>
             <exception cref="T:System.ArgumentException">ArgumentException - If the new value
             specified is out of range.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MaximumSubSamplingFactor">
            <summary>
            <p>Returns the maximum possible sub-sampling factor that can be configured on the 
            imager.</p>
            </summary>
            <returns>The maximum possible sub-sampling factor that can be configured on the 
            imager.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.MaximumFileSize">
            <summary>
            <p>Calculates and returns the maximum size of an image that can be generated
            by the image capture device, given the current sub-sampling factor, and the 
            image height and width settings. Generally, smaller images and larger sub-
            sampling values will reduce the size of the image file generated. The final 
            file size will also depend on the type of image created, and whether or not 
            the image format supports compression.</p>
            </summary>
            <returns> The size of the largest image that can be created, given the current 
            imager settings. The image size is reported in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.ImageFileType">
            <summary>
            Sets/gets the file format the imager will using when saving captured images.
            </summary>
            <remarks>
            The new file format name must be one of the values reported by the
            EnumerateSupportedImageTypes method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified file type is null.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If the 
            specified file type is not supported by the imager.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.AutoExposure">
            <summary>
            <p>When auto-exposure mode is enabled 
            the contrast and brightness  values will be dynamically changed by the imager based on
            ambient light conditions. When auto-exposure is disabled the contrast and brightness 
            settings can once again be adjusted by the application. Note: enabling auto-exposure 
            may also affect other imager settings, however this behaviour is imager dependent.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.IlluminationLedsEnabled">
            <summary>
            Enables or disables the LEDs on the imager used to illuminate the object(s)
            whose image will be captured. 
            </summary>
            <remarks>
            For manual exposure mode, disabling the LEDs is equivalent to setting the 
            brightness to zero. There is no equivalent for auto-exposure mode.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceBase.PowerState">
            <summary>
             Sets/gets the power state of the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanSingleClickEventArgs">
            <summary>
             Used to report any single-click data. Currently no information is available.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanSingleClickEventArgs.ToString">
            <summary>
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.DisplayInformation">
            <summary>
             This Class contains methods that return the display properties
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.DisplayInformation.DisplayProperties">
            <summary>
             Returns all of the properties of the current display device, including:
            
               Display Type           - transmissive, transflective, etc.
               Physical Width         - physical screen size horizontally, in millimetres.
               Physical Height        - physical screen size vertically, in millimetres.
               Colour Display         - if the display is a colour display or not.
               Touch Screen Installed - if the screen is touch-sensitive.
               Width in Pixels        - physical size of the screen in pixels, horizontally.
               Height in Pixels       - physical size of the screen in pixels, vertically.
               Maximum Colours        - number of colours or shades of gray that can be
                                        displayed.
             </summary>
             <remarks>
              The values returned for screen size (pixels, physical screen size) are not 
             affected by the current screen orientation.
             </remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.DisplayInformation.ColourDisplay">
            <summary>Detects whether or not the current display supports colour.</summary>        
            <returns> true if the display device supports colour, false if the display is 
            monochrome or grayscale only.
            </returns>        
        </member>
        <member name="P:PsionTeklogix.SystemPTX.DisplayInformation.MaximumDisplayColours">
            <summary>
             Determines the maximum number of display colours supported by the current 
            display device. If the device has a monochrome display, this method will 
             report the number of shades of gray that can be displayed.        
            </summary>                
            <returns>The number of colours or shades of gray that can be displayed.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Peripherals.AdapterEvent">
            <summary>
            Summary description for AdapterEvent.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.AdapterEvent.AdapterValue">
            <summary>
            The value that is returned from Docking or Tether port driver.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.EntryWindow">
            <summary>
            Window message handler for monitoring connection status changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.EntryWindow.#ctor(PsionTeklogix.RAS.Entry)">
            <summary>
            Creates an instance of the Entry Window class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:PsionTeklogix.RAS.EntryWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with the RAS dialup connection.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanEventArgs">
            <summary>
            Arguments for Scan event handler callback.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Resources.ResourceManager">
            <summary>
            Extensions to the System.Resources.ResourceManager class.
            </summary>
            <remarks>
            The ResourceManager is extended to add 3 features. 
            <list type="bullet">
            <item>Be able to change the User Interface culture on the fly so that the device
            may be able to support multiple "Application" languages. i.e. Logon as english
            but the application changes to german after the login.</item>item>
            <item>Support argument lists when getting values. This allows the text to contain
            arguments when, for example, exceptions are thrown.</item>item>
            <item> Add the parsing and extraction of text based resources. This allows a language
            to be translated/tested before being converted to a .resources file or assembly.
            <para>Note: This feature may be costly from a performance and memory point of view. It
            has been added to facilitate remote development and deployment. The file has to 
            exist in a sub directory of the assembly that defines the type and has to be
            in the following format '{Culture}\{NameSpace}.{Class}.txt'. For example if this 
            class were to have it's resources translated to german, the file would be 
            'de\PsionTeklogix.Resources.ResourceManager.txt'.</para></item>item>
            </list></remarks>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.#ctor(System.Type)">
            <summary>
            Creates an instance of the ResourceManager for the given type.
            </summary>
            <example>
            <code lang="C#">
            public void Form1_Load()
            {
                // Load the resources for this form
                ResourceManager rm = new ResourceManager(typeof(Form1));
                object[] args = new object[0];
                args[0] = "My Application";
                
                // Resource string = "Application = {0}".
                // {0} will get replaced by the first arg.
                this.Text = rm.GetString("Title", args);
            }
            </code>
            <code lang="VB">
            Public Sub Form1_Load()
            {
                ' Load the resources for this form
                Dim rm As New ResourceManager(GetType((Form1))
                Dim args As Object[0]
                args[0] = "My Application"
                
                // Resource string = "Application = {0}".
                // {0} will get replaced by the first arg.
                Form1.Title = rm.GetString("Title", args)
            }
            </code>
            </example>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.GetString(System.String)">
            <summary>
            Get a string value by it's name, based on the current UI Culture.
            </summary>
            <param name="name">The name of the resource entry.</param>
            <returns>The value of the named resource.</returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.GetString(System.String,System.Object[])">
            <summary>
            Get a string value by it's name, based on the current UI culture.
            </summary>
            <remarks>
            The args are an argument to a String.Format that will be used to format
            a variable number of arguments.
            </remarks>
            <param name="name">The name of the resource entry.</param>
            <param name="args">Variable arguments.</param>
            <returns>The value of the named resource.</returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Overrridden to locate a text based resource file.
            </summary>
            <param name="culture">The CultureInfo to look for.</param>
            <param name="createIfNotExists">If true and if the ResourceSet has not been
             loaded yet, load it.</param>
            <param name="tryParents">If the ResourceSet cannot be loaded, try parent 
            CultureInfo objects to see if they exist.</param>
            <returns>The specified ResourceSet.</returns>
        </member>
        <member name="P:PsionTeklogix.Resources.ResourceManager.CurrentUICulture">
            <summary>
            Gets or Sets the current culture. This will change the language that
            will be extracted from the resource files.
            </summary>
            <remarks>
            As the Thread has no CurrentUICulture (As the desktop framework), this is
            where the programmer changes the CurrentUICulture. This culture is global 
            to all instances of the ResourceManager class and is thread independant.
            </remarks>
            <example>
            <code lang="C#">
            using System.Globalization;
            using PsionT.Resources.ResourceManager;
            
            public void ChangeLang(bool English)
            {
                // English or French
                if (English)
                    CurrentUICulture = new CultureInfo("en");
                else
                    CurrentUICulture = new CultureInfo("fr");
            }
            </code>
            <code lang="VB">
            Public Sub ChangeLang(ByVal English As Boolean)
                ' English or French
                If English Then
                    CurrentUICulture = new CultureInfo("en")
                Else
                    CurrentUICulture = new CultureInfo("fr")
                End If
            End Sub
            </code>
            </example>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerStatusValues">
            <summary>AC power status.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Offline">
            <summary>Not on AC.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Online">
            <summary>On AC.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.BackupPower">
            <summary>
            On backup power.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Unknown">
            <summary>Unknown status.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusValues">
            <summary>Battery charge status.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.High">
            <summary>Full charge.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Low">
            <summary>Low charge.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Critical">
            <summary>Needs to be charged immediately.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Charging">
            <summary>Charging.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.NoSystemBattery">
            <summary>No battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Unknown">
            <summary>Unknown state.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerStates">
            <summary>
            Power states.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.On">
            <summary>
            On state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Off">
            <summary>
            No power, full off.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Critical">
            <summary>
            Critical off.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Boot">
            <summary>
            Boot state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Idle">
            <summary>
            Idle state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Suspend">
            <summary>
            Suspend state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Resume">
            <summary>
            Resume state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Preferred">
            <summary>
            Preferred state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.UserIdle">
            <summary>
            User idle state.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryChemistries">
            <summary>Type of Battery chemistry.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.Alkaline">
            <summary>Alkaline battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.NickelCadmium">
            <summary>Nickel Cadmium battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.NickelMetalHydride">
            <summary>Nickel Metal Hydride battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.LithiumIon">
            <summary>Lithium Ion battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.LithiumPolymer">
            <summary>Lithium Polymer battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.ZincAir">
            <summary>
            Zinc Air battery.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.Unknown">
            <summary>Battery chemistry is unknown.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.ResetKey">
            Key combinations for resetting system
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.BoostResetKey">
            enable boot to boost reset key
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.ColdResetKey">
            enable cold reset key
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.WarmResetKey">
            enable warm reset key
        </member>
        <member name="T:PsionTeklogix.Power.PowerOnKeyguardValues">
            <summary>Power-on keyguard values, which control how well the device is protected
            against accidental power-on.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerOnKeyguardValues.OneKey">
            <summary>Power on by pressing one key.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerOnKeyguardValues.TwoKey">
            <summary>Power on by pressing two keys.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerSources.MainBattery">
            battery
        </member>
        <member name="F:PsionTeklogix.Power.PowerSources.AC">
            alternating current
        </member>
        <member name="F:PsionTeklogix.Power.PowerSources.Unknown">
            must be the last entry
        </member>
        <member name="T:PsionTeklogix.Power.PowerTransitionEventHandler">
            <summary>
            The PowerTransitionEventHandler delegate represents the method that will be called
            when the terminal power state changes.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusChangeEventHandler">
            <summary>
            The BatteryStatusChangeEventHandler delegate represents the method that will
            be called when the battery status has changed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerOfflineEventHandler">
            <summary>
            This delegate represents the method that will be called when the AC power is offline.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerOnlineEventHandler">
            <summary>
            This delegate represents the method that will be called when the AC power is online.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerInfoChangeEventHandler">
            <summary>
            This delegate represents the method that will be called when the power information values change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerManagement">
            <summary>
            Abstracts device power management and battery status information.
            This class can be used in a polled fashion with the static members or in an event driven fashion
            by instantiating and binding the event handlers.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor used by Visual Studio Designer.
            This constructor is invoked when the customer drags a PowerManagement
            component from Visual Studio Toolbox to a form.
            Please use <see cref="M:PsionTeklogix.Power.PowerManagement.#ctor"/> to create a new instance
            of a PowerManagement object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#cctor">
            <summary>
            Initialize static variables
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#ctor">
            <summary>
            Creates a new instance of the PowerManagement class.
            </summary>
            <exception cref="T:System.Exception">Thrown when uanble to register for
            Power change notifications.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Suspend">
            <summary>
             Used to put the terminal into suspend. If the device suspends, this method will
            only return once the device has come out of suspend, and all power management
            clients are notified that the device has just resumed from a suspend.
            </summary>
            <returns>True if successfully put into suspend, false otherwise.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.ColdBoot">
            <summary>
            Used to hard reset a Psion Teklogix device. Data in the object store will be
            lost on a cold boot.
            </summary>
            <returns>True if the device is going to cold boot, and false if the device
            cannot perform a cold boot. Note: due to timing issues, the method may or may
            not return before the device resets.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.WarmBoot">
            <summary>
            Used to soft reset a Psion Teklogix device. Data in the object store will not
            be lost on a warm boot.
            </summary>
            <returns>True if the device is going to warm boot, and false if the device
            cannot perform a warm boot. Note: due to timing issues, the method may or may
            not return before the device resets.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnPowerInfoChange">
            <summary>
            Called when the terminal power information values change.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnPowerTransition(PsionTeklogix.Power.PowerStates,System.String)">
            <summary>
            Called when the terminal power state changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.MainBatteryStatusChange(PsionTeklogix.Power.BatteryStatusValues,PsionTeklogix.Power.BatteryStatusValues)">
            <summary>
            Called when the main batteries status has changed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnACPowerOnline">
            <summary>
            Called when the terminal goes onto AC power.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnACPowerOffline">
            <summary>
            Called when the terminal goes off AC power.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of PowerManagement.
            </summary>
            <param name="disposing">Is this instance being explicitly disposed.</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetPowerSourceIndex(System.String)">
            <summary>
            Retrieve index of power source.  Please check enum PowerSources for currently
            supported values.
            </summary>
            <param name="powerSource">string representationof power source.  Please check
            powerSourceNames for currently supported values</param>
            <returns>index of power source</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetPowerSourceName(System.Int32)">
            <summary>
            retrieve string representation of a power source according to its index
            </summary>
            <param name="powerSourceIndex"> index of power source. Please check enum 
            PowerSources for currently supported values. </param>
            <returns>string representationof power source.  Please check
            powerSourceNames for currently supported values </returns>    
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources">
            <summary>
            Used to list all of the power sources available to a Psion
            Teklogix device. This method will return the list of
            possible power sources available as an array of power
            source names. Note that the power source does not have to
            be available to be listed.
            </summary>
            <returns>The power sources available to the terminal, typically:
            "Main Battery"
            "AC Power"</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetSystemIdleTimeout(System.String)">
            <summary>
            Returns the system idle timeout.
            The system idle timeout is used to determine how long the
            Psion Teklogix device should wait, after going into the
            user idle state, before it should consider the system
            "idle" or inactive. See the method <see cref="M:PsionTeklogix.Power.PowerManagement.SetSystemIdleTimeout(System.String,System.Int32)"/>
            for more details.
            </summary>
            <remarks>
            Deprecated. Current devices no longer support this feature.
            Expected to be removed in future release.
            </remarks>
            <param name="PowerSource">The name of the power source to
            get the system idle timeout for. It must be one of the
            values returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>The system idle timeout, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the system idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetSystemIdleTimeout(System.String,System.Int32)">
            <summary>
            Sets the system idle timeout. The system idle timeout is
            used to determine how long the Psion Teklogix device
            should wait, after going into the user idle state, before
            it should go into the system idle state (where the device
            is considered to be unused). When the user presses a key,
            or otherwise generates activity, the device will go back to
            the default 'on' state. Both the system and idle timers
            will be reset as a result. File system activity and some
            network and radio operations will also cause the system
            activity timer to be reset.
            When a NETBOOK PRO goes into the system off state,
            the power manager will turn off the display, in order to
            conserve the NETBOOK PRO's battery life).
            When the NETBOOK PRO comes out of the system idle state
            (due to user activity, etc.) the display will be powered
            on again (as will the backlight).
            </summary>
            <remarks>Deprecated. Current devices no longer support this feature.                                /// 
            Expected to be removed in future release.
            <p>The system idle timeout value only needs to be
            set here once. The system idle timer will be started the
            moment there is no system activity (after going into the
            user idle state), and will be reset when any user or
            system activity is seen. Changes to the system idle timeout
            take effect immediately.</p>
            </remarks>
            <param name="PowerSource">The name of the power source to
            set the system idle timeout for. Must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.
            timeout - </param>
            <param name="timeout">The amount of time to wait before turning off the display
            (in seconds). Must be one of the values returned by the
            GetValidSystemIdleTimeouts method.</param>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the system idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetUserIdleTimeout(System.String)">
            <summary>
            Returns the user idle timeout for the given power source. The
            user idle timeout is the amount of time the Psion Teklogix
            device is to wait before considering the user "idle"
            (i.e. the user has not used the touch screen or keyboard).
            See the method SetUserIdleTimeout() for more details.
            </summary>
            <remarks>
            Deprecated. Current devices no longer support this feature.                        
            Expected to be removed in future release.
            </remarks>
            <param name="PowerSource">The name of the power source to get
            the user idle timeout for. It must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>The user idle timeout, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the user idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetUserIdleTimeout(System.String,System.Int32)">
            <summary>
            Sets the user idle timeout. The user idle timeout is the
            amount of time the Psion Teklogix device is to wait before
            considering the user "idle" (i.e. the user has not used the
            touch screen or keyboard). When the user presses a key,
            the device will go back into the normal 'on' state, Any
            user activity before the device goes into the user idle
            timeout state will reset the user idle timer.
            On the NETBOOK PRO, when the device goes into the user
            idle state the backlight power is turned off, to conserve
            battery power. When the user presses a key or otherwise
            brings the terminal out of the user idle power state, the
            backlight is turned back on.
            </summary>
            <remarks>Deprecated. Current devices no longer support this feature.
            Expected to be removed in future release.
            <p>The user idle timeout value only needs to be set here
            once. The user idle timer will be started the moment there
            is no user activity, and will be reset when any user
            activity is seen. Changes to the user idle timeout take effect
            immediately.</p>
            </remarks>
            <param name="PowerSource">The name of the power source to
            set the user idle timeout for. Must be one of the values returned
            by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <param name="timeout">The amount of time to wait in seconds before
            going into the user idle state.. Must be one of the values
            returned by the GetValidUserIdleTimeouts method.</param>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the user idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetValidSuspendTimeouts(System.String)">
            <summary>
            Used to list valid timeouts for a power source. Each power
            source (e.g. "AC Power") has a set of valid timeout
            associated with it. These timeouts are used when setting
            the suspend timeouts for the specified power source.
            </summary>
            <remarks>
            Deprecated. Expected to be removed in future release.
            <p>Any in-range value can be passed to the Set routine.</p>
            </remarks>
            <param name="PowerSource">The name of the power source to get
            valid timeouts for. Must be one of the values returned by
            the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>An array of integers containing the allowed timeouts
            for the power source, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetValidSystemIdleTimeouts(System.String)">
            <summary>
            Used to list valid timeouts for a power source. Each power
            source (e.g. "AC Power") has a set of valid timeout
            associated with it. These timeouts are used when setting
            the system idle timeout for the specified power source.
            </summary>
            <remarks>
            Deprecated. Current devices no longer support this feature.
            Expected to be removed in future release.
            </remarks>
            <param name="PowerSource">The name of the power source to get
            valid timeouts for. Must be one of the values returned by
            the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>An array of integers containing the allowed timeouts
            for the power source, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the system idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetValidUserIdleTimeouts(System.String)">
            <summary>
            Used to list valid timeouts for a power source. Each power
            source (e.g. "AC Power") has a set of valid timeout
            associated with it. These timeouts are used when setting
            the user idle timeouts for the specified power source.
            </summary>
            <remarks>
            Deprecated. Current devices no longer support this feature.
            Expected to be removed in future release.
            </remarks>
            <param name="PowerSource">The name of the power source to get
            valid timeouts for. Must be one of the values returned by
            the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>An array of integers containing the allowed timeouts
            for the power source, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the user idle timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetSuspendTimeout(System.String)">
            <summary>
            Returns the suspend timeout. The suspend timeout is used to
            determine how long the Psion Teklogix device should wait,
            after going into the system idle state, before it should
            place the device into suspend (in order to conserve
            battery life). When the user wakes the device up (by pressing
            the 'On' button, etc.), the device will go back into the
            normal 'on' state, and turn the backlight, the display,
            and all peripheral devices back on. Any user activity
            before the device goes into the system idle timeout state
            will reset suspend, system idle and user idle timers.
            See the method <see cref="M:PsionTeklogix.Power.PowerManagement.SetSystemIdleTimeout(System.String,System.Int32)"/> for more details.
            </summary>
            <param name="PowerSource">The name of the power source to
            get suspend timeout for. It must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>Suspend timeout, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the suspend timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetSuspendTimeout(System.String,System.Int32)">
            <summary>
            Sets the suspend timeout. The suspend timeout is used to
            determine how long the Psion Teklogix device should wait,
            after going into the system idle state, before it should
            place the device into the suspend (in order to conserve
            battery life). When the user wakes the device up (by
            pressing the 'On' button, etc.), the device will go back
            into the normal 'on' state, and turn the backlight, the
            display, and all peripheral devices back on. Any user
            activity before the device goes into the system idle
            timeout state will reset the suspend, system idle and
            user idle timers. File system activity and some network
            and radio operations will also cause system activity
            timer to be reset, preventing the terminal from going to
            suspend.
            </summary>
            <remarks>The suspend timeout value only needs to be set here
            once. The suspend timer will be started the moment there
            is no system activity (after going into the system idle
            state), and will be reset when any user activity is seen.
            Changes to the suspend timeout take effect immediately.</remarks>
            <param name="PowerSource">The name of the power source to set
            the suspend timeout for. Must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <param name="timeout">The amount of time wait before going into
            the suspend state (in seconds).</param>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the suspend timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatterySuspendThreshold">
             <summary>
             <p>Retrieves the battery suspend threshold. Some Psion Teklogix devices only
             have a small backup battery, or no backup battery at all. On such devices,
             once the main battery has completely discharged users have a very short window
             in which to change the battery before all volatile data is lost. In such cases
             it is desirable to have the device report that the main battery is "low"
             prematurely, in order to make sure it gets replaced/recharged before there is
             a possibility of data loss. By setting the battery suspend threshold, the
             device is forced to go into suspend when that threshold is reached as if the
             main battery had fully discharged.</p>
             </summary>
            
             <remarks>
             <p>The battery suspend threshold varies from device to device.
              * On the 7530 and 7535, the threshold has a range of 0-20%
              * On 7535 G2 and 7527, the Control Panel sets battery suspend threshold in
              mAh units. Since the MD SDK uses percentages, there is the possibility that a
              value set via the Control Panel is read back slightly differently in the SDK.
              Also, battery re-calibrations and battery swapping will change the percentage
             reported.
              * 7525, 8515 and 8525 do not have a battery suspend threshold.        
             </p>
             </remarks>
            
             <returns>The current battery suspend threshold configured on the device, as a
              percentage.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the device
              does not have a battery suspend threshold setting.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              isn't calibrated.</exception>                
             @
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetBatterySuspendThreshold(System.Int32)">
             <summary>
             <p>Sets the battery suspend threshold. Some Psion Teklogix devices only have
             a small backup battery, or no backup battery at all. On such devices, once the
             main battery has completely discharged users have a very short window in which
             to change the battery before all volatile data is lost. In such cases it is
             desirable to have the device report that the main battery is "low" prematurely,
             in order to make sure it gets replaced/recharged before there is a possibility
             of data loss. By setting the battery suspend threshold, the device is forced
             to go into suspend when that threshold is reached as if the main battery had
             fully discharged.</p>
             </summary>
            
             <remarks>
             <p>This method accept values between 0 and 20%. 
              
              The battery suspend threshold varies from device to device.
              * On the 7530 and 7535, the threshold has a range of 0-20%
              * On 7535 G2 and 7527, the Control Panel sets battery suspend threshold in
             mAh units. Since the MD SDK uses percentages, there is the possibility that a
             value set via the Control Panel is read back slightly differently in the SDK.
              The maximum and minimun values will vary according to the device and the 
             battery installed, and MD SDK will adjust the parameter to this range. 
              Also, battery re-calibrations and battery swapping will change the percentage
             reported.
              * 7525, 8515 and 8525 do not have a battery suspend threshold.     
             </p>
             </remarks>
            
             <param name="threshold">The battery threshold to configure, as a percentage.
              When the specified battery charge percentage is reached, the Psion Teklogix 
              device will go into suspend. Valid values are between 0 and 20. </param>
             <exception cref="T:System.ApplicationException">ApplicationException - If the device
              does not have a battery suspend threshold setting.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              isn't calibrated.</exception>        
             <exception cref="T:System.ArgumentException">ArgumentException - If the supplied
              suspend threshold is out of range.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatterySerialNumber">
             <summary>
             Retrieves the battery serial number. 
             </summary>
            
             <returns>The current battery serial number.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the serial number property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatteryCycleCount">
             <summary>
             Retrieves the battery cycle count. 
             </summary>
            
             <returns>The current battery cycle count.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the cycle count property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatteryManufactureDate">
             <summary>
             Retrieves the battery manufacture date,The format depends on battery type.
             </summary>
            
             <returns>The current battery manufacture date.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the manufacture date property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetWakeupKey(System.Int32)">
            <summary>
            Determines if a given key wakes up this device. If the device does not support
            wakeup key configuration, false is returned. If the key cannot be configured
            as a wakeup key, false is returned.
            </summary>
            <param name="scanCode">The keyboard scan code of interest.</param>
            <returns>true if the device supports wakeup key configuration and the given
            scan code is configurable and the give scan code wakes up this device,
            otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetWakeupKey(System.Int32,System.Boolean)">
            <summary>
            Sets whether a given key wakes up this device. If the device does not support
            wakeup key configuration, the call has no effect. If the key cannot be set as
            a wakeup key, the call has no effect.
            </summary>
            <param name="scanCode">The keyboard scan code to set.</param>
            <param name="wakeup">true if the given scan code should wake up this device,
            otherwise false.</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.power_ResetKeyEnable(System.Boolean,System.Int32,System.Boolean@)">
            <summary>
            get/set enabled state of a given reset key 
            </summary>
            <param name="isGet">true to get, false to set</param>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <param name="enable">true to enable, false to disable</param>
            <returns>error code encoded with PTX proprietary facility code and error code 
            defined in PtxSdkErrors.h.  Please see winerrors.h for encoding scheme.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetResetKeyEnable(System.Int32)">
            <summary>
            Determines if the enabling state of a given reset key
            </summary>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <returns>true if the given reset key is enabled
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetResetKeyEnable(System.Int32,System.Boolean)">
            <summary>
            Determines if the enabling state of a given reset key
            </summary>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <param name="enable">true to enable the given reset key</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Dispose">
            <summary>
            Release power management resources.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.PowerInfoChangeEvent">
            <summary>
            Occurs when the terminal power information values change.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.PowerTransitionEvent">
            <summary>
            Occurs when the terminal power state changes.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.MainBatteryStatusChangeEvent">
            <summary>
            Occurs when the main battery status has changed.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.ACPowerOfflineEvent">
            <summary>
            Occurs when then AC power is offline.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.ACPowerOnlineEvent">
            <summary>
            Occurs when the AC power is online.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.AllowAutoSuspend">
            <summary>
            Gets whether the terminal allows automatic suspend
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.ExternalPowerStatus">
            <summary>
            Gets the current AC status.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryStatus">
            <summary>
            Determines the charge status of the main battery on the current device.
            </summary>
            <remarks>
             The charge status can be one of:
             * no battery - This Psion Teklogix device does not currently have a battery
             * very low - The battery is almost discharged
             * low  - The battery has little charge left
             * high - The battery has an acceptable amount of charge left
             * charging - The battery is being charged by an external source
            </remarks>
            <returns>
             The main battery status, see the BatteryStatusValues enumeration.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery status capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryPercent">
            <summary>
            Reports the amount of charge left in the battery, as a percentage.
            </summary>
            <remarks>
            Note that the battery charge remaining reported may not be accurate. The
            charge remaining reported may vary due to the activity of peripheral devices
            such as 802.11 and/or Narrowband radios.
            </remarks>
            <returns>
            The amount of charge left in the battery, as a percentage.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery percent capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryVoltage">
            <summary>
            The current voltage level reported by the battery.
            </summary>
            <returns>
            The battery voltage in millivolts (0..65535 mV).
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery voltage cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryCurrent">
            <summary>
            Amount of instantaneous current drain. Note that the current consumption reported
            may not be accurate, as some batteries do not report this information, or report it
            improperly. Also, the consumption may vary due to the activity of peripheral devices
            such as 802.11 and/or Narrowband radios.
            </summary>
            <returns>
            The instantaneous current drain (in mA). 0 to 32767 for charge, 0 to -32768
            for discharge.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery current drain cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryChemistry">
            <summary>
            Gets the main battery chemistry.
            </summary>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery chemistry cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryFullLifetime">
            <summary>
             Determines the lifetime of the battery, in seconds, when the battery is fully
            charged.
            </summary>
            <remarks>
            <p>The lifetime reported may not be accurate, as various system configurations,
            power management settings, and the activity of various peripheral devices will
            all affect the amount of charge drained from the battery.</p>
            <p>The life time and/or full lifetime of the battery may not be able to be
            determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The total lifetime left in the battery in seconds when fully charged.
            If the total lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
             battery full lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryLifetime">
            <summary>
            Determines the amount of charge remaining in the battery, in seconds.
            </summary>
            <remarks>
            <p>The amount of charge remaining in the battery reported may not be completely
            accurate. Also, the charge remaining reported may vary due to the activity of
            peripheral devices such as 802.11 and/or Narrowband radios.</p>
            <p>The life time and/or full lifetime of the battery may not be able to be
            determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The current charge left in the battery in seconds (lifetime). If the
             remaining lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
             battery lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryStatus">
            <summary>
            Gets the backup battery status.
            </summary>
            <remarks>
            Windows CE assumes that all devices will have a backup battery. For devices
            such as the 753x-series terminals (that don't have backup batteries), the
            backup battery status will be reported as BatteryStatusValues.High.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryPercent">
            <summary>
            Reports the charge left in the backup battery. Note that the battery charge
            remaining reported may not be completely accurate.
            </summary>
            <returns>
            The current charge left in the backup battery as a percentage.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
            battery percent capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryVoltage">
            <summary>
            Gets the backup battery voltage in millivolts (0..65535 mV)
            </summary>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
            battery voltage cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryFullLifetime">
            <summary>
             Determines the lifetime of the backup battery, in seconds, when the battery
            is fully charged.
            </summary>
            <remarks>
            <p>The lifetime reported may not be accurate, as various system configurations,
            power management settings, and the activity of various peripheral devices will
            all affect the amount of charge drained from the battery.</p>
            <p>The life time and/or full lifetime of the backup battery may not be able to
            be determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The total lifetime left in the backup battery in seconds when fully
            charged. If the total lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
             battery full lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryLifetime">
            <summary>
            Determines the amount of charge remaining in the backup battery, in seconds.
            </summary>
            <remarks>
            <p>The amount of charge remaining in the battery reported may not be completely
            accurate. Also, the charge remaining reported may vary due to the activity of
            peripheral devices such as 802.11 and/or Narrowband radios.</p>
            <p>The life time and/or full lifetime of the backup battery may not be able to
            be determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The current charge left in the battery in seconds (lifetime). If the
             remaining lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
             battery lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryTemperature">
            <summary>
            Reports the current battery temperature.
            </summary>
            <returns>
            The current battery temperature, in 0.1 degrees Celcius increments.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery temperature cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.PowerOnKeyguard">
            <summary>
            The power-on keyguard setting.  Values are enumerated in
            <see cref="T:PsionTeklogix.Power.PowerOnKeyguardValues"/>.
            </summary>
            <exception>Exception - If an error occurs, such as when this feature is not
            supported.</exception>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable">
            <summary>
            The scan code remapping table class is used to remap the scan codes for a particular
            scan code table to a different behaviour.
            </summary>
            <remarks>
            <p>There are three tables whose scan codes can be remapped:
            * Normal - Remappings for all scan codes when neither the blue nor the orange
                       buttons are pressed.
            * Blue - Remappings for when the blue button is pressed.
            * Orange - Remappings for when the orange button is pressed.
            </p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Add(System.UInt16,PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping)">
            <summary>
            Adds a new remapping to the table.
            </summary>
            <remarks>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. Mo error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="remapping">The new remapping for the scan code.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remove(System.UInt16)">
            <summary>
            Removes a remapping from the table.
            </summary>
            <remarks>
            <p>Attempting to remove a remapping for a scan that does not exist will generate
            an exception.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <exception cref="T:System.ApplicationException">ApplicationException - if the scan code
            mappings could not be retrieved.</exception>
            <exception cref="T:System.NotSupportedException">NotSupportedException - If the device
            does not support scan code remapping.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If scan code specified
            was invalid or not mapped.</exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Contains(System.UInt16)">
            <summary>
            Tests if the given scan code has been remapped.
            </summary>
            <param name="scanCode">The scan code to be remapped.</param>
            <returns>true if the scan code has been remapped; false otherwise.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Clear">
            <summary>
            Removes all remappings from the table.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.ToString">
            <summary>
            Converts a RemappingTable object to a printable string.
            </summary>
            <returns>
            A string containing text representing the TableEntry object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Count">
            <summary>
             Returns the number of remappings in the scan code remapping table.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Entries">
            <summary>
            A property that represents all the scan code remappings in the Remapping table.
            </summary>
            <remarks>
            <p> The array list returned by getting the value of this property is only a
            copy; manipulating its contents will have no effect on the current set of scan
            code remappings.</p>
            <p> Setting the value of this property will cause all of the remappings in the
            current table to be deleted and replaced with the remappings containing in the
            ArrayList supplied by the application. The ArrayList supplied by the application
            must only contain TableEntry objects.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Item(System.UInt16)">
            <summary>
            Gets or sets the value associated with the specified scan code.
            </summary>
            <remarks>
            <p> If the scan code is not remapped, the indexer will return null.</p>
            <p> If a scan code is assigned a null remapping, the current remapping will be
            removed.</p>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. Mo error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <returns>
            The remapping for the specified scan code, or null if no mapping exists.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping">
            <summary>
            The Remapping class is used to hold the virtual key and function code generated
            by a remapped scan code.
            </summary>
            <remarks>
            <p>For the Function.SendUnicode and Function.Macro functions, a separate
            constructor exists to allow applications to pass in a macro index or unicode
            character.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.VirtualKey)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps directly
            to a virtual key. The remapping function code will be set to
            Function.Sendcode.
            </summary>
            <param name="virtualKey">The virtual key code to generate when the
            scan code being remapped is pressed.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps directly
            to a function that ignores the virtual key code.
            </summary>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.VirtualKey,PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a virtual key. The operation specified in the 'function' parameter
            will take effect as well. See the various function descriptions for more
            information.
            </summary>
            <param name = "virtualKey">The virtual key code to generate when the
            scan code being remapped is pressed.</param>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(System.UInt16,PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a unicode character or macro. See the Function.SendUnicode and
            Function.Macro function descriptions for more information.
            </summary>
            <param name="functionData">For the Function.Macro, functionData is
            interpreted as an index of the macro; for the Function.SendUnicode,
            functionData is interpreted as an unicode character code; for the
            Function.SystemPowerState, functionData is interpreted as a member in
            the enum VirtualKey.SystemPowerState
            </param>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(System.UInt16,System.Byte)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a unicode character or macro. See the Function.SendUnicode and
            Function.Macro function descriptions for more information.
            </summary>
            <param name="functionData">For the Function.Macro, functionData is
            interpreted as an index of the macro; for the Function.SendUnicode,
            functionData is interpreted as an unicode character code; for the
            Function.SystemPowerState, functionData is interpreted as a member in
            the enum VirtualKey.SystemPowerState
            </param>
            <param name="MacroIndexOrUnicodeValue">the macro index or unicode character
            value for remappings that use them.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.GetHashCode">
            <summary>
            Serves as a hash function for the Remapping class, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns> A hash code for the current Remapping object.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.Equals(System.Object)">
            <summary>
            Determines whether two Remapping object instances are equal.
            </summary>
            <remarks>
            Two Remapping objects are considered equal if the have the same virtual
            key code (or macro/unicode character code) and the function code.
            </remarks>
            <param name="o">
            The Object to compare with the current Remapping object.
            </param>
            <returns>
            true if the specified object is equal to the current Remapping object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.ToString">
            <summary>
            Converts a Remapping object to a printable string.
            </summary>
            <returns>
            A string containing text representing the Remapping object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.MacroIndexOrUnicodeValue">
            <summary>
            Returns the macro index or unicode character value for remappings that
            use them. For other functions, the virtual key value will be returned.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.VirtualKey">
            <summary>            
            Returns the virtual key value associated with this remapping. All new 
            virtual keys(that have not been updated by the SDK) on the driver will 
            return VirtualKey.Unknown by this API.  Please use MacroIndexOrUnicodeValue 
            to get the exact value of these new virtual key values.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.Function">
            <summary>
            Returns the function code associated with this remapping.  All new function 
            keys(that have not been updated by the SDK)on the driver will return 
            Function.Unknown by this API.  Please use FunctionKey to get the exact 
            value of these new function key values.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.FunctionKey">
            <summary>
            Returns the function code associated with this remapping.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry">
            <summary>
            A TableEntry represents a scan code remapping in one of the RemappingTables.
            A TableEntry object contains the scan code that has been remapped, along
            with the Remapping object that defines the operation to perform and/or virtual
            key etc. to generate when the scan code is seen.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.#ctor(System.UInt16,PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping)">
            <summary>
            Constructor. Used to create a TableEntry for a scan code that has been
            remapped to some function code/virtual key combination.
            </summary>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="remapping">The scan code to be remapped.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.GetHashCode">
            <summary>
            Serves as a hash function for the TableEntry class, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns> A hash code for the current TableEntry object.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.Equals(System.Object)">
            <summary>
            Determines whether two TableEntry object instances are equal.
            </summary>
            <remarks>
            Two TableEntry objects are considered equal if the have the same scan code
            and same Remappings.
            </remarks>
            <param name="o">
            The Object to compare with the current TableEntry object.
            </param>
            <returns>
            true if the specified object is equal to the current TableEntry object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.ToString">
            <summary>
            Converts a TableEntry object to a printable string.
            </summary>
            <returns>
            A string containing text representing the TableEntry object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.ScanCode">
            <summary>
            Returns the scan code associated with this TableEntry.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.Remapping">
            <summary>
            Returns the remapping object associated with this TableEntry.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping">
             <summary>
             The ScanCodeRemapping class is used to remap the scan codes of the keys on a
             Psion Teklogix device, in order to change the behaviour of the key(s). Any key or
             keys on the device can be remapped.
            
             <p>The ScanCodeRemapping class enables applications to perform the follow
             operations:
             * Create one or more scan code remappings for a scan code table.
             * Remove a scan code remapping from a scan code table.
             * Remove all scan code remappings from a scan code table.
             * Check to see if a particular scan code has been remapped.
             * Convert the table to a printable string
             </p>
             </summary>
             <remarks>
             <p>A scan code is an integer value representing a key on a keyboard, and is
             hardware-specific (more precisely, specific to the type of keyboard on the
             Windows CE device). The scan code for the ENTER key, for example, may be different
             on the 56-key and 37-key boards. Keys with identical names (like ENTER) may have
             different scan codes. Consult your hardware guide for keyboard scan code values.</p>
            
             <p>Modifier keys are keys on the keyboard that when pressed, change the behaviour
             of other keys on the keyboard. The following keys are considered modifier keys:
             BLUE, ORANGE, ALT, SHIFT, CTRL. BLUE, ORANGE, and SHIFT can actually change the
             virtual key value generated by a scan code press (see below).</p>
            
             <p>A virtual-key code is a device-independent value defined by the system that
             identifies the purpose of a key. Scan codes are mapped to virtual key codes by
             the keyboard driver. However, the same scan code can map to different virtual key
             values due to the state of other keys on the keyboard, primarily the BLUE and
             ORANGE modifier keys. There is a separate table that represents the scan code to
             virtual key mappings when one of these two keys (BLUE, ORANGE) has been pressed,
             and another for when neither key has been pressed. SHIFT can also affect the
             virtual code generated, however the SHIFT table cannot be remapped. The CTRL and
             ALT modifier keys will not change the virtual key code generated, however an
             application can detect the state of these keys and change its behaviour
             accordingly.</p>
            
             <p>A function (see the Function enumeration) is an operation that will be performed
             when a particular scan code is generated by a key press. This operation may modify
             the virtual key code generated, or cause some other effect to take place, for
             example change the backlight intensity. Typically, functions can be categorized
             as follows:
             * Macro - maps a scan code to macro key, which will then be mapped into a sequence
               of one of more virtual key codes. No virtual key code is generated.
             * Operation only - maps a scan code to some specific behaviour - no virtual key
               code is generated.
             * Virtual key (+modifier) - maps a scan code to a virtual key code, and may
               simulate the pressing of one or more modifier keys.
             * Direct Unicode Mapping - allows a scan code to be mapped directly to UNICODE
               character, meant generating characters with no virtual key equivalents.
             * Modifier key mapping - causes a scan code to simulate the pressing of a modifier
               key, in order to correctly update the modifier key state (off -> one shot ->
               locked -> off).
             * Null mapping - The Function.Skip operation causes a scan code to be ignored.
             </p>
            
             <p>A scan code mapping involves all of the above elements, where a scan code (X)
             generated by a key is mapping to a function (F), and possibly a virtual key (VK),
             macro index, or unicode character value. A default mapping exists for every scan
             code. Scan code remappings are used to override existing mappings.</p>
            
             <p>Some characters do not have virtual key codes, but can be generated using
             shifted key codes. For example, a '+' character is actually generated by sending
             a shifted '=' virtual key code (that is, the scan code is mapped to VK_EQUAL and
             the function Function.SendShiftedCode). These mappings can be inferred from a
             standard PC keyboard.</p>
            
             <p>If two threads or processes attempt to modify the keyboard scan code remappings
             at the same time, the results will be undefined.</p>
            
             </remarks>
             <example>
             <p>The following code remaps the five function keys on a 7535's 56-key keyboard, so
             that the F1 key wil generate the VK_F5 virtual key code, F2 the VK_F4 virtual key
             code, etc. All the remappings are added to the normal table (BLUE and ORANGE not
             pressed).</p>
             <pre>
            
                 ScanCodeRemapping.NormalTable.Add(0x10, new RemappingTable.Remapping(VirtualKey.VK_F5));
                 ScanCodeRemapping.NormalTable.Add(0x20, new RemappingTable.Remapping(VirtualKey.VK_F4));
                 ScanCodeRemapping.NormalTable.Add(0x30, new RemappingTable.Remapping(VirtualKey.VK_F3));
                 ScanCodeRemapping.NormalTable.Add(0x40, new RemappingTable.Remapping(VirtualKey.VK_F2));
                 ScanCodeRemapping.NormalTable.Add(0x50, new RemappingTable.Remapping(VirtualKey.VK_F1));
            
             </pre>
             </example>
            
             <example>
             <p> The following code causes the ENTER button to act like the scan button (again,
             assuming a 7535 with a 56-key keyboard):</p>
            
             <pre>
            
                 ScanCodeRemapping.NormalTable.Add(0x08, new RemappingTable.Remapping(Function.ScannerOn));
            
             </pre>
             </example>
            
             <example>
             <p> If a program needs to temporarily override existing key remappings, it can
             preserve the existing remappings by doing the following:</p>
            
             <pre>
            
                 ArrayList oldRemappings = ScanCodeRemapping.BlueKeyTable.Entries;
            
                 // ...change remappings here ...
            
                 ScanCodeRemapping.BlueKeyTable.Entries = oldRemappings;
            
             </pre>
             </example>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.BlueKeyTable">
            <summary>
            The blue key table contains remappings for all scan codes when the blue key
            is pressed.
            </summary>
            <remarks>
            If both the blue and orange keys have been pressed (they are both in either the
            one-shot or locked state), the blue key has precedence.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.NormalTable">
            <summary>
            The normal table contains remappings for all scan codes when neither the blue
            key nor the orange key is pressed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.OrangeKeyTable">
            <summary>
            The orange key table contains remappings for all scan codes when the orange
            key is pressed.
            </summary>
            <remarks>
            If both the blue and orange keys have been pressed (they are both in either the
            one-shot or locked state), the blue key has precedence.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.SymageryImager">
            <summary>
             Implementation of the Symagery Imager-specific subclass of the ImageCaptureDevice
            class. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>A number of Psion Teklogix handheld devices contain internal imaging devices, 
             capable of both capturing images in a fashion similar to a digital camera, and 
             scanning barcodes like a standard barcode scanner. While the ScannerServicesDriver 
             class is used to capture barcodes using an image capture device, image capturing
             can only be performing using the Image Capture API.</p>
            
             <p>The following operations can be performed with the image capture API:
             * Capture an image.
             * Store the last valid image captured by the imager.
             * Set/get imager settings (brightness, contrast, exposure time).
             * Set/get the image size (height and width).
             * Set/get the imager resolution (sub-sampling factor).
             * Default all imager settings.
             * Determine the upper limit of the size of a scanned image in bytes, based on the
                   current imager settings.
             </p>
             </summary>
             <remarks>
             <p>Captured images are not returned directly by the Image Capture API for a number 
             of reasons. First, the application may not need the image, especially if a previous
             image was already captured (preview). Second, many embedded devices do not have 
             very much available memory: repeatedly loading large images into memory and 
             displaying them can be slow, and could cause memory allocation failures if the 
             memory is not then promptly freed. As the images are by default placed in the 
             object store, loading them will not take a great deal of time.</p>
            
             <p>The Image Capture API consists of one main class (ImageCaptureDevice) and
             several associated classes (ImageCaptureSavedEventArgs, and 
             ImageCaptureTriggerEventArgs).</p>
            
             <p>In order to capture an image, the following steps need to be performed:
             * Determine what imagers are available on the current Psion Teklogix device.
             * Select the imager to use, and create the ImageCaptureDevice object.
             * Register to receive image capture events.
             * Trigger an image capture using the appropriate API method (CaptureImage)
             </p>
            
             <p>The Image Capture API and the Scanner API "share" the imaging device. By 
             default, trigger presses will cause a barcode scan to take place, as will the 
             Scan method in the Scanner class. No image will be captured in either case.
             However, the Image Capture and Scanner APIs <b>do not</b> share a common 
             configuration with regards to <u>any</u> imager settings. In other words,  
             changes made to the imager settings will have no effect on the settings used 
             when a barcode scan takes place.</p>
              
             <p>All image capture devices, or "imagers", operate as barcode scanners by 
             default. In other words, pulling the scanner trigger, pressing the scan button, 
             or initiating a softscan through the Scanner class will simply cause the imager 
             to scan for a barcode. However, an application may want to listen for when the 
             scanner trigger is pulled, in order capture an image, or store the image 
             generated by a successful barcode scan. In order to be able to perform one of 
             these operations, the application must be able to receive a notification when 
             the imager trigger is pulled. By changing the trigger capture state, applications 
             can receive trigger events as they occur, allowing them to gain finer control of
             imager operations. See the SetTriggerEventCaptureState method for more details.
             </p>
            
             <p>Note that the scan button(s), the scanner trigger (if the device has one) and
             a softscan generated using the Scanner API are all considered "triggers", and
             function identically.</p>
             
             <p>The SetImagerScanningState method can be used to enable or disable the scanner 
             functionality of an image capture device. Disabling the scanner functionality
             is only typically done when the application either has to prevent a user from
             scanning barcodes, or it is going to take control of the trigger, in order to
             use it to initiate image captures.</p>
            
             <p>In order to capture an image using the scan button or scanner trigger, the
             following steps need to be performed:
             * Determine what imagers are available on the current Psion Teklogix device.
             * Select the imager to use, and create the ImageCaptureDevice object.
             * Register to receive image capture events.
             * Set the trigger capture state to TriggerCaptureState.Enabled.
             * Set the barcode scanning state to BarcodeScanningState.Disabled.
             * Trigger an image capture using the scan button or scanner trigger.
             * Watch for the Trigger down event.
             * Call the CaptureImage method.
             </p>
             </remarks>
            
             <example>
             The following code shows how to capture an image from an application:
             <code>
                ImageCaptureDevice imager = null;
                try {
                    string [] imageCaptureDevices = ImageCaptureDevice.EnumerateImageCaptureDevices();
                    if( imageCaptureDevices.Length == 0 ) {
                        // no image capture device. 
                        Application.Exit(-1);
                    }
            
                    // assume only one imager - we could pop up a dialog to ask the user which 
                    // imager they want to use.
                    ImageCaptureDevice imager = 
                        ImageCaptureDevice.GetImageCaptureDevice(imageCaptureDevices[0]);
                }
                catch( Exception e ) {
                    Application.Exit(-1);
                }
            
                // set imager parameters here ... settings may vary depending on the light level, etc.
            
                // register for image capture events.
                imager.savedEvent += myImageSavedEventHandler;
            
                // note there is no extension here. Different imagers can report captured image
                // data in different formats.
                imager.CaptureImage(new FileInfo("ImageFileName"));
             </code>
             </example>
             
             <example>
             The following code shows how to capture a trigger press:
             <code>
              // This section of code creates an imager object, and then waits for the user
              // to scan a barcode. When a trigger event occurs, a trigger event will be 
              // generated, and the handler will be called. The handler will attempt to 
              // capture an image.
              public void CaptureAnImage()
              {
                  // get all the imagers present
                  string [] imagers = ImageCaptureDevice.EnumerateImageCaptureDevices();
            
                  // we'll assume one imager is present
                  ImageCaptureDevice imager = ImageCaptureDevice.GetImageCaptureDevice(imagers[0]);
            
                  // register a listener to handle imager events 
                  imager.triggerCapturedEvent += new ImageCaptureTriggerEventHandler(MyTriggerHandler);
            
                  imager.TriggerEventCaptureState = TriggerCaptureState.TriggerCaptureEnabled;
            
                  // ...
            
                  // disable trigger capture before the program exits. 
                  imager.TriggerEventCaptureState = TriggerCaptureState.TriggerCaptureDisabled;
              }
            
              // Note: We call the CaptureLastValidImage method here because we want to capture
              // the image associated with a successful barcode scan. If the scanner is enabled,
              // the only way to get a valid image is to either call the CaptureImage method, or
              // the CaptureLastValidImage after a trigger event has been received.
              private void MyTriggerHandler( object sender, ImageCaptureTriggerEventArgs e )
              {
                  // assume a valid barcode was scanned. The application could always wait for
                  // a scan-complete event (see the ScannerServicesDriver class)
                  if( e.StateOfTrigger == TriggerState.Up ) {
                      FileInfo lastValidImage = 
                         imager.CaptureLastValidImage(new FileInfo("FileNameNoExtension"));
                  }
              }
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.EnumerateImageCaptureDevices">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Lists all of the image capture devices found on this Psion Teklogix device.</p>
            <p>At present, the following devices are supported:
            * Symagery SX4000 ST   (Standard imager)
            * Symagery SX4000 ULR  (Ultra-long range)
            * Symagery SX4000 UHD  (Ultra-high definition)
            * Symagery SX5000 ST   (Standard imager)
            * Symagery SX5000 ULR  (Ultra-long range)
            * Symagery SX5000 UHD  (Ultra-high definition)
            </p>
            </summary>
            <returns>
             An array of strings: the names of the imagers found on this device. If no 
            supported devices are found, a zero-length array will be returned.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.GetImageCaptureDevice(System.String)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Used to create the specified image capture device object. The name specified 
            must be one of the names reported by the EnumerateImageCaptureDevices method.
            If the imager specified by the application is not available or not present, an
            exception will be thrown.</p>
            </summary>
            <remarks>
            <p>When the application is finished using the image capture device, it should
            release control of the device by invoking the Dispose method. This will allow
            other applications to access the image capture device. Currently, only one 
            client is allowed per imager at a time.</p>
            </remarks>
            <param name="name">The name of the image capture device to instantiate.</param>
            <returns>The image capture device object instantiated.</returns>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the imager 
            specified was null or not found.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - If the imager is
            not available.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If the 
            constructor of the class associated with the given imager name cannot be 
            invoked because either the caller does not have permission to execute the 
            constructor, or because the imager class is abstract.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.Dispose">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Releases the resources held by the ImageCaptureDevice object, in order to 
            allow other applications to be able to use the imager device.
            </summary>
            <remarks>
            Any attempt to access the image capture device object after this method is
            called will cause an ObjectDisposedException exception to be thrown.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.DefaultSettings">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             Defaults all of the image capture device settings. 
             </summary>
             <remarks>
             <p> Defaulting the imager settings has no effect on the settings used by the 
             imager when it is going to scan a barcode.</p>
             
             <p> The following parameters are affected:
             * Brightness
             * Contrast
             * Exposure Time
             * Sub-sampling Factor
             * Horizontal Size
             * Vertical Size
             </p>
             
             <p>The image type parameter will not be affected.</p>
            
             <p>Because changing this property can change the image size and resolution, 
             the value reported by the MaximumFileSize property may also change.</p>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.CaptureImage(System.IO.FileInfo)">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>Causes the image capture device to capture an image using the current parameters
             configured. The captured image will be placed in the object store (the temporary
             Windows CE file system). The name of the captured image (including the extension) 
             will be reported to any registered image capture handlers through an image saved
             event.</p>
             </summary>
             <remarks>
             <p>When an application calls this method it must pass in the name of the file, 
             <u>minus the extension</u>, where the captured image is to be stored. The image
             capture API will add the extension corresponding to the configured image type,
             and report the final name of the capture file in the event sent to all  
             registered image capture event handlers. Any extension provided will be treated 
             as part of the file name.</p>
            
             <p>For example, if an image is configured to generate .BMP files:
             <code>
                imager.CaptureImage(new File("ImageFileName"));
             </code>
            
             will create an image file called <i>ImageFileName.bmp</i>. If the application
             does the following instead:
            
             <code>
                imager.CaptureImage(new File("ImageFileName.bmp"));
             </code>
            
             the file generated will be named <i>ImageFileName.bmp.bmp</i>
             </p>
             </remarks>
             
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified file information object is null.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.CaptureLastValidImage(System.IO.FileInfo)">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
              The CaptureLastValidImage method is used to store the last valid image 
             captured by the imager device. 
             </summary>
             <remarks>
             <p>A valid image can be generated in one of two ways:
             * By calling CaptureImage. An image captured this way will remain in memory; 
               calling CaptureLastValidImage will cause the stored image to be saved to 
               the file system.
             * A successful barcode scan, i.e. one that caused one or more barcodes to be 
               decoded by the imaging scanner, will generate a valid image that will remain 
               in memory (until another successful scan or image capture occurs).
             </p>
            
             <p>This method, unlike the CaptureImage method, operates synchronously.
             It does not return until the image data is saved to the file system, or until
             an error is detected. Also, it does not generate an image saved event when an
             image is captured.</p>
             
             <p>In order to get an image associated with a particular barcode, an 
             application should register a ScanCompleteEvent handler method with 
             the event in a Scanner instance. When a scan complete event occurs, an 
             application can then call the CaptureLastValidImage method to get the
             associated barcode.</p>
             </remarks>
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <returns>A FileInfo object representing the file containing the image.</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the specified
             FileInfo object is null.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If there is no
             valid image present in memory to save.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.EnumerateSupportedImageTypes">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Returns the image type or types supported by the image capture device.
            </summary>
            <remarks>
            Older Symagery imagers (SX4000) only support the bitmap format. Newer Symagery 
            imagers support both the bitmap and JPEG formats.
            </remarks>
            <returns>An array of strings listing the supported image file types.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.OpenViewfinderWindow(System.Drawing.Rectangle)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Opens a new viewfinder window with the given dimensions/location 
            </summary>
            <remarks>
             The location of the image should be relative to the upper-left hand corner of
            the screen. Since this offset is difficult to get in .NET, where all locations
            are given relative to the upper-left hand corner of the parent control, using
            the location relative to the parent control is also acceptable. In this case
            however, the parent control should be as close to the upper-left hand corner 
            of the display as possible.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.CloseViewfinderWindow">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Closes the open viewfinder window. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.#ctor(System.String)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor. Initializes an ImageCaptureDevice object instance.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.OnImageCaptureSavedEvent(System.IO.FileInfo)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Publishes an image-saved event to any registered handlers. The name of the
            file containing the image captured will be included in the event arguments.
            </summary>
            <param name="imageFileInfo">The file information object representing the file
             containing the captured image.</param>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.OnImageCaptureTriggerEvent(PsionTeklogix.Barcode.TriggerState)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Publishes an trigger state change event to any registered handlers. The 
            trigger state at the time of the event is included in the event arguments.
            </summary>
            <param name="triggerState">The state of the trigger at the time the event
             was generated.</param>
        </member>
        <member name="E:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.imageSavedEvent">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The event used to notify registered event consumers when an image has been 
            successfully captured by the imager and saved to the file system. 
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.triggerCapturedEvent">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The event used to notify registered event consumers when a trigger press 
            has been detected. Both trigger up and trigger down events will be published.
            </summary>
            <remarks>
            It is possible in rare instances to get multiple trigger-up events in sequence,
            without a trigger-down event occurring between them.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.Name">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Returns the name of the image capture device being controlled.
            </summary>
            <returns>The name of the image capture device being controlled.</returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ImagerTriggerCaptureState">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>All image capture devices, or "imagers", operate as barcode scanners by 
             default. In other words, pulling the scanner trigger, pressing the scan button,
             or initiating a softscan through the Scanner API will simply cause the imager
             to scan for barcodes. However, an application may want to detect when the 
             scanner trigger is pulled, in order capture an image, or store the image 
             generated by a successful barcode scan. In order to be able to perform one of 
             these operations, the application must be able to receive a notification when 
             the imager trigger is pulled. By changing the trigger capture state, 
             applications can register to receive trigger events as they occur, allowing 
             them to gain finer control of imager operations.</p>
            
             <p>Once the trigger capture state has been set to TriggerCaptureState.Enabled,
             all "trigger down" and "trigger up" events will be sent to handlers registered 
             with the imager event, <i>triggerCapturedEvent</i>. Trigger events will always 
             come in order: "trigger down", when the trigger is pulled or the scan button is 
             pressed, followed by "trigger up", when the trigger or scan button is released.
             </p>
             </summary>
             <remarks>
             <p>Changing the trigger capture state has no effect on the imager, with respect
             to its operation as a barcode scanner. At the point when a trigger is received 
             by the application, the process of scanning a barcode will have already begun. 
             In order prevent the imager from scanning a barcode when the trigger is pulled, 
             an application can use the ImagerScanningState property to disable the scanner
             portion of the image capture device.</p>
            
             <p>The scan button(s), the scanner trigger (if the device has one) and a 
             softscan generated using the Scanner API are all considered "triggers", and
             function identically.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ImagerBarcodeScanningState">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>This property is used to enable or disable the barcode scanning functionality 
             of the image capture device. Disabling the scanner functionality is only 
             typically done when an application either has to prevent a user from scanning 
             barcodes, or when it is going to take control of the trigger in order to use
             the trigger to initiate image captures.</p>
             </summary>
             <remarks>
             <p>Note that when this method is called, <b><u>ALL</u></b> mechanisms used to 
             generate barcode scans, include software-initiated scans, are disabled for this 
             imager device.</p>  
            
             <p><b>Warning:</b> It is the responsiblility of the application to re-enable 
             the scanning features of the imager using this method before it exits. If the 
             application fails to re-enable barcode scanning before it exits, no other 
             application will be able to initiate a barcode scan until another application 
             re-enables barcode scanning.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.HorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The width of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The width set must be positive, and less than or equal to the value reported 
            by the GetMaximumHorizontalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MaximumHorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The maximum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MinimumHorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The minimum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.VerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The height of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The height set must be positive, and less than or equal to the value reported 
            by the GetMaximumVerticalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MaximumVerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The maximum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MinimumVerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The minimum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.Contrast">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the contrast (also called gain) setting on the imager. The specified 
            contrast value should be between 0 (lowest contrast) and 100 (highest contrast).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.Brightness">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the brightness (also called illumination) setting on the imager. 
            The specified value should be between 0 (lowest brightness level) and 100 
            (highest brightness level).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ExposureTime">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the current exposure time setting on the imager. The new exposure time
            value should be specified as a percentage between 0 (shortest exposure time) and
            100 (longest exposure time).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.SubSamplingFactor">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>Changes the sub-sampling factor setting on the imager. The sub-sampling 
             factor controls the resolution or pixel-per-inch (ppi) that the imager uses 
             when capturing an image.</p>
             </summary>
             <remarks>
             <p>The Symagery imager uses the parameter to determine the number of pixels (or 
             samples) that will be used to create an image. Smaller values give a finer 
             resolution (and therefore a sharper image), larger values give a more 
             coarse resolution (and therefore a lower-quality image).</p>
            
             For example:
             <code>
              * a value of 0 means no sub-sampling i.e. the finest resolution:  XXXXXXXXXXXXXXXX
              * a value of 1 means 1 out of 2 pixels:                           X_X_X_X_X_X_X_X_
              * a value of 2 means 1 out of 4 pixels:                           X___X___X___X___
              * a value of 3 means 1 out of 8 pixels i.e. the lowest:           X_______X_______
             </code>
            
             <p>Note that the sub-sampling factor applies to both X and Y axis.</p>
            
             <p>The maximum valid value for the subsampling factor is given by the
             MaximumSubSamplingFactor property.</p>
             </remarks>
             <exception cref="T:System.ArgumentException">ArgumentException - If the new value
             specified is out of range.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MaximumSubSamplingFactor">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Returns the maximum possible sub-sampling factor that can be configured on the 
            imager.</p>
            </summary>
            <returns>The maximum possible sub-sampling factor that can be configured on the 
            imager.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.MaximumFileSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Calculates and returns the maximum size of an image that can be generated
            by the image capture device, given the current sub-sampling factor, and the 
            image height and width settings. Generally, smaller images and larger sub-
            sampling values will reduce the size of the image file generated. The final 
            file size will also depend on the type of image created, and whether or not 
            the image format supports compression.</p>
            </summary>
            <returns> The size of the largest image that can be created, given the current 
            imager settings. The image size is reported in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ImageFileType">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Sets/gets the file format the imager will using when saving captured images.
            </summary>
            <remarks>
            The new file format name must be one of the values reported by the
            EnumerateSupportedImageTypes method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified file type is null.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If the 
            specified file type is not supported by the imager.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.AutoExposure">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>When auto-exposure mode is enabled 
            the contrast and brightness  values will be dynamically changed by the imager based on
            ambient light conditions. When auto-exposure is disabled the contrast and brightness 
            settings can once again be adjusted by the application. Note: enabling auto-exposure 
            may also affect other imager settings, however this behaviour is imager dependent.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.IlluminationLedsEnabled">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Enables or disables the LEDs on the imager used to illuminate the object(s)
            whose image will be captured. 
            </summary>
            <remarks>
            For manual exposure mode, disabling the LEDs is equivalent to setting the 
            brightness to zero. There is no equivalent for auto-exposure mode.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.PowerState">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Sets/gets the power state of the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ImageCaptureSavedEventHandler">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            "Prototype" for any event handlers to be registered with the imageSavedEvent
            event object.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDevice.ImageCaptureTriggerEventHandler">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            "Prototype" for any event handlers to be registered with the triggerCapturedEvent
            event object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.#ctor(System.String)">
            <summary>
            Constructor. Initializes an ImageCaptureDevice object instance. Opens a handle
            to the specified imager driver after looking up the driver name associated
            with the imager name specified.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.Dispose">
            <summary>
            Releases the resources held by the ImageCaptureDevice object, in order to 
            allow other applications to be able to use the imager device.
            </summary>
            <remarks>
            Any attempt to access the image capture device object after this method is
            called will cause an ObjectDisposedException exception to be thrown.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.DefaultSettings">
             <summary>
             Defaults all of the image capture device settings. 
             </summary>
             <remarks>
             <p> Defaulting the imager settings has no effect on the settings used by the 
             imager when it is going to scan a barcode.</p>
             
             <p> The following parameters are affected:
             * Brightness
             * Contrast
             * Exposure Time
             * Sub-sampling Factor
             * Horizontal Size
             * Vertical Size
             </p>
             
             <p>The image type parameter will not be affected.</p>
            
             <p>Because changing this property can change the image size and resolution, 
             the value reported by the MaximumFileSize property may also change.</p>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.CaptureImage(System.IO.FileInfo)">
             <summary>
             <p>Causes the image capture device to capture an image using the current 
             parameters configured. The captured image will be placed in the object store 
             (the temporary Windows CE file system). The name of the captured image 
             (including the extension) will be reported to any registered image capture 
             handlers through an image saved event.</p>
             </summary>
             <remarks>
             <p>When an application calls this method it must pass in the name of the file, 
             <u>minus the extension</u>, where the captured image is to be stored. The image
             capture API will add the extension corresponding to the configured image type,
             and report the final name of the capture file in the event sent to all  
             registered image capture event handlers. Any extension provided will be treated 
             as part of the file name.</p>
            
             <p>For example, if an image is configured to generate .BMP files:
             <code>
                imager.CaptureImage(new File("ImageFileName"));
             </code>
            
             will create an image file called <i>ImageFileName.bmp</i>. If the application
             does the following instead:
            
             <code>
                imager.CaptureImage(new File("ImageFileName.bmp"));
             </code>
            
             the file generated will be named <i>ImageFileName.bmp.bmp</i>
             </p>
             </remarks>
             
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified file information object is null.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.CaptureLastValidImage(System.IO.FileInfo)">
             <summary>
              The CaptureLastValidImage method is used to store the last valid image 
             captured by the imager device. 
             </summary>
             <remarks>
             <p>A valid image can be generated in one of two ways:
             * By calling CaptureImage. An image captured this way will remain in memory; 
               calling CaptureLastValidImage will cause the stored image to be saved to 
               the file system.
             * A successful barcode scan, i.e. one that caused one or more barcodes to be 
               decoded by the imaging scanner, will generate a valid image that will remain 
               in memory (until another successful scan or image capture occurs).
             </p>
            
             <p>This method, unlike the CaptureImage method, operates synchronously.
             It does not return until the image data is saved to the file system, or until
             an error is detected. Also, it does not generate an image saved event when an
             image is captured.</p>
             
             <p>In order to get an image associated with a particular barcode, an 
             application should register a ScanCompleteEvent handler method with 
             the event in a Scanner instance. When a scan complete event occurs, an 
             application can then call the CaptureLastValidImage method to get the
             associated barcode.</p>
             </remarks>
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <returns>A FileInfo object representing the file containing the image.</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the specified
             FileInfo object is null.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If there is no
             valid image present in memory to save.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.EnumerateSupportedImageTypes">
            <summary>
             Returns the image type or types supported by the image capture device.
            </summary>
            <remarks>
            Older Symagery imagers (SX4000) only support the bitmap format. Newer Symagery 
            imagers support both the bitmap and JPEG formats.
            </remarks>
            <returns>An array of strings listing the supported image file types.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.OpenViewfinderWindow(System.Drawing.Rectangle)">
            <summary>
            Opens a new viewfinder window with the given dimensions/location 
            </summary>
            <remarks>
             The location of the image should be relative to the upper-left hand corner of
            the screen. Since this offset is difficult to get in .NET, where all locations
            are given relative to the upper-left hand corner of the parent control, using
            the location relative to the parent control is also acceptable. In this case
            however, the parent control should be as close to the upper-left hand corner 
            of the display as possible.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.SymageryImager.CloseViewfinderWindow">
            <summary>
            Closes the open viewfinder window. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.ImagerTriggerCaptureState">
             <summary>
             <p>All image capture devices, or "imagers", operate as barcode scanners by 
             default. In other words, pulling the scanner trigger, pressing the scan button,
             or initiating a softscan through the Scanner API will simply cause the imager
             to scan for barcodes. However, an application may want to detect when the 
             scanner trigger is pulled, in order capture an image, or store the image 
             generated by a successful barcode scan. In order to be able to perform one of 
             these operations, the application must be able to receive a notification when 
             the imager trigger is pulled. By changing the trigger capture state, 
             applications can register to receive trigger events as they occur, allowing 
             them to gain finer control of imager operations.</p>
            
             <p>Once the trigger capture state has been set to TriggerCaptureState.Enabled,
             all "trigger down" and "trigger up" events will be sent to handlers registered 
             with the imager event, <i>triggerCapturedEvent</i>. Trigger events will always 
             come in order: "trigger down", when the trigger is pulled or the scan button is 
             pressed, followed by "trigger up", when the trigger or scan button is released.
             </p>
             </summary>
             <remarks>
             <p>Changing the trigger capture state has no effect on the imager, with respect
             to its operation as a barcode scanner. At the point when a trigger is received 
             by the application, the process of scanning a barcode will have already begun. 
             In order prevent the imager from scanning a barcode when the trigger is pulled, 
             an application can use the ImagerScanningState property to disable the scanner
             portion of the image capture device.</p>
            
             <p>The scan button(s), the scanner trigger (if the device has one) and a 
             softscan generated using the Scanner API are all considered "triggers", and
             function identically.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.ImagerBarcodeScanningState">
             <summary>
             <p>This property is used to enable or disable the barcode scanning functionality 
             of the image capture device. Disabling the scanner functionality is only 
             typically done when an application either has to prevent a user from scanning 
             barcodes, or when it is going to take control of the trigger in order to use
             the trigger to initiate image captures.</p>
             </summary>
             <remarks>
             <p>Note that when this method is called, <b><u>ALL</u></b> mechanisms used to 
             generate barcode scans, include software-initiated scans, are disabled for this 
             imager device.</p>  
            
             <p><b>Warning:</b> It is the responsiblility of the application to re-enable 
             the scanning features of the imager using this method before it exits. If the 
             application fails to re-enable barcode scanning before it exits, no other 
             application will be able to initiate a barcode scan until another application 
             re-enables barcode scanning.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.HorizontalImageSize">
            <summary>
            <p>The width of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The width set must be positive, and less than or equal to the value reported 
            by the GetMaximumHorizontalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MaximumHorizontalImageSize">
            <summary>
            <p>The maximum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MinimumHorizontalImageSize">
            <summary>
            <p>The minimum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.VerticalImageSize">
            <summary>
            <p>The height of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The height set must be positive, and less than or equal to the value reported 
            by the GetMaximumVerticalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MaximumVerticalImageSize">
            <summary>
            <p>The maximum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MinimumVerticalImageSize">
            <summary>
            <p>The minimum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.Contrast">
            <summary>
            <p>Changes the contrast (also called gain) setting on the imager. The specified 
            contrast value should be between 0 (lowest contrast) and 100 (highest contrast).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.Brightness">
            <summary>
            <p>Changes the brightness (also called illumination) setting on the imager. 
            The specified value should be between 0 (lowest brightness level) and 100 
            (highest brightness level).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.ExposureTime">
            <summary>
            <p>Changes the current exposure time setting on the imager. The new exposure time
            value should be specified as a percentage between 0 (shortest exposure time) and
            100 (longest exposure time).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.SubSamplingFactor">
             <summary>
             <p>Changes the sub-sampling factor setting on the imager. The sub-sampling 
             factor controls the resolution or pixel-per-inch (ppi) that the imager uses 
             when capturing an image.</p>
             </summary>
             <remarks>
             <p>The Symagery imager uses the parameter to determine the number of pixels (or 
             samples) that will be used to create an image. Smaller values give a finer 
             resolution (and therefore a sharper image), larger values give a more 
             coarse resolution (and therefore a lower-quality image).</p>
            
             For example:
             <code>
              * a value of 0 means no sub-sampling i.e. the finest resolution:  XXXXXXXXXXXXXXXX
              * a value of 1 means 1 out of 2 pixels:                           X_X_X_X_X_X_X_X_
              * a value of 2 means 1 out of 4 pixels:                           X___X___X___X___
              * a value of 3 means 1 out of 8 pixels i.e. the lowest:           X_______X_______
             </code>
            
             <p>Note that the sub-sampling factor applies to both X and Y axis.</p>
            
             <p>The maximum valid value for the subsampling factor is given by the
             MaximumSubSamplingFactor property.</p>
             </remarks>
             <exception cref="T:System.ArgumentException">ArgumentException - If the new value
             specified is out of range.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MaximumSubSamplingFactor">
            <summary>
            <p>Returns the maximum possible sub-sampling factor that can be configured on the 
            imager.</p>
            </summary>
            <returns>The maximum possible sub-sampling factor that can be configured on the 
            imager.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.MaximumFileSize">
            <summary>
            <p>Calculates and returns the maximum size of an image that can be generated
            by the image capture device, given the current sub-sampling factor, and the 
            image height and width settings. Generally, smaller images and larger sub-
            sampling values will reduce the size of the image file generated. The final 
            file size will also depend on the type of image created, and whether or not 
            the image format supports compression.</p>
            </summary>
            <returns> The size of the largest image that can be created, given the current 
            imager settings. The image size is reported in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.ImageFileType">
            <summary>
            Sets/gets the file format the imager will using when saving captured images.
            </summary>
            <remarks>
            The new file format name must be one of the values reported by the
            EnumerateSupportedImageTypes method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified file type is null.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If the 
            specified file type is not supported by the imager.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.AutoExposure">
            <summary>
            <p>When auto-exposure mode is enabled 
            the contrast and brightness  values will be dynamically changed by the imager based on
            ambient light conditions. When auto-exposure is disabled the contrast and brightness 
            settings can once again be adjusted by the application. Note: enabling auto-exposure 
            may also affect other imager settings, however this behaviour is imager dependent.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.IlluminationLedsEnabled">
            <summary>
            Enables or disables the LEDs on the imager used to illuminate the object(s)
            whose image will be captured. 
            </summary>
            <remarks>
            For manual exposure mode, disabling the LEDs is equivalent to setting the 
            brightness to zero. There is no equivalent for auto-exposure mode.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.SymageryImager.PowerState">
            <summary>
             Sets/gets the power state of the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl">
             <summary>
              @deprecated Will be replaced by Imager SDK and namespace.
              The ImageCaptureViewfinderControl is used to create a viewfinder 'window' on an
             application window. The viewfinder window, once enabled, will display the current
             image being captured by the imager. The image will be updated periodically, based
             on the interval value configured.
             </summary>
             <remarks>
             <p> The image capture viewfinder control operates on an ImageCaptureDevice object
             supplied by the application. If the application is using an ImageCaptureDevice 
             control, it can get the internal ImageCaptureDevice object used by the control
             using the ImageCaptureDevice property.</p>
             <p> The viewfinder does not take over or otherwise prevent other code from using
             the imager. Nor does it reconfigure the imager. Consequently, the viewfinder 
             control will always use the current imager configuration, and will be affected by 
             any changes made to it.</p>
             <p> The interval value should be set to a reasonable value, approximately 1 second
             or so. If the value configured is too small, extra requests will be queued up, and
             image captures will continue to occur after the viewfinder window is disabled.</p> 
             </remarks>
             <example>
             The following code creates and configures a viewfinder control:
             <code>
                imageCaptureDeviceControl imager = imageCaptureDeviceControl();
                ... (configure control here) ...
            
                ImageCaptureViewfinderControl vf = new ImageCaptureViewfinderControl();
                vf.imageCaptureViewfinderControl1.EnableViewfinder = false;
                vf.imageCaptureViewfinderControl1.ImageCaptureDevice = imager.ImageCaptureDevice;
                vf.imageCaptureViewfinderControl1.Interval = 1500;
                vf.imageCaptureViewfinderControl1.Size = new System.Drawing.Size(224, 120);
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.#ctor">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor for the ImageCaptureViewfinderControl class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.Dispose">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Releases all resources used by the Component.
            </summary>
            <remarks>
             Calling Dispose allows the resources used by the Component to be reallocated 
            for other purposes.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.EnableViewfinder">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             The EnableViewfinder property enables or disables the viewfinder. While 
            enabled, then viewfinder will capture images from imager periodically (every
            'Interval' milliseconds) and show them in the display area of the component.
            </summary>
            <remarks>
            <p>Setting this property to true has no effect if the ImageCaptureDevice 
            property is null.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.Interval">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             The length of time between image capture attempts initiated by the viewfinder
            control, in milliseconds.
            </summary>
            <remarks>
            <p> The interval value should be set to a reasonable value, approximately 1 second
            or so. If the value configured is too small, extra requests will be queued up, and
            image captures will continue to occur after the viewfinder window is disabled.</p> 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.ImageCaptureDevice">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             The image capture device object that will be used to capture the images that
            will be displayed by the viewfinder.
            </summary>
            <remarks>
            <p>The viewfinder control does not change or otherwise reconfigure the imager.</p>
            <p>It is not possible to enable the viewfinder until this property is set to
            a non-null value.</p>
            <p>Use the ImageCaptureDeviceControl.ImageCaptureDevice property to get a valid
            value for this property if an application is not working directly with
            ImageCaptureDevice objects.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureViewfinderControl.Image">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The bitmap image currently being displayed by the viewfinder.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.ScreenWindow">
            <summary>
            Window message handler for monitoring for screen changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.ScreenWindow.#ctor(PsionTeklogix.Windows.Forms.Screen)">
            <summary>
            Creates an instance of a Screen Window class.
            </summary>
            <param name="screen"></param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.ScreenWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with screen changes.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.ScreenWindow.InCallback">
            <summary>
            Indicates if there is a callback in process.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.BaudRates">
            <summary>
            Communication baud rates for the serial port.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud110">
            <summary>110 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud150">
            <summary>150 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud300">
            <summary>300 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud600">
            <summary>600 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud2400">
            <summary>2400 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud4800">
            <summary>4800 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud9600">
            <summary>9600 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud14400">
            <summary>14400 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud19200">
            <summary>19200 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud38400">
            <summary>38400 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud57600">
            <summary>57600 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud115200">
            <summary>115200 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud128000">
            <summary>128000 Baud</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.BaudRates.Baud256000">
            <summary>256000 Baud</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.ByteSizes">
            <summary>
            The number of bits in a byte frame.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.ByteSizes.Bits7">
            <summary>7 Bits</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.ByteSizes.Bits8">
            <summary>8 Bits</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.StopBits">
            <summary>
            Number of stop bits for the frame.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.StopBits.Bits1">
            <summary>1 Bit</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.StopBits.Bits15">
            <summary>1.5 Bits</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.StopBits.Bits2">
            <summary>2 Bits</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.Parities">
            <summary>
            The parity bit setting for a frame.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.Parities.None">
            <summary>No Parity</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.Parities.Odd">
            <summary>Odd Parity</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.Parities.Even">
            <summary>Even Parity</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.Parities.Mark">
            <summary>Mark Parity</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.Parities.Space">
            <summary>Space Parity</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.PurgeBuffers">
            <summary>
            What buffer should should be purged or aborted.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PurgeBuffers.RXAbort">
            <summary>Terminates all outstanding overlapped read operations and 
            returns immediately, even if the read operations have not been 
            completed.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PurgeBuffers.RXClear">
            <summary>Clears the input buffer (if the device driver has one).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PurgeBuffers.TxAbort">
            <summary>Terminates all outstanding overlapped write operations 
            and returns immediately, even if the write operations have not 
            been completed.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PurgeBuffers.TxClear">
            <summary>Clears the output buffer (if the device driver has one).</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.DTRControls">
            <summary>
            Specifies the DTR (data-terminal-ready) flow control. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.DTRControls.Disable">
            <summary>Disables the DTR line when the device is opened and leaves 
            it disabled.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.DTRControls.Enable">
            <summary>Enables the DTR line when the device is opened and leaves 
            it on.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.DTRControls.Handshake">
            <summary>Enables DTR handshaking.</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.RTSControls">
            <summary>
            Specifies the RTS (request-to-send) flow control.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.RTSControls.Disable">
            <summary>Disables the RTS line when the device is opened and leaves 
            it disabled.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.RTSControls.Enable">
            <summary>Enables the RTS line when the device is opened and leaves 
            it on.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.RTSControls.Handshake">
            <summary>Enables RTS handshaking. The driver raises the RTS line when 
            the type-ahead (input) buffer is less than one-half full and lowers the 
            RTS line when the buffer is more than three-quarters full.</summary>
        </member>
        <member name="F:PsionTeklogix.Serial.RTSControls.Toggle">
            <summary>Specifies that the RTS line will be high if bytes are available
            for transmission. After all buffered bytes have been sent, the RTS line 
            will be low.</summary>
        </member>
        <member name="T:PsionTeklogix.Serial.ReadMode">
            <summary>
            Specifies the read mode for the asynchronous reader.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.ReadMode.Raw">
            <summary>
            Raw mode. Data returned immediately.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.ReadMode.Line">
            <summary>
            Line mode. Data returned when NewLine string is received.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.PortLocation">
            <summary>
            Enumeration to specify the values returned by GetPortLocation
            method.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PortLocation.PortLocation_OnDevice">
            <summary>
            Port is located on the device
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PortLocation.PortLocation_OnDock">
            <summary>
            Port is located on the docking station
            </summary>
        </member>
        <member name="F:PsionTeklogix.Serial.PortLocation.PortLocation_Unknown">
            <summary>
            Port location is undetermined
            </summary>
        </member>
        <member name="T:PsionTeklogix.Serial.ReceivedEventHandler">
            <summary>
            Represents a method that will be called when characters has been received
            by the serial port.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.TransmittedEventHandler">
            <summary>
            Represents a method that will be called when characters have been transmitted
            by the serial port.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.ErrorEventHandler">
            <summary>
            Represents a method that will be called when there was a communication error.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortLocationChangeEventHandler">
            <summary>
            Serial Port Change Delegate.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortAttachedEventHandler">
            <summary>
            The specification for the methods to be registered with the attached event handler.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPortDetachedEventHandler">
            <summary>
            The specification for the methods to be registered with the detached event handler.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Serial.SerialPort">
             <summary>
             Provides access to the serial ports.
             </summary>
             <remarks>
             To ensure the port resources are freed when the form is closed override
             <c>Form.OnClosed()</c> and call <c>Port.Dispose()</c>.
             The asynchronous reader data is sent by a separate thread so the event handler function
             must use <c>Invoke()</c> to access form controls.
             </remarks>
             <example>
             <code lang="VB">
             Private WithEvents serial as New SerialPorts("COM2:")
             
             Private Sub InitializeComponent()
                 serial.BaudRate = BaudRates.Baud38400
                 serial.StartAsyncRead()
             End Sub
             
             Private buffer() as Byte
             
             Private Sub port_ReceivedEvent(ByVal sender As Object, ByVal e As ReceivedEventArgs) Handles serial.ReceivedEvent
                 SyncLock Me
                     buffer = e.Data
                 End SyncLock
                 Dim eventHandler As New EventHandler(AddressOf Update)
                 Invoke(eventHandler)
             End Sub
            
             Private Sub Update(ByVal sender As Object, ByVal e As EventArgs)
                 SyncLock Me
                     TextBox1.Text = serial.Encoding.GetString(buffer, 0, buffer.Length)
                 End SyncLock
             End Sub
             
             Protected Overrides Sub OnClosed(ByVal e As System.EventArgs)
                 serial.Dispose()
                 MyBase.OnClosed(e)
             End Sub
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.#cctor">
            <summary>
            Moved code from class declaration - fields section, down into class constructor
            to avoid calling Platform invoke in that section. These fields will be initialized
            only once 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.#ctor">
            <summary>
            Instantiates a serial port object for the default port. The default port will
            be the first port available on the device (typically COM1). A list of available
            COM ports can be found by calling the <c>EnumeratePorts</c> method.
            </summary>
            <exception cref="T:System.ApplicationException">
            An ApplicationException is thrown if the device does not have any serial ports
            available for use by applications.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.#ctor(System.String)">
            <summary>
            Instantiates a serial port object for the specified port. A list of available
            COM ports can be found by calling the <c>EnumeratePorts</c> method.
            </summary>
            <param name="portName">Name of COM port. Must include trailing ':'</param>
            <exception cref="T:System.ArgumentNullException">
            The port name cannot be null
            </exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.GetHandle">
            <summary>
            Gets handle to the Serial Device
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">CreateFile, Invalid Port Name failed(_portName )failed</exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.CloseHandle">
            <summary>
            Closes Handle to the serial port.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to close handle</exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Dispose">
            <summary>
            Releases the resources used by the SerialPorts class.
            </summary>
            <remarks>
            Invoke this method 'explicitly' in circumstances where you need to 
            close down the native (Win32) serial interface ( example:
            if the serial device was physically removed from the device ) and all
            other unmanged resources.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Close">
            <summary>
            Synonym for Dispose()
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Dispose(System.Boolean)">
            <summary>
            Do the work of disposing managed objects and freeing Win32 resources
            </summary>
            <param name="disposing">true if explicitly called by user code.
            false if implicitly called by garbage collector.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Finalize">
            <summary>
            Finalization code called implicitly by garbage collector.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Write(System.Byte[])">
            <summary>
            Writes a byte array to the port.
            </summary>
            <param name="value">A byte array.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">WriteFile failed with: </exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Write(System.Char)">
            <summary>
            Writes a character to the port.
            </summary>
            <param name="value">A character to write.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Write(System.Char[])">
            <summary>
            Write a character array to the port.
            </summary>
            <param name="value">A character array to write.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Write(System.Byte)">
            <summary>
            Writes a Single Byte value to the port.
            </summary>
            <param name="value">A Byte value to write.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Write(System.String)">
            <summary>
            Writes a string to the port.
            </summary>
            <param name="value">A string to write.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.WriteLine(System.String)">
            <summary>
            Write a string to the port with NewLine appended.
            </summary>
            <param name="value">A string. A null or empty string will write just NewLine.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.ReadLine(System.TimeSpan)">
            <summary>
            Synchronous call to read a line from a port.
            </summary>
            <remarks>If this method is called when a reader is active, 
            the exception will be thrown.
            </remarks> 
            <param name="timeOut">A timeout. If set to TimeSpan.Zero then ReadLine will return
            immediately.</param>
            <returns>Null if no line read within timeOut. The line with NewLine removed otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Error, reader active.</exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.Read(System.Int32,System.TimeSpan)">
            <summary>
            Synchronous call to receive bytes from a port.
            </summary>
            <remarks>
            If there is an event registered to receive data, there will be an
            exception thrown and the socket will be invalidated.
            </remarks>
            <param name="byteCount">The number of bytes to receive.</param>
            <param name="timeOut">A timeout. If a timeout occurs then whatever is in
            the buffer will be returned. If set to TimeSpan.Zero then Read will return
            immediately with possibly 0 bytes read.</param>
            <returns>Null if no bytes read. Byte array containing bytes read</returns>
            <exception cref="T:System.InvalidOperationException">Asynchronous read active</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">ReadFile error</exception>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.StartAsyncRead">
            <summary>
            Start the asynchronous background reader thread. Data read will be
            sent to delegates bound to ReceivedEvent.  This operation will continue
            until the object is disposed or the StopAsyncRead operation is invoked.
            </summary>
            <remarks>
            If the serial port configuration changes the reader must be stopped and
            restarted for it to take effect ( see StopAsyncRead function ).
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.StopAsyncRead">
            <summary>
            Stop the asynchronous background reader thread started by the
            function StartAsyncRead.
            </summary>
            <remarks>
            Prior to making changes to the serial port's configuration, use this function
            to stop the asynchronous reader thread, make the necessary change,
            and then restart with the StartAsyncRead function.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.AsyncReader">
            <summary>
            The asynchronous reader continuously reads data from the port and
            passes it onto the delegates of the ReceivedEvent.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnReceived(System.Byte[])">
            <summary>
            Called when data is received by the serial port and 
            async thread is running.
            </summary>
            <param name="data">The data that was received from serial port</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnTransmitted">
            <summary>
            Called when data is transmitted by the serial port.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnError">
            <summary>
            Called when an error is detected on the serial port.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnSerialPortChangeEvent(System.Object,PsionTeklogix.Serial.SerialPortLocationChangeEvent)">
            <summary>
            OnSerialPortChangeEvent. Called when a serial port location change event occurs. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ePort">Event arguments containing the source port and current 
            port location information.</param>
            serialPortChangeEvent
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnSerialPortAttachedEvent(System.Object,PsionTeklogix.Serial.SerialPortAttachedEvent)">
            <summary>
            OnSerialPortAttachedEvent - called when a serial port attached event occurs.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="evt">The event arguments containing the source port.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.OnSerialPortDetachedEvent(System.Object,PsionTeklogix.Serial.SerialPortDetachedEvent)">
            <summary>
            OnSerialPortDetachedEvent - called when a serial port detached event occurs.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="evt">The event arguments containing the source port.</param>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.EnumeratePorts">
            <summary>
            Lists all COM ports on this Psion Teklogix device. 
            The EnumeratePorts() method will return a string array 
            containing the names of all COM ports on the current device. 
            Some COM ports may not be listed, as they may be reserved 
            for internal use. 
            </summary>
            <remarks>
            Starting with Windows CE 5.00 and Windows Mobile 5.0 , COM port values 
            above 10 are now supported.
            To access these higher level ports you must use Microsofts new naming convention.
            This means that you must prepend $device\ to the port name. (Note that there is
            no ":" at the end of the higher level port names)
            e.g. $device\COM11 
            </remarks>
            <returns>A list of available serial ports on the current device.</returns>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.GetPortDescription(System.String)">
            <summary>
            Returns a description of the specified serial port, 
            describing the physical device being accessed by the port. 
            Typical descriptions are: 
            "Standard serial port" 
            "IrDA communcations network port" 
            "IrDA communcations raw data port" 
            </summary>
            <returns>The port description, identifying the underlying port hardware (if any).</returns>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.GetPortLocation(System.String)">
            <summary>
            Determines the location of the specified COM port. 
            A valid location will be one of the following: 
            Portloc_On_Device - the port is located on the device 
            Portloc_On_Docking_Station - the port is located on the docking station 
            Portloc_Unknown - due to an internal error, the location of the serial 
            port cannot be determined. 
            </summary>
            <param name="PortName">COM port name</param>
            <returns>True, if the COM port location changes physical ports 
            False, if it has only one physical port.</returns>
        </member>
        <member name="M:PsionTeklogix.Serial.SerialPort.DeviceSerialPortChangesLocation(System.String)">
            <summary>
            Determines whether or not the specified port can change location due to some 
            external event, such as placing the Psion Teklogix device into a docking 
            station / cradle.
            </summary>
            <param name="PortName">COM port name</param>
            <returns>true, if the COM port location changes physical 
            ports false, if it has only one physical port.</returns>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.ReceivedEvent">
            <summary>
            Occurs when a character has been received by the serial port.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.TransmittedEvent">
            <summary>
            Occurs when a character has been transmitted by the serial port.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.ErrorEvent">
            <summary>
            Occurs when an error is detected on the serial port.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.SerialPortChangeEvent">
            <summary>
            A serial port change event occurs when a serial port changes location, usually
            as a result of the device being inserted into or removed from a docking station.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.SerialPortAttached">
            <summary>
            A serial port attached event occurs when a new serial port is detected on a
            target device, usually as a result of new hardware being attached (such as a
            port replicator).
            </summary>
        </member>
        <member name="E:PsionTeklogix.Serial.SerialPort.SerialPortDetached">
            <summary>
            A serial port detached event occurs when an existing serial port is removed
            from a target device, usually as a result of hardware being removed or 
            disconnected, such as a port replicator).
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.SettingSection">
            <summary>
            Gets or Sets the setting section that the will be used to
            configure the port.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.PortName">
            <summary>
            Gets or Sets the name of the serial port.
            </summary>
            <remarks>
            I.e. COM1: - Port 1.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If the PortName is an empty string
             </exception>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.BaudRate">
            <summary>
            Gets or Sets the baud rate for the serial port.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.ByteSize">
            <summary>
            Get or Sets the frame byte size.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.StopBits">
            <summary>
            Gets or Sets the number of stop bits.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.Parity">
            <summary>
            Gets or Sets the parity.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.UseCtsFlowControl">
            <summary>
            Gets or Sets if the CTS (clear-to-send) signal is monitored for 
            output flow control. If this member is TRUE and CTS is turned off, 
            output is suspended until CTS is sent again. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.UseDsrFlowControl">
            <summary>
            Specifies if the DSR (data-set-ready) signal is monitored
            for output flow control. If this member is TRUE and DSR 
            is turned off, output is suspended until DSR is sent again.  
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.DtrControl">
            <summary>
            Specifies the DTR (data-terminal-ready) flow control.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.RtsControl">
            <summary>
            Specifies the RTS (request-to-send) flow control.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.ReadMode">
            <summary>
            Specifies the read mode for the asynchronous reader.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.NewLine">
            <summary>
            Specifies the string that will terminate a line
            </summary>
            <exception cref="T:System.ArgumentNullException">
            New Line character was set to be empty</exception>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.Encoding">
            <summary>
            Specifies the encoding for string/char to raw bytes conversion.
            </summary>
            <remarks>Default is ASCII encoding.</remarks>
        </member>
        <member name="P:PsionTeklogix.Serial.SerialPort.ReaderActive">
            <summary>
            Indicates the state of the asynchronous reader.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.RasDevice">
            <summary>
             Contains information about a RAS device present on the Psion Teklogix device. This
            information (the device name and type) is needed when a new RAS entry is to be 
            created. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasDevice.#ctor(System.String,System.String)">
            <summary>
            Constructor. Creates a RasDevice object with the given name and type.
            </summary>
            <param name="name"> The name of the RAS device.</param>
            <param name="type"> The type of the RAS device.</param>
        </member>
        <member name="P:PsionTeklogix.RAS.RasDevice.DeviceName">
            <summary>
            The name of the RAS device ("Serial Port on COM3:", etc.)
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.RasDevice.DeviceType">
            <summary>
            The type of the RAS device ("modem", etc.)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyRemapper">
             <summary>
             The key remapper class is used to remap the scan codes for a particular
             modifier key to a different behaviour. This class is only available in
             .NET Compact Framework 2.0 or higher.
             </summary>
             <remarks>
             The KeyRemapper class is used to remap the scan codes of the keys on a
             Psion Teklogix device, in order to change the behaviour of the key(s). Any key or
             keys on the device can be remapped.
            
             The ScanCodeRemapping class enables applications to perform the follow
             operations:
             <ul>
               <li> Add a scan code remapping.</li>
               <li> Remove a scan code remapping.</li>
               <li> Remove all scan code remappings.</li>
               <li> Restore all scan code remappings added by this object.</li>
               <li> Get all scan code remappings.</li>
             </ul>
            
             A scan code is an integer value representing a key on a keyboard, and is
             hardware-specific (more precisely, specific to the type of keyboard on the
             Windows CE device). The scan code for the ENTER key, for example, may be different
             on the 56-key and 37-key boards. Keys with identical names (like ENTER) may have
             different scan codes. Consult your hardware guide for keyboard scan code values,
             or call Keyboard.TranslateToScanCode to do the conversion.
            
             Modifier keys are keys on the keyboard that when pressed, change the behaviour
             of other keys on the keyboard. The following keys are considered modifier keys:
             BLUE, ORANGE, ALT, SHIFT, CTRL. BLUE, ORANGE, and SHIFT can actually change the
             virtual key value generated by a scan code press (see below).
            
             A virtual-key code is a device-independent value defined by the system that
             identifies the purpose of a key. Scan codes are mapped to virtual key codes by
             the keyboard driver. However, the same scan code can map to different virtual key
             values due to the state of other keys on the keyboard, primarily the BLUE and
             ORANGE modifier keys. There are separate tables that represents the scan code to
             virtual key mappings when each of the modifier key states (blue pressed, orange
             pressed) and another for when neither key has been pressed. SHIFT can also affect
             the virtual code generated, however the SHIFT table cannot be remapped. The CTRL
             and ALT modifier keys will not change the virtual key code generated, however an
             application can detect the state of these keys and change its behaviour
             accordingly.
            
             A function (see the Function enumeration) is an operation that will be performed
             when a particular scan code is generated by a key press. This operation may modify
             the virtual key code generated, or cause some other effect to take place, for
             example change the backlight intensity. Typically, functions can be categorized
             as follows:
             * Macro - maps a scan code to macro key, which will then be mapped into a sequence
               of one or more virtual key codes. No virtual key code is generated.
             * Operation only - maps a scan code to some specific behaviour - no virtual key
               code is generated.
             * Virtual key (+modifier) - maps a scan code to a virtual key code, and may
               simulate the pressing of one or more modifier keys.
             * Direct Unicode Mapping - allows a scan code to be mapped directly to a UNICODE
               character.
             * Modifier key mapping - causes a scan code to simulate the pressing of a modifier
               key, in order to correctly update the modifier key state (off -> one shot ->
               locked -> off).
             * Null mapping - The Function.Skip operation causes a scan code to be ignored.
            
             A scan code remapping does not involve all above elements. It maps 
             modifier + scancode to function + optional data (which may be virtual key, macro
             index, unichar, etc.). A default mapping exists for every scan code. Scan code
             remappings are used to remap existing mappings.
            
             Some characters do not have virtual key codes, but can be generated using
             shifted key codes. For example, a '+' character is actually generated by sending
             a shifted '=' virtual key code (that is, the scan code is mapped to VK_EQUAL and
             the function Function.SendShiftedCode). These mappings can be inferred from a
             standard PC keyboard.
            
             If two threads or processes attempt to modify the keyboard scan code remappings
             at the same time, the results will be undefined.
             The following code remaps the five function keys, so that the F1 key will generate
             the VK_F5 virtual key code, F2 the VK_F4 virtual key code, etc. All the remappings
             are applied when Blue and Orange are not pressed.
                \code
                    KeyRemapper remapper;
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F1),
                        null, FunctionSendCode, VK_F5 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F2),
                        null, FunctionSendCode, VK_F4 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F3),
                        null, FunctionSendCode, VK_F3 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F4),
                        null, FunctionSendCode, VK_F2 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F5),
                        null, FunctionSendCode, VK_F1 );
                \endcode
              The following code causes the ENTER button to act like the scan button:
                \code
            
                    remapper.Add( Keyboard::TranslateToScanCode(Key_ENTER),
                        null, FunctionScannerOn, 0 );
            
                \endcode
             </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Finalize">
            <summary>
            Destructor.
            </summary>
            <remarks>
            <p> Destruct the KeyRemapper object but remain all it's remappings.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Add(System.Int32,System.Nullable{PsionTeklogix.Keyboard.Key},PsionTeklogix.Keyboard.Function,System.Int32)">
            <summary>
            Adds a new remapping to the table.
            </summary>
            <remarks>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. No error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="modifier">The modifier key related to the scan code,
            or null to indicate that no modifier key is involved.</param>
            <param name="function">The new remapping for the scan code.</param>
            <param name="data">The data to be send with the function.</param>
            <exception cref="T:System.ArgumentException">One or more parameters are invalid.
            </exception>
            <exception cref="T:System.Exception">Failed to add a scan code remapping.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Remove(System.Int32,System.Nullable{PsionTeklogix.Keyboard.Key})">
            <summary>
            Remove a remapping, if exists.
            </summary>
            <param name="scanCode">The scan code to be unmapped.</param>
            <param name="modifier">The modifier key related to the scan code,
            or null to indicate that no modifier key is involved.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.RemoveAll">
            <summary>
            Remove all remappings from system.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Restore">
            <summary>
            Remove all remappings added by current object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.GetAllKeyRemappings">
            <summary>
            Get all existing remappings.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping">
            <summary>
            The KeyRemapping struct is used to hold the function code and data generated
            by a remapped scan code.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.scanCode">
            <summary>
            The scan code to use.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.modifier">
            <summary>
            The modifier key related to the scan code.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.function">
            <summary>
            The function code to be generated when the
            remapped scan code is generated by a key press.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.data">
            <summary>
            The data to be send with the function. The data could
            be a virtual key code, a trigger source ID, or other value
            depending on the function specified.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.TriggerState">
            <summary>
            Enumerates the valid trigger states on a Psion Teklogix device.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerState.Up">
            <summary>
            Indicates that the scanner trigger has been released.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerState.Down">
            <summary>
            Indicates that the scanner trigger has been pressed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.TriggerCaptureState">
            <summary>
            Enumerates the valid trigger capture states on a Psion Teklogix device. Trigger
            capturing can be used to allow applications to determine the behaviour of the 
            scan button and external trigger.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerCaptureState.Disabled">
            <summary>
            Indicates that the scanner or imager should no longer capture trigger presses. 
            The default trigger capturing state is disabled.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerCaptureState.Enabled">
            <summary>
            Indicates that the scanner or imager should capture trigger presses. Every 
            trigger up and trigger down will generate an event that will be published to 
            registered image capture trigger handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl">
            <summary>
            @deprecated Will be replaced by Imager SDK and namespace.
            Implements the control used to create and manage an image capture device. See
            ImageCaptureDevice class for more details.
            </summary>
            <remarks>
            <p>The image capture device control will always choose the first available imager
            to open. If the imager is not available, the second one will be opened, etc. If no
            available imagers are found, or no image capture devices are present on the Psion
            Teklogix device, an exception will be thrown.</p>
            <p>In order to select another imager to use, set the name of the 
            ImageCaptureDeviceControl object to the name of another imager present on the
            Psion Teklogix device. This action will cause the control to close the connection
            to the currently-open imager, and attempt to open a connection to the new imager.</p> 
            <p>Many of the configurable imager properties have been marked as non-browsable,
            because the properties are either read-only, or are imager-specific and should be
            left at their default values if possible. The non-readonly property values can
            still be changed, they will just not appear in the designer.</p>
            <p>Some properties have been given an invalid default value (for example, -1), as
            the property values can be very imager-specific, and can vary depending on ambient 
            light levels (for example). Leaving the properties with invalid values will simply 
            result in the default values set initially in the driver being used.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.#ctor">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The ImageCaptureDeviceControl default constructor. The default constructor
            creates a new imager instance using the first available imager present on the
            Psion Teklogix device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.Dispose">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Releases the resources held by the ImageCaptureDevice object, in order to 
            allow other applications to be able to use the imager device.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.DefaultSettings">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             Defaults all of the image capture device settings. 
             </summary>
             <remarks>
             <p> Defaulting the imager settings has no effect on the settings used by the 
             imager when it is going to scan a barcode.</p>
             
             <p> The following parameters are affected:
             * Brightness
             * Contrast
             * Exposure Time
             * Sub-sampling Factor
             * Horizontal Size
             * Vertical Size
             </p>
             
             <p>The image type parameter will not be affected.</p>
            
             <p>Because changing this property can change the image size and resolution, 
             the value reported by the MaximumFileSize property may also change.</p>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.CaptureImage(System.IO.FileInfo)">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>Causes the image capture device to capture an image using the current parameters
             configured. The captured image will be placed in the object store (the temporary
             Windows CE file system). The name of the captured image (including the extension) 
             will be reported to any registered image capture handlers through an image saved
             event.</p>
             </summary>
             <remarks>
             <p>When an application calls this method it must pass in the name of the file, 
             <u>minus the extension</u>, where the captured image is to be stored. The image
             capture API will add the extension corresponding to the configured image type,
             and report the final name of the capture file in the event sent to all  
             registered image capture event handlers. Any extension provided will be treated 
             as part of the file name.</p>
            
             <p>For example, if an image is configured to generate .BMP files:
             <code>
                imager.CaptureImage(new File("ImageFileName"));
             </code>
            
             will create an image file called <i>ImageFileName.bmp</i>. If the application
             does the following instead:
            
             <code>
                imager.CaptureImage(new File("ImageFileName.bmp"));
             </code>
            
             the file generated will be named <i>ImageFileName.bmp.bmp</i>
             </p>
             </remarks>
             
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified file information object is null.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.CaptureLastValidImage(System.IO.FileInfo)">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
              The CaptureLastValidImage method is used to store the last valid image 
             captured by the imager device. 
             </summary>
             <remarks>
             <p>A valid image can be generated in one of two ways:
             * By calling CaptureImage. An image captured this way will remain in memory; 
               calling CaptureLastValidImage will cause the stored image to be saved to 
               the file system.
             * A successful barcode scan, i.e. one that caused one or more barcodes to be 
               decoded by the imaging scanner, will generate a valid image that will remain 
               in memory (until another successful scan or image capture occurs).
             </p>
            
             <p>This method, unlike the CaptureImage method, operates synchronously.
             It does not return until the image data is saved to the file system, or until
             an error is detected. Also, it does not generate an image saved event when an
             image is captured.</p>
             
             <p>In order to get an image associated with a particular barcode, an 
             application should register a ScanCompleteEvent handler method with 
             the event in a Scanner instance. When a scan complete event occurs, an 
             application can then call the CaptureLastValidImage method to get the
             associated barcode.</p>
             </remarks>
             <param name="fileSpecification"> The name of the file to place the captured 
              image data into, minus the extension. Must not be null.</param>
             <returns>A FileInfo object representing the file containing the image.</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the specified
             FileInfo object is null.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If there is no
             valid image present in memory to save.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.EnumerateSupportedImageTypes">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Returns the image type or types supported by the image capture device.
            </summary>
            <remarks>
            Older Symagery imagers (SX4000) only support the bitmap format. Newer Symagery 
            imagers support both the bitmap and JPEG formats.
            </remarks>
            <returns>An array of strings listing the supported image file types.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.OpenViewfinderWindow(System.Drawing.Rectangle)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Opens a new viewfinder window with the given dimensions/location 
            </summary>
            <remarks>
             The location of the image should be relative to the upper-left hand corner of
            the screen. Since this offset is difficult to get in .NET, where all locations
            are given relative to the upper-left hand corner of the parent control, using
            the location relative to the parent control is also acceptable. In this case
            however, the parent control should be as close to the upper-left hand corner 
            of the display as possible.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.CloseViewfinderWindow">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Closes the open viewfinder window. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.OnImageCaptureSavedEvent(System.Object,PsionTeklogix.Barcode.ScannerServices.ImageCaptureSavedEventArgs)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Publishes an image-saved event to any registered handlers. The name of the
            file containing the image captured will be included in the event arguments.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.OnImageCaptureTriggerEvent(System.Object,PsionTeklogix.Barcode.ScannerServices.ImageCaptureTriggerEventArgs)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Publishes an trigger state change event to any registered handlers. The 
            trigger state at the time of the event is included in the event arguments.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.imageSavedEvent">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The event used to notify registered event consumers when an image has been 
            successfully captured by the imager and saved to the file system. 
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.triggerCapturedEvent">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            The event used to notify registered event consumers when a trigger press 
            has been detected. Both trigger up and trigger down events will be published.
            </summary>
            <remarks>
            It is possible in rare instances to get multiple trigger-up events in sequence,
            without a trigger-down event occurring between them.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.Name">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Returns the name of the image capture device being controlled. Can also be
            used to change the image capture device managed by the control.
            </summary>
            <remarks>
            <p>If an application attempts to set the name of the control to a value different
            from the name of the device currently being managed, the ImageCaptureDeviceControl
            will release control of the image capture device, and attempt to take control 
            of the specified image capture device. If the name of the new image capture 
            specified is not valid, or the specified device is not present or is already 
            in use, an exception will be thrown. See the ImageCaptureDevice class for more
            details.</p>
            <p> Different devices may have different imagers. In order to simplify
            application development, the ImageCaptureDeviceControl will by default open
            the first available image capture device. The EnumerateImageCaptureDevices
            method in the ImageCaptureDevice class can be used to determine if other 
            imagers are available for use (and their names).</p>
            </remarks>
            <returns>The name of the image capture device being controlled.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.ImageCaptureDevice">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Allows an application to access the internal image capture device object 
            used to control the imager.
            </summary>
            <returns>
             The internal image capture device object used by the control to access the
            imager.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.ImagerTriggerCaptureState">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>All image capture devices, or "imagers", operate as barcode scanners by 
             default. In other words, pulling the scanner trigger, pressing the scan button,
             or initiating a softscan through the Scanner API will simply cause the imager
             to scan for barcodes. However, an application may want to detect when the 
             scanner trigger is pulled, in order capture an image, or store the image 
             generated by a successful barcode scan. In order to be able to perform one of 
             these operations, the application must be able to receive a notification when 
             the imager trigger is pulled. By changing the trigger capture state, 
             applications can register to receive trigger events as they occur, allowing 
             them to gain finer control of imager operations.</p>
            
             <p>Once the trigger capture state has been set to TriggerCaptureState.Enabled,
             all "trigger down" and "trigger up" events will be sent to handlers registered 
             with the imager event, <i>triggerCapturedEvent</i>. Trigger events will always 
             come in order: "trigger down", when the trigger is pulled or the scan button is 
             pressed, followed by "trigger up", when the trigger or scan button is released.
             </p>
             </summary>
             <remarks>
             <p>Changing the trigger capture state has no effect on the imager, with respect
             to its operation as a barcode scanner. At the point when a trigger is received 
             by the application, the process of scanning a barcode will have already begun. 
             In order prevent the imager from scanning a barcode when the trigger is pulled, 
             an application can use the ImagerScanningState property to disable the scanner
             portion of the image capture device.</p>
            
             <p>The scan button(s), the scanner trigger (if the device has one) and a 
             softscan generated using the Scanner API are all considered "triggers", and
             function identically.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.ImagerBarcodeScanningState">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>This property is used to enable or disable the barcode scanning functionality 
             of the image capture device. Disabling the scanner functionality is only 
             typically done when an application either has to prevent a user from scanning 
             barcodes, or when it is going to take control of the trigger in order to use
             the trigger to initiate image captures.</p>
             </summary>
             <remarks>
             <p>Note that when this method is called, <b><u>ALL</u></b> mechanisms used to 
             generate barcode scans, include software-initiated scans, are disabled for this 
             imager device.</p>  
            
             <p><b>Warning:</b> It is the responsiblility of the application to re-enable 
             the scanning features of the imager using this method before it exits. If the 
             application fails to re-enable barcode scanning before it exits, no other 
             application will be able to initiate a barcode scan until another application 
             re-enables barcode scanning.</p>
             </remarks>
             
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.HorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The width of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The width set must be positive, and less than or equal to the value reported 
            by the GetMaximumHorizontalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the specified new 
            value is out of range/invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MaximumHorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The maximum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MinimumHorizontalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The minimum width of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.VerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The height of the image in pixels. Note that different imagers may support
            different ranges of valid values.</p>
            </summary>
            <remarks>
            <p>On the Symagery imagers, the image size (both horizontal and vertical) 
            must be a multiple of 32.</p>
            <p>The height set must be positive, and less than or equal to the value reported 
            by the GetMaximumVerticalImageSize property.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MaximumVerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The maximum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MinimumVerticalImageSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>The minimum height of the image in pixels. Note that different imagers may 
            support different ranges of valid values.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.Contrast">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the contrast (also called gain) setting on the imager. The specified 
            contrast value should be between 0 (lowest contrast) and 100 (highest contrast).</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.Brightness">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the brightness (also called illumination) setting on the imager. The 
            specified value should be between 0 (lowest brightness level) and 100 (highest 
            brightness level).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.ExposureTime">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Changes the current exposure time setting on the imager. The new exposure time
            value should be specified as a percentage between 0 (shortest exposure time) and
            100 (longest exposure time).</p>
            </summary>
            <exception cref="T:System.ArgumentException">ArgumentException - If the new value
            specified is out of range.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.SubSamplingFactor">
             <summary>
             @deprecated This class will be replaced by Imager SDK and namespace.
             <p>Changes the sub-sampling factor setting on the imager. The sub-sampling 
             factor controls the resolution or pixel-per-inch (ppi) that the imager uses 
             when capturing an image. </p>
             </summary>
             <remarks>
             <p>The Symagery imager uses the parameter to determine the number of pixels (or 
             samples) that will be used to create an image. Smaller values give a finer 
             resolution (and therefore a sharper image), larger values give a more 
             coarse resolution (and therefore a lower-quality image).</p>
            
             For example:
             <code>
              * a value of 0 means no sub-sampling i.e. the finest resolution:  XXXXXXXXXXXXXXXX
              * a value of 1 means 1 out of 2 pixels:                           X_X_X_X_X_X_X_X_
              * a value of 2 means 1 out of 4 pixels:                           X___X___X___X___
              * a value of 3 means 1 out of 8 pixels i.e. the lowest:           X_______X_______
             </code>
            
             <p>Note that the sub-sampling factor applies to both X and Y axis.</p>
            
             <p>The maximum valid value for the subsampling factor is given by the
             MaximumSubSamplingFactor property.</p>
             </remarks>
             <exception cref="T:System.ArgumentException">ArgumentException - If the new value
             specified is out of range.</exception>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MaximumSubSamplingFactor">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Returns the maximum possible sub-sampling factor that can be configured on the 
            imager.</p>
            </summary>
            <returns>The maximum possible sub-sampling factor that can be configured on the 
            imager.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.MaximumFileSize">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>Calculates and returns the maximum size of an image that can be generated
            by the image capture device, given the current sub-sampling factor, and the 
            image height and width settings. Generally, smaller images and larger sub-
            sampling values will reduce the size of the image file generated. The final 
            file size will also depend on the type of image created, and whether or not 
            the image format supports compression.</p>
            </summary>
            <returns> The size of the largest image that can be created, given the current 
            imager settings. The image size is reported in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.ImageFileType">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Sets/gets the file format the imager will using when saving captured images.
            </summary>
            <remarks>
            The new file format name must be one of the values reported by the
            EnumerateSupportedImageTypes method.
            </remarks>
            <exception cref="T:System.ArgumentException">ArgumentException - If the 
            specified file type is not supported by the imager.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.AutoExposure">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            <p>When auto-exposure mode is enabled 
            the contrast and brightness  values will be dynamically changed by the imager based on
            ambient light conditions. When auto-exposure is disabled the contrast and brightness 
            settings can once again be adjusted by the application. Note: enabling auto-exposure 
            may also affect other imager settings, however this behaviour is imager dependent.</p>
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.IlluminationLedsEnabled">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Enables or disables the LEDs on the imager used to illuminate the object(s)
            whose image will be captured. 
            </summary>
            <remarks>
            For manual exposure mode, disabling the LEDs is equivalent to setting the 
            brightness to zero. There is no equivalent for auto-exposure mode.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureDeviceControl.PowerState">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
             Sets/gets the power state of the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            ImageCaptureDevice object has already been disposed.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.DesignTimeImager.#ctor(System.String)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor. Sets the default values for the properties - these values will
            appear in the designer. Changes made to these values while in the VS designer
            will be stored here.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureSavedEventArgs">
            <summary>
            @deprecated Will be replaced by Imager SDK and namespace.    
            Reports all information related to a successful image capture. Only information
            about the file containing the captured image is currently reported.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureSavedEventArgs.#ctor(System.IO.FileInfo)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor. Initializes an ImageCaptureSavedEventArgs instance.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureSavedEventArgs.ImageFileInfo">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Returns an instance of the FileInfo class that references the file containing
            the image captured by the imager device.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ImageCaptureTriggerEventArgs">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Instances of the ImageCaptureTriggerEventArgs class are used to report the state
            of the scanner/imager trigger on a Psion Teklogix device. The trigger state will
            change when a user presses or releases the external trigger, or presses or releases
            the scan button. Software-initiated scans also generate trigger up and trigger down
            events.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ImageCaptureTriggerEventArgs.#ctor(PsionTeklogix.Barcode.TriggerState)">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Constructor. Initializes an ImageCaptureTriggerEventArgs instance.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ImageCaptureTriggerEventArgs.StateOfTrigger">
            <summary>
            @deprecated This class will be replaced by Imager SDK and namespace.
            Returns the state of the trigger at the time the event was generated.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedError">
            <summary>
            Enumerates the possible errors that can be reported when a failed scan occurs.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.Failed">
            <summary>
            The attempt to scan a barcode failed. No other information is available.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.TimedOut">
            <summary>
            The attempt to scan a barcode timed out. This error could be as a result of
            attempting to scan an unsupported / disabled barcode type, attempting to scan 
            a damaged barcode, and/or attempting to scan something other than a barcode.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.Cancelled">
            <summary>
             The barcode scan attempt was cancelled by the user - the user released the
            trigger or scan button before a barcode was scanned.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedEventArgs">
            <summary>
            Used to report information about a failed scan.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanFailedEventArgs.ToString">
            <summary>
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanFailedEventArgs.ErrorCode">
            <summary>
            </summary>
        </member>
    </members>
</doc>
